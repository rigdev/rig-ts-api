// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file platform/v1/generated.proto (package platform.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CrossVersionObjectReference } from "../../k8s.io/api/autoscaling/v2/generated_pb.js";

/**
 * @generated from message platform.v1.CapsuleSet
 */
export class CapsuleSet extends Message<CapsuleSet> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string project = 4;
   */
  project = "";

  /**
   * @generated from field: platform.v1.CapsuleSpec spec = 5;
   */
  spec?: CapsuleSpec;

  /**
   * @generated from field: map<string, platform.v1.CapsuleSpec> environments = 6;
   */
  environments: { [key: string]: CapsuleSpec } = {};

  /**
   * @generated from field: repeated string environmentRefs = 7;
   */
  environmentRefs: string[] = [];

  constructor(data?: PartialMessage<CapsuleSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CapsuleSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "spec", kind: "message", T: CapsuleSpec },
    { no: 6, name: "environments", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CapsuleSpec} },
    { no: 7, name: "environmentRefs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleSet {
    return new CapsuleSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleSet {
    return new CapsuleSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleSet {
    return new CapsuleSet().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleSet | PlainMessage<CapsuleSet> | undefined, b: CapsuleSet | PlainMessage<CapsuleSet> | undefined): boolean {
    return proto3.util.equals(CapsuleSet, a, b);
  }
}

/**
 * @generated from message platform.v1.CapsuleSpec
 */
export class CapsuleSpec extends Message<CapsuleSpec> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: map<string, string> annotations = 11;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: string image = 3;
   */
  image = "";

  /**
   * @generated from field: string command = 4;
   */
  command = "";

  /**
   * @generated from field: repeated string args = 5;
   */
  args: string[] = [];

  /**
   * @generated from field: repeated platform.v1.CapsuleInterface interfaces = 6;
   */
  interfaces: CapsuleInterface[] = [];

  /**
   * @generated from field: repeated platform.v1.File files = 7;
   */
  files: File[] = [];

  /**
   * @generated from field: platform.v1.EnvironmentVariables env = 12;
   */
  env?: EnvironmentVariables;

  /**
   * @generated from field: platform.v1.Scale scale = 8;
   */
  scale?: Scale;

  /**
   * @generated from field: repeated platform.v1.CronJob cronJobs = 10;
   */
  cronJobs: CronJob[] = [];

  /**
   * @generated from field: bool autoAddRigServiceAccounts = 13;
   */
  autoAddRigServiceAccounts = false;

  constructor(data?: PartialMessage<CapsuleSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CapsuleSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "interfaces", kind: "message", T: CapsuleInterface, repeated: true },
    { no: 7, name: "files", kind: "message", T: File, repeated: true },
    { no: 12, name: "env", kind: "message", T: EnvironmentVariables },
    { no: 8, name: "scale", kind: "message", T: Scale },
    { no: 10, name: "cronJobs", kind: "message", T: CronJob, repeated: true },
    { no: 13, name: "autoAddRigServiceAccounts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleSpec {
    return new CapsuleSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleSpec {
    return new CapsuleSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleSpec {
    return new CapsuleSpec().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleSpec | PlainMessage<CapsuleSpec> | undefined, b: CapsuleSpec | PlainMessage<CapsuleSpec> | undefined): boolean {
    return proto3.util.equals(CapsuleSpec, a, b);
  }
}

/**
 * @generated from message platform.v1.CapsuleInterface
 */
export class CapsuleInterface extends Message<CapsuleInterface> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 port = 2;
   */
  port = 0;

  /**
   * @generated from field: platform.v1.InterfaceProbe liveness = 3;
   */
  liveness?: InterfaceProbe;

  /**
   * @generated from field: platform.v1.InterfaceProbe readiness = 4;
   */
  readiness?: InterfaceProbe;

  /**
   * @generated from field: repeated platform.v1.HostRoute routes = 6;
   */
  routes: HostRoute[] = [];

  constructor(data?: PartialMessage<CapsuleInterface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CapsuleInterface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "liveness", kind: "message", T: InterfaceProbe },
    { no: 4, name: "readiness", kind: "message", T: InterfaceProbe },
    { no: 6, name: "routes", kind: "message", T: HostRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleInterface {
    return new CapsuleInterface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleInterface {
    return new CapsuleInterface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleInterface {
    return new CapsuleInterface().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleInterface | PlainMessage<CapsuleInterface> | undefined, b: CapsuleInterface | PlainMessage<CapsuleInterface> | undefined): boolean {
    return proto3.util.equals(CapsuleInterface, a, b);
  }
}

/**
 * @generated from message platform.v1.InterfaceProbe
 */
export class InterfaceProbe extends Message<InterfaceProbe> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bool tcp = 2;
   */
  tcp = false;

  /**
   * @generated from field: platform.v1.InterfaceGRPCProbe grpc = 3;
   */
  grpc?: InterfaceGRPCProbe;

  constructor(data?: PartialMessage<InterfaceProbe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.InterfaceProbe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tcp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "grpc", kind: "message", T: InterfaceGRPCProbe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceProbe | PlainMessage<InterfaceProbe> | undefined, b: InterfaceProbe | PlainMessage<InterfaceProbe> | undefined): boolean {
    return proto3.util.equals(InterfaceProbe, a, b);
  }
}

/**
 * @generated from message platform.v1.InterfaceGRPCProbe
 */
export class InterfaceGRPCProbe extends Message<InterfaceGRPCProbe> {
  /**
   * @generated from field: string service = 1;
   */
  service = "";

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled = false;

  constructor(data?: PartialMessage<InterfaceGRPCProbe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.InterfaceGRPCProbe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceGRPCProbe {
    return new InterfaceGRPCProbe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceGRPCProbe {
    return new InterfaceGRPCProbe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceGRPCProbe {
    return new InterfaceGRPCProbe().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceGRPCProbe | PlainMessage<InterfaceGRPCProbe> | undefined, b: InterfaceGRPCProbe | PlainMessage<InterfaceGRPCProbe> | undefined): boolean {
    return proto3.util.equals(InterfaceGRPCProbe, a, b);
  }
}

/**
 * @generated from message platform.v1.HostRoute
 */
export class HostRoute extends Message<HostRoute> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: repeated platform.v1.HTTPPathRoute paths = 3;
   */
  paths: HTTPPathRoute[] = [];

  /**
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<HostRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.HostRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "paths", kind: "message", T: HTTPPathRoute, repeated: true },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HostRoute {
    return new HostRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HostRoute {
    return new HostRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HostRoute {
    return new HostRoute().fromJsonString(jsonString, options);
  }

  static equals(a: HostRoute | PlainMessage<HostRoute> | undefined, b: HostRoute | PlainMessage<HostRoute> | undefined): boolean {
    return proto3.util.equals(HostRoute, a, b);
  }
}

/**
 * @generated from message platform.v1.HTTPPathRoute
 */
export class HTTPPathRoute extends Message<HTTPPathRoute> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string match = 2;
   */
  match = "";

  constructor(data?: PartialMessage<HTTPPathRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.HTTPPathRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HTTPPathRoute {
    return new HTTPPathRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HTTPPathRoute {
    return new HTTPPathRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HTTPPathRoute {
    return new HTTPPathRoute().fromJsonString(jsonString, options);
  }

  static equals(a: HTTPPathRoute | PlainMessage<HTTPPathRoute> | undefined, b: HTTPPathRoute | PlainMessage<HTTPPathRoute> | undefined): boolean {
    return proto3.util.equals(HTTPPathRoute, a, b);
  }
}

/**
 * @generated from message platform.v1.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bool asSecret = 3;
   */
  asSecret = false;

  /**
   * @generated from field: bytes bytes = 4;
   */
  bytes = new Uint8Array(0);

  /**
   * @generated from field: string string = 5;
   */
  string = "";

  /**
   * @generated from field: platform.v1.FileReference ref = 6;
   */
  ref?: FileReference;

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asSecret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ref", kind: "message", T: FileReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message platform.v1.FileReference
 */
export class FileReference extends Message<FileReference> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  constructor(data?: PartialMessage<FileReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.FileReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileReference {
    return new FileReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileReference {
    return new FileReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileReference {
    return new FileReference().fromJsonString(jsonString, options);
  }

  static equals(a: FileReference | PlainMessage<FileReference> | undefined, b: FileReference | PlainMessage<FileReference> | undefined): boolean {
    return proto3.util.equals(FileReference, a, b);
  }
}

/**
 * @generated from message platform.v1.EnvironmentVariables
 */
export class EnvironmentVariables extends Message<EnvironmentVariables> {
  /**
   * @generated from field: map<string, string> raw = 1;
   */
  raw: { [key: string]: string } = {};

  /**
   * @generated from field: repeated platform.v1.EnvironmentSource sources = 2;
   */
  sources: EnvironmentSource[] = [];

  constructor(data?: PartialMessage<EnvironmentVariables>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.EnvironmentVariables";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "sources", kind: "message", T: EnvironmentSource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentVariables {
    return new EnvironmentVariables().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentVariables {
    return new EnvironmentVariables().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentVariables {
    return new EnvironmentVariables().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentVariables | PlainMessage<EnvironmentVariables> | undefined, b: EnvironmentVariables | PlainMessage<EnvironmentVariables> | undefined): boolean {
    return proto3.util.equals(EnvironmentVariables, a, b);
  }
}

/**
 * @generated from message platform.v1.EnvironmentSource
 */
export class EnvironmentSource extends Message<EnvironmentSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  constructor(data?: PartialMessage<EnvironmentSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.EnvironmentSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentSource {
    return new EnvironmentSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentSource {
    return new EnvironmentSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentSource {
    return new EnvironmentSource().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentSource | PlainMessage<EnvironmentSource> | undefined, b: EnvironmentSource | PlainMessage<EnvironmentSource> | undefined): boolean {
    return proto3.util.equals(EnvironmentSource, a, b);
  }
}

/**
 * @generated from message platform.v1.Scale
 */
export class Scale extends Message<Scale> {
  /**
   * @generated from field: platform.v1.HorizontalScale horizontal = 1;
   */
  horizontal?: HorizontalScale;

  /**
   * @generated from field: platform.v1.VerticalScale vertical = 2;
   */
  vertical?: VerticalScale;

  constructor(data?: PartialMessage<Scale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.Scale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "horizontal", kind: "message", T: HorizontalScale },
    { no: 2, name: "vertical", kind: "message", T: VerticalScale },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Scale {
    return new Scale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Scale {
    return new Scale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Scale {
    return new Scale().fromJsonString(jsonString, options);
  }

  static equals(a: Scale | PlainMessage<Scale> | undefined, b: Scale | PlainMessage<Scale> | undefined): boolean {
    return proto3.util.equals(Scale, a, b);
  }
}

/**
 * @generated from message platform.v1.HorizontalScale
 */
export class HorizontalScale extends Message<HorizontalScale> {
  /**
   * @generated from field: uint32 min = 4;
   */
  min = 0;

  /**
   * @generated from field: uint32 max = 5;
   */
  max = 0;

  /**
   * @generated from field: platform.v1.Instances instances = 1;
   */
  instances?: Instances;

  /**
   * @generated from field: platform.v1.CPUTarget cpuTarget = 2;
   */
  cpuTarget?: CPUTarget;

  /**
   * @generated from field: repeated platform.v1.CustomMetric customMetrics = 3;
   */
  customMetrics: CustomMetric[] = [];

  constructor(data?: PartialMessage<HorizontalScale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.HorizontalScale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "min", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 1, name: "instances", kind: "message", T: Instances },
    { no: 2, name: "cpuTarget", kind: "message", T: CPUTarget },
    { no: 3, name: "customMetrics", kind: "message", T: CustomMetric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorizontalScale {
    return new HorizontalScale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorizontalScale {
    return new HorizontalScale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorizontalScale {
    return new HorizontalScale().fromJsonString(jsonString, options);
  }

  static equals(a: HorizontalScale | PlainMessage<HorizontalScale> | undefined, b: HorizontalScale | PlainMessage<HorizontalScale> | undefined): boolean {
    return proto3.util.equals(HorizontalScale, a, b);
  }
}

/**
 * @generated from message platform.v1.Instances
 */
export class Instances extends Message<Instances> {
  /**
   * @generated from field: uint32 min = 1;
   */
  min = 0;

  /**
   * @generated from field: uint32 max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<Instances>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.Instances";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instances {
    return new Instances().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instances {
    return new Instances().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instances {
    return new Instances().fromJsonString(jsonString, options);
  }

  static equals(a: Instances | PlainMessage<Instances> | undefined, b: Instances | PlainMessage<Instances> | undefined): boolean {
    return proto3.util.equals(Instances, a, b);
  }
}

/**
 * @generated from message platform.v1.CPUTarget
 */
export class CPUTarget extends Message<CPUTarget> {
  /**
   * @generated from field: uint32 utilization = 1;
   */
  utilization = 0;

  constructor(data?: PartialMessage<CPUTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CPUTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "utilization", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CPUTarget {
    return new CPUTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CPUTarget {
    return new CPUTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CPUTarget {
    return new CPUTarget().fromJsonString(jsonString, options);
  }

  static equals(a: CPUTarget | PlainMessage<CPUTarget> | undefined, b: CPUTarget | PlainMessage<CPUTarget> | undefined): boolean {
    return proto3.util.equals(CPUTarget, a, b);
  }
}

/**
 * @generated from message platform.v1.CustomMetric
 */
export class CustomMetric extends Message<CustomMetric> {
  /**
   * @generated from field: platform.v1.InstanceMetric instanceMetric = 1;
   */
  instanceMetric?: InstanceMetric;

  /**
   * @generated from field: platform.v1.ObjectMetric objectMetric = 2;
   */
  objectMetric?: ObjectMetric;

  constructor(data?: PartialMessage<CustomMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CustomMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instanceMetric", kind: "message", T: InstanceMetric },
    { no: 2, name: "objectMetric", kind: "message", T: ObjectMetric },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomMetric {
    return new CustomMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomMetric {
    return new CustomMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomMetric {
    return new CustomMetric().fromJsonString(jsonString, options);
  }

  static equals(a: CustomMetric | PlainMessage<CustomMetric> | undefined, b: CustomMetric | PlainMessage<CustomMetric> | undefined): boolean {
    return proto3.util.equals(CustomMetric, a, b);
  }
}

/**
 * @generated from message platform.v1.InstanceMetric
 */
export class InstanceMetric extends Message<InstanceMetric> {
  /**
   * @generated from field: string metricName = 1;
   */
  metricName = "";

  /**
   * @generated from field: map<string, string> matchLabels = 2;
   */
  matchLabels: { [key: string]: string } = {};

  /**
   * @generated from field: string averageValue = 3;
   */
  averageValue = "";

  constructor(data?: PartialMessage<InstanceMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.InstanceMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "matchLabels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "averageValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceMetric {
    return new InstanceMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceMetric {
    return new InstanceMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceMetric {
    return new InstanceMetric().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceMetric | PlainMessage<InstanceMetric> | undefined, b: InstanceMetric | PlainMessage<InstanceMetric> | undefined): boolean {
    return proto3.util.equals(InstanceMetric, a, b);
  }
}

/**
 * @generated from message platform.v1.ObjectMetric
 */
export class ObjectMetric extends Message<ObjectMetric> {
  /**
   * @generated from field: string metricName = 1;
   */
  metricName = "";

  /**
   * @generated from field: map<string, string> matchLabels = 2;
   */
  matchLabels: { [key: string]: string } = {};

  /**
   * @generated from field: string averageValue = 3;
   */
  averageValue = "";

  /**
   * @generated from field: string value = 4;
   */
  value = "";

  /**
   * @generated from field: k8s.io.api.autoscaling.v2.CrossVersionObjectReference objectReference = 5;
   */
  objectReference?: CrossVersionObjectReference;

  constructor(data?: PartialMessage<ObjectMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.ObjectMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "matchLabels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "averageValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "objectReference", kind: "message", T: CrossVersionObjectReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectMetric {
    return new ObjectMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectMetric {
    return new ObjectMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectMetric {
    return new ObjectMetric().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectMetric | PlainMessage<ObjectMetric> | undefined, b: ObjectMetric | PlainMessage<ObjectMetric> | undefined): boolean {
    return proto3.util.equals(ObjectMetric, a, b);
  }
}

/**
 * @generated from message platform.v1.VerticalScale
 */
export class VerticalScale extends Message<VerticalScale> {
  /**
   * @generated from field: platform.v1.ResourceLimits cpu = 1;
   */
  cpu?: ResourceLimits;

  /**
   * @generated from field: platform.v1.ResourceLimits memory = 2;
   */
  memory?: ResourceLimits;

  /**
   * @generated from field: platform.v1.ResourceRequest gpu = 3;
   */
  gpu?: ResourceRequest;

  constructor(data?: PartialMessage<VerticalScale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.VerticalScale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu", kind: "message", T: ResourceLimits },
    { no: 2, name: "memory", kind: "message", T: ResourceLimits },
    { no: 3, name: "gpu", kind: "message", T: ResourceRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerticalScale {
    return new VerticalScale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerticalScale {
    return new VerticalScale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerticalScale {
    return new VerticalScale().fromJsonString(jsonString, options);
  }

  static equals(a: VerticalScale | PlainMessage<VerticalScale> | undefined, b: VerticalScale | PlainMessage<VerticalScale> | undefined): boolean {
    return proto3.util.equals(VerticalScale, a, b);
  }
}

/**
 * @generated from message platform.v1.ResourceLimits
 */
export class ResourceLimits extends Message<ResourceLimits> {
  /**
   * @generated from field: string request = 1;
   */
  request = "";

  /**
   * @generated from field: string limit = 2;
   */
  limit = "";

  constructor(data?: PartialMessage<ResourceLimits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.ResourceLimits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceLimits {
    return new ResourceLimits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceLimits {
    return new ResourceLimits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceLimits {
    return new ResourceLimits().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceLimits | PlainMessage<ResourceLimits> | undefined, b: ResourceLimits | PlainMessage<ResourceLimits> | undefined): boolean {
    return proto3.util.equals(ResourceLimits, a, b);
  }
}

/**
 * @generated from message platform.v1.ResourceRequest
 */
export class ResourceRequest extends Message<ResourceRequest> {
  /**
   * @generated from field: string request = 1;
   */
  request = "";

  constructor(data?: PartialMessage<ResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.ResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceRequest {
    return new ResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceRequest {
    return new ResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceRequest {
    return new ResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceRequest | PlainMessage<ResourceRequest> | undefined, b: ResourceRequest | PlainMessage<ResourceRequest> | undefined): boolean {
    return proto3.util.equals(ResourceRequest, a, b);
  }
}

/**
 * @generated from message platform.v1.CronJob
 */
export class CronJob extends Message<CronJob> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string schedule = 2;
   */
  schedule = "";

  /**
   * @generated from field: platform.v1.URL url = 3;
   */
  url?: URL;

  /**
   * @generated from field: platform.v1.JobCommand command = 4;
   */
  command?: JobCommand;

  /**
   * @generated from field: uint64 maxRetries = 5;
   */
  maxRetries = protoInt64.zero;

  /**
   * @generated from field: uint64 timeoutSeconds = 6;
   */
  timeoutSeconds = protoInt64.zero;

  constructor(data?: PartialMessage<CronJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CronJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schedule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "message", T: URL },
    { no: 4, name: "command", kind: "message", T: JobCommand },
    { no: 5, name: "maxRetries", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "timeoutSeconds", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronJob {
    return new CronJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronJob {
    return new CronJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronJob {
    return new CronJob().fromJsonString(jsonString, options);
  }

  static equals(a: CronJob | PlainMessage<CronJob> | undefined, b: CronJob | PlainMessage<CronJob> | undefined): boolean {
    return proto3.util.equals(CronJob, a, b);
  }
}

/**
 * @generated from message platform.v1.URL
 */
export class URL extends Message<URL> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: map<string, string> queryParameters = 3;
   */
  queryParameters: { [key: string]: string } = {};

  constructor(data?: PartialMessage<URL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.URL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "queryParameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URL {
    return new URL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URL {
    return new URL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URL {
    return new URL().fromJsonString(jsonString, options);
  }

  static equals(a: URL | PlainMessage<URL> | undefined, b: URL | PlainMessage<URL> | undefined): boolean {
    return proto3.util.equals(URL, a, b);
  }
}

/**
 * @generated from message platform.v1.JobCommand
 */
export class JobCommand extends Message<JobCommand> {
  /**
   * @generated from field: string command = 1;
   */
  command = "";

  /**
   * @generated from field: repeated string args = 2;
   */
  args: string[] = [];

  constructor(data?: PartialMessage<JobCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.JobCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobCommand {
    return new JobCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobCommand {
    return new JobCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobCommand {
    return new JobCommand().fromJsonString(jsonString, options);
  }

  static equals(a: JobCommand | PlainMessage<JobCommand> | undefined, b: JobCommand | PlainMessage<JobCommand> | undefined): boolean {
    return proto3.util.equals(JobCommand, a, b);
  }
}

/**
 * @generated from message platform.v1.Capsule
 */
export class Capsule extends Message<Capsule> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string project = 4;
   */
  project = "";

  /**
   * @generated from field: string environment = 5;
   */
  environment = "";

  /**
   * @generated from field: platform.v1.CapsuleSpec spec = 6;
   */
  spec?: CapsuleSpec;

  constructor(data?: PartialMessage<Capsule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.Capsule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "spec", kind: "message", T: CapsuleSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Capsule {
    return new Capsule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Capsule {
    return new Capsule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Capsule {
    return new Capsule().fromJsonString(jsonString, options);
  }

  static equals(a: Capsule | PlainMessage<Capsule> | undefined, b: Capsule | PlainMessage<Capsule> | undefined): boolean {
    return proto3.util.equals(Capsule, a, b);
  }
}

/**
 * @generated from message platform.v1.Environment
 */
export class Environment extends Message<Environment> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string namespaceTemplate = 4;
   */
  namespaceTemplate = "";

  /**
   * @generated from field: string operatorVersion = 5;
   */
  operatorVersion = "";

  /**
   * @generated from field: string cluster = 6;
   */
  cluster = "";

  /**
   * @generated from field: platform.v1.ProjEnvCapsuleBase spec = 7;
   */
  spec?: ProjEnvCapsuleBase;

  /**
   * @generated from field: bool ephemeral = 8;
   */
  ephemeral = false;

  /**
   * @generated from field: repeated string activeProjects = 9;
   */
  activeProjects: string[] = [];

  /**
   * @generated from field: bool global = 10;
   */
  global = false;

  constructor(data?: PartialMessage<Environment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.Environment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "namespaceTemplate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "operatorVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "spec", kind: "message", T: ProjEnvCapsuleBase },
    { no: 8, name: "ephemeral", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "activeProjects", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "global", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Environment {
    return new Environment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJsonString(jsonString, options);
  }

  static equals(a: Environment | PlainMessage<Environment> | undefined, b: Environment | PlainMessage<Environment> | undefined): boolean {
    return proto3.util.equals(Environment, a, b);
  }
}

/**
 * @generated from message platform.v1.ProjEnvCapsuleBase
 */
export class ProjEnvCapsuleBase extends Message<ProjEnvCapsuleBase> {
  /**
   * @generated from field: repeated platform.v1.File files = 1;
   */
  files: File[] = [];

  /**
   * @generated from field: platform.v1.EnvironmentVariables env = 2;
   */
  env?: EnvironmentVariables;

  constructor(data?: PartialMessage<ProjEnvCapsuleBase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.ProjEnvCapsuleBase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: File, repeated: true },
    { no: 2, name: "env", kind: "message", T: EnvironmentVariables },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjEnvCapsuleBase {
    return new ProjEnvCapsuleBase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjEnvCapsuleBase {
    return new ProjEnvCapsuleBase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjEnvCapsuleBase {
    return new ProjEnvCapsuleBase().fromJsonString(jsonString, options);
  }

  static equals(a: ProjEnvCapsuleBase | PlainMessage<ProjEnvCapsuleBase> | undefined, b: ProjEnvCapsuleBase | PlainMessage<ProjEnvCapsuleBase> | undefined): boolean {
    return proto3.util.equals(ProjEnvCapsuleBase, a, b);
  }
}

/**
 * @generated from message platform.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: platform.v1.ProjEnvCapsuleBase spec = 4;
   */
  spec?: ProjEnvCapsuleBase;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "spec", kind: "message", T: ProjEnvCapsuleBase },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message platform.v1.HostCapsule
 */
export class HostCapsule extends Message<HostCapsule> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string project = 4;
   */
  project = "";

  /**
   * @generated from field: string environment = 5;
   */
  environment = "";

  /**
   * @generated from field: platform.v1.HostNetwork network = 6;
   */
  network?: HostNetwork;

  constructor(data?: PartialMessage<HostCapsule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.HostCapsule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "network", kind: "message", T: HostNetwork },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HostCapsule {
    return new HostCapsule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HostCapsule {
    return new HostCapsule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HostCapsule {
    return new HostCapsule().fromJsonString(jsonString, options);
  }

  static equals(a: HostCapsule | PlainMessage<HostCapsule> | undefined, b: HostCapsule | PlainMessage<HostCapsule> | undefined): boolean {
    return proto3.util.equals(HostCapsule, a, b);
  }
}

/**
 * @generated from message platform.v1.HostNetwork
 */
export class HostNetwork extends Message<HostNetwork> {
  /**
   * @generated from field: repeated platform.v1.ProxyInterface hostInterfaces = 1;
   */
  hostInterfaces: ProxyInterface[] = [];

  /**
   * @generated from field: repeated platform.v1.ProxyInterface capsuleInterfaces = 2;
   */
  capsuleInterfaces: ProxyInterface[] = [];

  /**
   * @generated from field: uint32 tunnelPort = 3;
   */
  tunnelPort = 0;

  constructor(data?: PartialMessage<HostNetwork>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.HostNetwork";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostInterfaces", kind: "message", T: ProxyInterface, repeated: true },
    { no: 2, name: "capsuleInterfaces", kind: "message", T: ProxyInterface, repeated: true },
    { no: 3, name: "tunnelPort", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HostNetwork {
    return new HostNetwork().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HostNetwork {
    return new HostNetwork().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HostNetwork {
    return new HostNetwork().fromJsonString(jsonString, options);
  }

  static equals(a: HostNetwork | PlainMessage<HostNetwork> | undefined, b: HostNetwork | PlainMessage<HostNetwork> | undefined): boolean {
    return proto3.util.equals(HostNetwork, a, b);
  }
}

/**
 * @generated from message platform.v1.ProxyInterface
 */
export class ProxyInterface extends Message<ProxyInterface> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * @generated from field: platform.v1.InterfaceOptions options = 3;
   */
  options?: InterfaceOptions;

  constructor(data?: PartialMessage<ProxyInterface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.ProxyInterface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: InterfaceOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProxyInterface {
    return new ProxyInterface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProxyInterface {
    return new ProxyInterface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProxyInterface {
    return new ProxyInterface().fromJsonString(jsonString, options);
  }

  static equals(a: ProxyInterface | PlainMessage<ProxyInterface> | undefined, b: ProxyInterface | PlainMessage<ProxyInterface> | undefined): boolean {
    return proto3.util.equals(ProxyInterface, a, b);
  }
}

/**
 * @generated from message platform.v1.InterfaceOptions
 */
export class InterfaceOptions extends Message<InterfaceOptions> {
  /**
   * @generated from field: bool tcp = 1;
   */
  tcp = false;

  /**
   * @generated from field: string allowOrigin = 2;
   */
  allowOrigin = "";

  /**
   * @generated from field: bool changeOrigin = 3;
   */
  changeOrigin = false;

  /**
   * @generated from field: map<string, string> headers = 4;
   */
  headers: { [key: string]: string } = {};

  constructor(data?: PartialMessage<InterfaceOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.InterfaceOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tcp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "allowOrigin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "changeOrigin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceOptions {
    return new InterfaceOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceOptions {
    return new InterfaceOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceOptions {
    return new InterfaceOptions().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceOptions | PlainMessage<InterfaceOptions> | undefined, b: InterfaceOptions | PlainMessage<InterfaceOptions> | undefined): boolean {
    return proto3.util.equals(InterfaceOptions, a, b);
  }
}

