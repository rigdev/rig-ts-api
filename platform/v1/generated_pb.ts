// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file platform/v1/generated.proto (package platform.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CapsuleInterface, CapsuleScale, CronJob } from "../../v1alpha2/generated_pb.js";

/**
 * @generated from message platform.v1.CapsuleStar
 */
export class CapsuleStar extends Message<CapsuleStar> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string project = 4;
   */
  project = "";

  /**
   * @generated from field: platform.v1.CapsuleSpecExtension capsuleBase = 5;
   */
  capsuleBase?: CapsuleSpecExtension;

  /**
   * @generated from field: map<string, platform.v1.CapsuleSpecExtension> environments = 6;
   */
  environments: { [key: string]: CapsuleSpecExtension } = {};

  constructor(data?: PartialMessage<CapsuleStar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CapsuleStar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "capsuleBase", kind: "message", T: CapsuleSpecExtension },
    { no: 6, name: "environments", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CapsuleSpecExtension} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleStar {
    return new CapsuleStar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleStar {
    return new CapsuleStar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleStar {
    return new CapsuleStar().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleStar | PlainMessage<CapsuleStar> | undefined, b: CapsuleStar | PlainMessage<CapsuleStar> | undefined): boolean {
    return proto3.util.equals(CapsuleStar, a, b);
  }
}

/**
 * @generated from message platform.v1.CapsuleSpecExtension
 */
export class CapsuleSpecExtension extends Message<CapsuleSpecExtension> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string image = 3;
   */
  image = "";

  /**
   * @generated from field: string command = 4;
   */
  command = "";

  /**
   * @generated from field: repeated string args = 5;
   */
  args: string[] = [];

  /**
   * @generated from field: repeated v1alpha2.CapsuleInterface interfaces = 6;
   */
  interfaces: CapsuleInterface[] = [];

  /**
   * @generated from field: repeated platform.v1.ConfigFile configFiles = 7;
   */
  configFiles: ConfigFile[] = [];

  /**
   * @generated from field: v1alpha2.CapsuleScale scale = 8;
   */
  scale?: CapsuleScale;

  /**
   * @generated from field: map<string, string> nodeSelector = 9;
   */
  nodeSelector: { [key: string]: string } = {};

  /**
   * @generated from field: repeated v1alpha2.CronJob cronJobs = 10;
   */
  cronJobs: CronJob[] = [];

  /**
   * @generated from field: map<string, string> annotations = 11;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CapsuleSpecExtension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.CapsuleSpecExtension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "interfaces", kind: "message", T: CapsuleInterface, repeated: true },
    { no: 7, name: "configFiles", kind: "message", T: ConfigFile, repeated: true },
    { no: 8, name: "scale", kind: "message", T: CapsuleScale },
    { no: 9, name: "nodeSelector", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "cronJobs", kind: "message", T: CronJob, repeated: true },
    { no: 11, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleSpecExtension {
    return new CapsuleSpecExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleSpecExtension {
    return new CapsuleSpecExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleSpecExtension {
    return new CapsuleSpecExtension().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleSpecExtension | PlainMessage<CapsuleSpecExtension> | undefined, b: CapsuleSpecExtension | PlainMessage<CapsuleSpecExtension> | undefined): boolean {
    return proto3.util.equals(CapsuleSpecExtension, a, b);
  }
}

/**
 * @generated from message platform.v1.ConfigFile
 */
export class ConfigFile extends Message<ConfigFile> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  /**
   * @generated from field: bool isSecret = 3;
   */
  isSecret = false;

  constructor(data?: PartialMessage<ConfigFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.ConfigFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "isSecret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigFile {
    return new ConfigFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigFile {
    return new ConfigFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigFile {
    return new ConfigFile().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigFile | PlainMessage<ConfigFile> | undefined, b: ConfigFile | PlainMessage<ConfigFile> | undefined): boolean {
    return proto3.util.equals(ConfigFile, a, b);
  }
}

/**
 * @generated from message platform.v1.Environment
 */
export class Environment extends Message<Environment> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string namespaceTemplate = 4;
   */
  namespaceTemplate = "";

  /**
   * @generated from field: string operatorVersion = 5;
   */
  operatorVersion = "";

  /**
   * @generated from field: string clusterID = 6;
   */
  clusterID = "";

  /**
   * @generated from field: platform.v1.ProjEnvCapsuleBase capsuleBase = 7;
   */
  capsuleBase?: ProjEnvCapsuleBase;

  constructor(data?: PartialMessage<Environment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.Environment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "namespaceTemplate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "operatorVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "clusterID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "capsuleBase", kind: "message", T: ProjEnvCapsuleBase },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Environment {
    return new Environment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJsonString(jsonString, options);
  }

  static equals(a: Environment | PlainMessage<Environment> | undefined, b: Environment | PlainMessage<Environment> | undefined): boolean {
    return proto3.util.equals(Environment, a, b);
  }
}

/**
 * @generated from message platform.v1.ProjEnvCapsuleBase
 */
export class ProjEnvCapsuleBase extends Message<ProjEnvCapsuleBase> {
  /**
   * @generated from field: repeated platform.v1.ConfigFile configFiles = 1;
   */
  configFiles: ConfigFile[] = [];

  /**
   * @generated from field: map<string, string> environmentVariables = 2;
   */
  environmentVariables: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ProjEnvCapsuleBase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.ProjEnvCapsuleBase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configFiles", kind: "message", T: ConfigFile, repeated: true },
    { no: 2, name: "environmentVariables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjEnvCapsuleBase {
    return new ProjEnvCapsuleBase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjEnvCapsuleBase {
    return new ProjEnvCapsuleBase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjEnvCapsuleBase {
    return new ProjEnvCapsuleBase().fromJsonString(jsonString, options);
  }

  static equals(a: ProjEnvCapsuleBase | PlainMessage<ProjEnvCapsuleBase> | undefined, b: ProjEnvCapsuleBase | PlainMessage<ProjEnvCapsuleBase> | undefined): boolean {
    return proto3.util.equals(ProjEnvCapsuleBase, a, b);
  }
}

/**
 * @generated from message platform.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated string environments = 4;
   */
  environments: string[] = [];

  /**
   * @generated from field: platform.v1.ProjEnvCapsuleBase capsuleBase = 5;
   */
  capsuleBase?: ProjEnvCapsuleBase;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "capsuleBase", kind: "message", T: ProjEnvCapsuleBase },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

