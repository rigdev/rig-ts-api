// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file config/v1alpha1/generated.proto (package config.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message config.v1alpha1.OperatorConfig
 */
export class OperatorConfig extends Message<OperatorConfig> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string apiVersion = 2;
   */
  apiVersion = "";

  /**
   * @generated from field: bool webhooksEnabled = 3;
   */
  webhooksEnabled = false;

  /**
   * @generated from field: bool devModeEnabled = 4;
   */
  devModeEnabled = false;

  /**
   * @generated from field: bool leaderElectionEnabled = 5;
   */
  leaderElectionEnabled = false;

  /**
   * @generated from field: config.v1alpha1.Pipeline pipeline = 7;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<OperatorConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1alpha1.OperatorConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "webhooksEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "devModeEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "leaderElectionEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperatorConfig {
    return new OperatorConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperatorConfig {
    return new OperatorConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperatorConfig {
    return new OperatorConfig().fromJsonString(jsonString, options);
  }

  static equals(a: OperatorConfig | PlainMessage<OperatorConfig> | undefined, b: OperatorConfig | PlainMessage<OperatorConfig> | undefined): boolean {
    return proto3.util.equals(OperatorConfig, a, b);
  }
}

/**
 * @generated from message config.v1alpha1.Pipeline
 */
export class Pipeline extends Message<Pipeline> {
  /**
   * @generated from field: config.v1alpha1.CapsuleStep serviceAccountStep = 1;
   */
  serviceAccountStep?: CapsuleStep;

  /**
   * @generated from field: config.v1alpha1.CapsuleStep deploymentStep = 2;
   */
  deploymentStep?: CapsuleStep;

  /**
   * @generated from field: config.v1alpha1.CapsuleStep routesStep = 3;
   */
  routesStep?: CapsuleStep;

  /**
   * @generated from field: config.v1alpha1.CapsuleStep cronJobsStep = 4;
   */
  cronJobsStep?: CapsuleStep;

  /**
   * @generated from field: config.v1alpha1.CapsuleStep vpaStep = 5;
   */
  vpaStep?: CapsuleStep;

  /**
   * @generated from field: config.v1alpha1.CapsuleStep serviceMonitorStep = 6;
   */
  serviceMonitorStep?: CapsuleStep;

  /**
   * @generated from field: repeated config.v1alpha1.Step steps = 7;
   */
  steps: Step[] = [];

  /**
   * @generated from field: repeated config.v1alpha1.CustomPlugin customPlugins = 8;
   */
  customPlugins: CustomPlugin[] = [];

  /**
   * @generated from field: map<string, config.v1alpha1.CapsuleStep> capsuleExtensions = 9;
   */
  capsuleExtensions: { [key: string]: CapsuleStep } = {};

  constructor(data?: PartialMessage<Pipeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1alpha1.Pipeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serviceAccountStep", kind: "message", T: CapsuleStep },
    { no: 2, name: "deploymentStep", kind: "message", T: CapsuleStep },
    { no: 3, name: "routesStep", kind: "message", T: CapsuleStep },
    { no: 4, name: "cronJobsStep", kind: "message", T: CapsuleStep },
    { no: 5, name: "vpaStep", kind: "message", T: CapsuleStep },
    { no: 6, name: "serviceMonitorStep", kind: "message", T: CapsuleStep },
    { no: 7, name: "steps", kind: "message", T: Step, repeated: true },
    { no: 8, name: "customPlugins", kind: "message", T: CustomPlugin, repeated: true },
    { no: 9, name: "capsuleExtensions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CapsuleStep} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline {
    return new Pipeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline | PlainMessage<Pipeline> | undefined, b: Pipeline | PlainMessage<Pipeline> | undefined): boolean {
    return proto3.util.equals(Pipeline, a, b);
  }
}

/**
 * @generated from message config.v1alpha1.CapsuleStep
 */
export class CapsuleStep extends Message<CapsuleStep> {
  /**
   * @generated from field: string plugin = 1;
   */
  plugin = "";

  /**
   * @generated from field: string config = 2;
   */
  config = "";

  constructor(data?: PartialMessage<CapsuleStep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1alpha1.CapsuleStep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleStep {
    return new CapsuleStep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleStep {
    return new CapsuleStep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleStep {
    return new CapsuleStep().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleStep | PlainMessage<CapsuleStep> | undefined, b: CapsuleStep | PlainMessage<CapsuleStep> | undefined): boolean {
    return proto3.util.equals(CapsuleStep, a, b);
  }
}

/**
 * @generated from message config.v1alpha1.Step
 */
export class Step extends Message<Step> {
  /**
   * @generated from field: string tag = 1;
   */
  tag = "";

  /**
   * @generated from field: config.v1alpha1.CapsuleMatch match = 2;
   */
  match?: CapsuleMatch;

  /**
   * @generated from field: repeated config.v1alpha1.Plugin plugins = 3;
   */
  plugins: Plugin[] = [];

  /**
   * @generated from field: repeated string namespaces = 4;
   */
  namespaces: string[] = [];

  /**
   * @generated from field: repeated string capsules = 5;
   */
  capsules: string[] = [];

  /**
   * @generated from field: bool enableForPlatform = 6;
   */
  enableForPlatform = false;

  constructor(data?: PartialMessage<Step>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1alpha1.Step";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match", kind: "message", T: CapsuleMatch },
    { no: 3, name: "plugins", kind: "message", T: Plugin, repeated: true },
    { no: 4, name: "namespaces", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "capsules", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "enableForPlatform", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Step {
    return new Step().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Step {
    return new Step().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Step {
    return new Step().fromJsonString(jsonString, options);
  }

  static equals(a: Step | PlainMessage<Step> | undefined, b: Step | PlainMessage<Step> | undefined): boolean {
    return proto3.util.equals(Step, a, b);
  }
}

/**
 * @generated from message config.v1alpha1.CapsuleMatch
 */
export class CapsuleMatch extends Message<CapsuleMatch> {
  /**
   * @generated from field: repeated string namespaces = 1;
   */
  namespaces: string[] = [];

  /**
   * @generated from field: repeated string names = 2;
   */
  names: string[] = [];

  /**
   * @generated from field: map<string, string> annotations = 3;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: bool enableForPlatform = 4;
   */
  enableForPlatform = false;

  constructor(data?: PartialMessage<CapsuleMatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1alpha1.CapsuleMatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespaces", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "enableForPlatform", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleMatch {
    return new CapsuleMatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleMatch {
    return new CapsuleMatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleMatch {
    return new CapsuleMatch().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleMatch | PlainMessage<CapsuleMatch> | undefined, b: CapsuleMatch | PlainMessage<CapsuleMatch> | undefined): boolean {
    return proto3.util.equals(CapsuleMatch, a, b);
  }
}

/**
 * @generated from message config.v1alpha1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string tag = 1;
   */
  tag = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string plugin = 3;
   */
  plugin = "";

  /**
   * @generated from field: string config = 4;
   */
  config = "";

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1alpha1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "plugin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

/**
 * @generated from message config.v1alpha1.CustomPlugin
 */
export class CustomPlugin extends Message<CustomPlugin> {
  /**
   * @generated from field: string image = 1;
   */
  image = "";

  constructor(data?: PartialMessage<CustomPlugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1alpha1.CustomPlugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomPlugin {
    return new CustomPlugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomPlugin {
    return new CustomPlugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomPlugin {
    return new CustomPlugin().fromJsonString(jsonString, options);
  }

  static equals(a: CustomPlugin | PlainMessage<CustomPlugin> | undefined, b: CustomPlugin | PlainMessage<CustomPlugin> | undefined): boolean {
    return proto3.util.equals(CustomPlugin, a, b);
  }
}

