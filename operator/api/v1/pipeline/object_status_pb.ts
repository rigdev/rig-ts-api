// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file operator/api/v1/pipeline/object_status.proto (package api.v1.pipeline, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum api.v1.pipeline.ObjectType
 */
export enum ObjectType {
  /**
   * @generated from enum value: OBJECT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OBJECT_TYPE_PRIMARY = 1;
   */
  PRIMARY = 1,

  /**
   * @generated from enum value: OBJECT_TYPE_SECONDARY = 2;
   */
  SECONDARY = 2,

  /**
   * @generated from enum value: OBJECT_TYPE_POD = 3;
   */
  POD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ObjectType)
proto3.util.setEnumType(ObjectType, "api.v1.pipeline.ObjectType", [
  { no: 0, name: "OBJECT_TYPE_UNSPECIFIED" },
  { no: 1, name: "OBJECT_TYPE_PRIMARY" },
  { no: 2, name: "OBJECT_TYPE_SECONDARY" },
  { no: 3, name: "OBJECT_TYPE_POD" },
]);

/**
 * @generated from enum api.v1.pipeline.ObjectState
 */
export enum ObjectState {
  /**
   * @generated from enum value: OBJECT_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OBJECT_STATE_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * @generated from enum value: OBJECT_STATE_PENDING = 2;
   */
  PENDING = 2,

  /**
   * @generated from enum value: OBJECT_STATE_ERROR = 3;
   */
  ERROR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ObjectState)
proto3.util.setEnumType(ObjectState, "api.v1.pipeline.ObjectState", [
  { no: 0, name: "OBJECT_STATE_UNSPECIFIED" },
  { no: 1, name: "OBJECT_STATE_HEALTHY" },
  { no: 2, name: "OBJECT_STATE_PENDING" },
  { no: 3, name: "OBJECT_STATE_ERROR" },
]);

/**
 * @generated from message api.v1.pipeline.ObjectStatusChange
 */
export class ObjectStatusChange extends Message<ObjectStatusChange> {
  /**
   * @generated from field: string capsule = 1;
   */
  capsule = "";

  /**
   * @generated from oneof api.v1.pipeline.ObjectStatusChange.change
   */
  change: {
    /**
     * @generated from field: api.v1.pipeline.ObjectStatus updated = 2;
     */
    value: ObjectStatus;
    case: "updated";
  } | {
    /**
     * @generated from field: api.v1.pipeline.ObjectRef deleted = 3;
     */
    value: ObjectRef;
    case: "deleted";
  } | {
    /**
     * Checkpoint events indicates that all existing object statuses for
     * this namespace has been sent in the current "watch" session.
     *
     * @generated from field: api.v1.pipeline.ObjectStatusChange.Checkpoint checkpoint = 4;
     */
    value: ObjectStatusChange_Checkpoint;
    case: "checkpoint";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ObjectStatusChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.pipeline.ObjectStatusChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated", kind: "message", T: ObjectStatus, oneof: "change" },
    { no: 3, name: "deleted", kind: "message", T: ObjectRef, oneof: "change" },
    { no: 4, name: "checkpoint", kind: "message", T: ObjectStatusChange_Checkpoint, oneof: "change" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectStatusChange {
    return new ObjectStatusChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectStatusChange {
    return new ObjectStatusChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectStatusChange {
    return new ObjectStatusChange().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectStatusChange | PlainMessage<ObjectStatusChange> | undefined, b: ObjectStatusChange | PlainMessage<ObjectStatusChange> | undefined): boolean {
    return proto3.util.equals(ObjectStatusChange, a, b);
  }
}

/**
 * @generated from message api.v1.pipeline.ObjectStatusChange.Checkpoint
 */
export class ObjectStatusChange_Checkpoint extends Message<ObjectStatusChange_Checkpoint> {
  constructor(data?: PartialMessage<ObjectStatusChange_Checkpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.pipeline.ObjectStatusChange.Checkpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectStatusChange_Checkpoint {
    return new ObjectStatusChange_Checkpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectStatusChange_Checkpoint {
    return new ObjectStatusChange_Checkpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectStatusChange_Checkpoint {
    return new ObjectStatusChange_Checkpoint().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectStatusChange_Checkpoint | PlainMessage<ObjectStatusChange_Checkpoint> | undefined, b: ObjectStatusChange_Checkpoint | PlainMessage<ObjectStatusChange_Checkpoint> | undefined): boolean {
    return proto3.util.equals(ObjectStatusChange_Checkpoint, a, b);
  }
}

/**
 * @generated from message api.v1.pipeline.ObjectStatus
 */
export class ObjectStatus extends Message<ObjectStatus> {
  /**
   * @generated from field: api.v1.pipeline.ObjectRef object_ref = 1;
   */
  objectRef?: ObjectRef;

  /**
   * @generated from field: api.v1.pipeline.ObjectType type = 2;
   */
  type = ObjectType.UNSPECIFIED;

  /**
   * @generated from field: repeated api.v1.pipeline.ObjectCondition conditions = 3;
   */
  conditions: ObjectCondition[] = [];

  /**
   * @generated from field: map<string, string> properties = 4;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ObjectStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.pipeline.ObjectStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_ref", kind: "message", T: ObjectRef },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ObjectType) },
    { no: 3, name: "conditions", kind: "message", T: ObjectCondition, repeated: true },
    { no: 4, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectStatus {
    return new ObjectStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectStatus {
    return new ObjectStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectStatus {
    return new ObjectStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectStatus | PlainMessage<ObjectStatus> | undefined, b: ObjectStatus | PlainMessage<ObjectStatus> | undefined): boolean {
    return proto3.util.equals(ObjectStatus, a, b);
  }
}

/**
 * @generated from message api.v1.pipeline.ObjectCondition
 */
export class ObjectCondition extends Message<ObjectCondition> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: api.v1.pipeline.ObjectState state = 3;
   */
  state = ObjectState.UNSPECIFIED;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<ObjectCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.pipeline.ObjectCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_at", kind: "message", T: Timestamp },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(ObjectState) },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectCondition {
    return new ObjectCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectCondition {
    return new ObjectCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectCondition {
    return new ObjectCondition().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectCondition | PlainMessage<ObjectCondition> | undefined, b: ObjectCondition | PlainMessage<ObjectCondition> | undefined): boolean {
    return proto3.util.equals(ObjectCondition, a, b);
  }
}

/**
 * @generated from message api.v1.pipeline.GVK
 */
export class GVK extends Message<GVK> {
  /**
   * @generated from field: string group = 1;
   */
  group = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string kind = 3;
   */
  kind = "";

  constructor(data?: PartialMessage<GVK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.pipeline.GVK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GVK {
    return new GVK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GVK {
    return new GVK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GVK {
    return new GVK().fromJsonString(jsonString, options);
  }

  static equals(a: GVK | PlainMessage<GVK> | undefined, b: GVK | PlainMessage<GVK> | undefined): boolean {
    return proto3.util.equals(GVK, a, b);
  }
}

/**
 * @generated from message api.v1.pipeline.ObjectRef
 */
export class ObjectRef extends Message<ObjectRef> {
  /**
   * @generated from field: api.v1.pipeline.GVK gvk = 1;
   */
  gvk?: GVK;

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<ObjectRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.pipeline.ObjectRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gvk", kind: "message", T: GVK },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectRef {
    return new ObjectRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectRef {
    return new ObjectRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectRef {
    return new ObjectRef().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectRef | PlainMessage<ObjectRef> | undefined, b: ObjectRef | PlainMessage<ObjectRef> | undefined): boolean {
    return proto3.util.equals(ObjectRef, a, b);
  }
}

