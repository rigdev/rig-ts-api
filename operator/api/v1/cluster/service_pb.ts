// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file operator/api/v1/cluster/service.proto (package api.v1.operator.cluster, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Resources } from "../../../../model/metrics_pb.js";

/**
 * @generated from message api.v1.operator.cluster.GetNodesRequest
 */
export class GetNodesRequest extends Message<GetNodesRequest> {
  constructor(data?: PartialMessage<GetNodesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.operator.cluster.GetNodesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodesRequest {
    return new GetNodesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodesRequest {
    return new GetNodesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodesRequest {
    return new GetNodesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodesRequest | PlainMessage<GetNodesRequest> | undefined, b: GetNodesRequest | PlainMessage<GetNodesRequest> | undefined): boolean {
    return proto3.util.equals(GetNodesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.operator.cluster.GetNodesResponse
 */
export class GetNodesResponse extends Message<GetNodesResponse> {
  /**
   * @generated from field: repeated api.v1.operator.cluster.Node nodes = 1;
   */
  nodes: Node[] = [];

  constructor(data?: PartialMessage<GetNodesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.operator.cluster.GetNodesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: Node, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodesResponse {
    return new GetNodesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodesResponse {
    return new GetNodesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodesResponse {
    return new GetNodesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodesResponse | PlainMessage<GetNodesResponse> | undefined, b: GetNodesResponse | PlainMessage<GetNodesResponse> | undefined): boolean {
    return proto3.util.equals(GetNodesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.operator.cluster.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: string node_name = 1;
   */
  nodeName = "";

  /**
   * @generated from field: model.Resources allocateable = 2;
   */
  allocateable?: Resources;

  /**
   * @generated from field: model.Resources usage = 3;
   */
  usage?: Resources;

  /**
   * @generated from field: uint64 max_pods = 4;
   */
  maxPods = protoInt64.zero;

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.operator.cluster.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "allocateable", kind: "message", T: Resources },
    { no: 3, name: "usage", kind: "message", T: Resources },
    { no: 4, name: "max_pods", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message api.v1.operator.cluster.GetNodePodsRequest
 */
export class GetNodePodsRequest extends Message<GetNodePodsRequest> {
  /**
   * @generated from field: string node_name = 1;
   */
  nodeName = "";

  constructor(data?: PartialMessage<GetNodePodsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.operator.cluster.GetNodePodsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodePodsRequest {
    return new GetNodePodsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodePodsRequest {
    return new GetNodePodsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodePodsRequest {
    return new GetNodePodsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodePodsRequest | PlainMessage<GetNodePodsRequest> | undefined, b: GetNodePodsRequest | PlainMessage<GetNodePodsRequest> | undefined): boolean {
    return proto3.util.equals(GetNodePodsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.operator.cluster.GetNodePodsResponse
 */
export class GetNodePodsResponse extends Message<GetNodePodsResponse> {
  /**
   * @generated from field: repeated api.v1.operator.cluster.Pod pods = 1;
   */
  pods: Pod[] = [];

  constructor(data?: PartialMessage<GetNodePodsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.operator.cluster.GetNodePodsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pods", kind: "message", T: Pod, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodePodsResponse {
    return new GetNodePodsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodePodsResponse {
    return new GetNodePodsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodePodsResponse {
    return new GetNodePodsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNodePodsResponse | PlainMessage<GetNodePodsResponse> | undefined, b: GetNodePodsResponse | PlainMessage<GetNodePodsResponse> | undefined): boolean {
    return proto3.util.equals(GetNodePodsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.operator.cluster.Pod
 */
export class Pod extends Message<Pod> {
  /**
   * @generated from field: string pod_name = 1;
   */
  podName = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: model.Resources requested = 3;
   */
  requested?: Resources;

  /**
   * @generated from field: string capsule_name = 4;
   */
  capsuleName = "";

  constructor(data?: PartialMessage<Pod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.operator.cluster.Pod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pod_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "requested", kind: "message", T: Resources },
    { no: 4, name: "capsule_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pod {
    return new Pod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pod {
    return new Pod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pod {
    return new Pod().fromJsonString(jsonString, options);
  }

  static equals(a: Pod | PlainMessage<Pod> | undefined, b: Pod | PlainMessage<Pod> | undefined): boolean {
    return proto3.util.equals(Pod, a, b);
  }
}

