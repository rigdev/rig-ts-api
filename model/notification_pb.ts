// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/notification.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { EnvironmentFilter } from "./environment_pb.js";

/**
 * @generated from enum model.NotificationTopic
 */
export enum NotificationTopic {
  /**
   * @generated from enum value: NOTIFICATION_TOPIC_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: NOTIFICATION_TOPIC_ROLLOUT = 1;
   */
  ROLLOUT = 1,

  /**
   * @generated from enum value: NOTIFICATION_TOPIC_ISSUE = 2;
   */
  ISSUE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NotificationTopic)
proto3.util.setEnumType(NotificationTopic, "model.NotificationTopic", [
  { no: 0, name: "NOTIFICATION_TOPIC_UNSPECIFIED" },
  { no: 1, name: "NOTIFICATION_TOPIC_ROLLOUT" },
  { no: 2, name: "NOTIFICATION_TOPIC_ISSUE" },
]);

/**
 * @generated from message model.NotificationNotifier
 */
export class NotificationNotifier extends Message<NotificationNotifier> {
  /**
   * @generated from field: model.NotificationTarget target = 1;
   */
  target?: NotificationTarget;

  /**
   * @generated from field: repeated model.NotificationTopic topics = 2;
   */
  topics: NotificationTopic[] = [];

  /**
   * @generated from field: model.EnvironmentFilter environments = 3;
   */
  environments?: EnvironmentFilter;

  constructor(data?: PartialMessage<NotificationNotifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.NotificationNotifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: NotificationTarget },
    { no: 2, name: "topics", kind: "enum", T: proto3.getEnumType(NotificationTopic), repeated: true },
    { no: 3, name: "environments", kind: "message", T: EnvironmentFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationNotifier {
    return new NotificationNotifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationNotifier {
    return new NotificationNotifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationNotifier {
    return new NotificationNotifier().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationNotifier | PlainMessage<NotificationNotifier> | undefined, b: NotificationNotifier | PlainMessage<NotificationNotifier> | undefined): boolean {
    return proto3.util.equals(NotificationNotifier, a, b);
  }
}

/**
 * @generated from message model.NotificationTarget
 */
export class NotificationTarget extends Message<NotificationTarget> {
  /**
   * @generated from oneof model.NotificationTarget.target
   */
  target: {
    /**
     * @generated from field: model.NotificationTarget.SlackTarget slack = 1;
     */
    value: NotificationTarget_SlackTarget;
    case: "slack";
  } | {
    /**
     * @generated from field: model.NotificationTarget.EmailTarget email = 2;
     */
    value: NotificationTarget_EmailTarget;
    case: "email";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<NotificationTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.NotificationTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slack", kind: "message", T: NotificationTarget_SlackTarget, oneof: "target" },
    { no: 2, name: "email", kind: "message", T: NotificationTarget_EmailTarget, oneof: "target" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationTarget {
    return new NotificationTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationTarget {
    return new NotificationTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationTarget {
    return new NotificationTarget().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationTarget | PlainMessage<NotificationTarget> | undefined, b: NotificationTarget | PlainMessage<NotificationTarget> | undefined): boolean {
    return proto3.util.equals(NotificationTarget, a, b);
  }
}

/**
 * @generated from message model.NotificationTarget.SlackTarget
 */
export class NotificationTarget_SlackTarget extends Message<NotificationTarget_SlackTarget> {
  /**
   * @generated from field: string workspace = 1;
   */
  workspace = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<NotificationTarget_SlackTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.NotificationTarget.SlackTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationTarget_SlackTarget {
    return new NotificationTarget_SlackTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationTarget_SlackTarget {
    return new NotificationTarget_SlackTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationTarget_SlackTarget {
    return new NotificationTarget_SlackTarget().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationTarget_SlackTarget | PlainMessage<NotificationTarget_SlackTarget> | undefined, b: NotificationTarget_SlackTarget | PlainMessage<NotificationTarget_SlackTarget> | undefined): boolean {
    return proto3.util.equals(NotificationTarget_SlackTarget, a, b);
  }
}

/**
 * @generated from message model.NotificationTarget.EmailTarget
 */
export class NotificationTarget_EmailTarget extends Message<NotificationTarget_EmailTarget> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string from_email = 2;
   */
  fromEmail = "";

  /**
   * @generated from field: repeated string to_emails = 3;
   */
  toEmails: string[] = [];

  constructor(data?: PartialMessage<NotificationTarget_EmailTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.NotificationTarget.EmailTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_emails", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationTarget_EmailTarget {
    return new NotificationTarget_EmailTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationTarget_EmailTarget {
    return new NotificationTarget_EmailTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationTarget_EmailTarget {
    return new NotificationTarget_EmailTarget().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationTarget_EmailTarget | PlainMessage<NotificationTarget_EmailTarget> | undefined, b: NotificationTarget_EmailTarget | PlainMessage<NotificationTarget_EmailTarget> | undefined): boolean {
    return proto3.util.equals(NotificationTarget_EmailTarget, a, b);
  }
}

