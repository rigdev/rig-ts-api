// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/git.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { EnvironmentFilter } from "./environment_pb.js";

/**
 * @generated from message model.GitStore
 */
export class GitStore extends Message<GitStore> {
  /**
   * @generated from field: bool disabled = 1;
   */
  disabled = false;

  /**
   * @generated from field: string repository = 2;
   */
  repository = "";

  /**
   * @generated from field: string branch = 3;
   */
  branch = "";

  /**
   * @generated from field: string capsule_path = 4;
   */
  capsulePath = "";

  /**
   * @generated from field: string commit_template = 5;
   */
  commitTemplate = "";

  /**
   * @generated from field: model.EnvironmentFilter environments = 6;
   */
  environments?: EnvironmentFilter;

  constructor(data?: PartialMessage<GitStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.GitStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "capsule_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "commit_template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "environments", kind: "message", T: EnvironmentFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitStore {
    return new GitStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitStore {
    return new GitStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitStore {
    return new GitStore().fromJsonString(jsonString, options);
  }

  static equals(a: GitStore | PlainMessage<GitStore> | undefined, b: GitStore | PlainMessage<GitStore> | undefined): boolean {
    return proto3.util.equals(GitStore, a, b);
  }
}

