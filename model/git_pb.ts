// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/git.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { EnvironmentFilter } from "./environment_pb.js";

/**
 * @generated from enum model.GitProvider
 */
export enum GitProvider {
  /**
   * @generated from enum value: GIT_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GIT_PROVIDER_GITHUB = 1;
   */
  GITHUB = 1,

  /**
   * @generated from enum value: GIT_PROVIDER_GITLAB = 2;
   */
  GITLAB = 2,

  /**
   * @generated from enum value: GIT_PROVIDER_BITBUCKET = 3;
   */
  BITBUCKET = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(GitProvider)
proto3.util.setEnumType(GitProvider, "model.GitProvider", [
  { no: 0, name: "GIT_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "GIT_PROVIDER_GITHUB" },
  { no: 2, name: "GIT_PROVIDER_GITLAB" },
  { no: 3, name: "GIT_PROVIDER_BITBUCKET" },
]);

/**
 * @generated from message model.GitStore
 */
export class GitStore extends Message<GitStore> {
  /**
   * @generated from field: bool disabled = 1;
   */
  disabled = false;

  /**
   * @generated from field: string repository = 2;
   */
  repository = "";

  /**
   * @generated from field: string branch = 3;
   */
  branch = "";

  /**
   * @generated from field: string capsule_path = 4;
   */
  capsulePath = "";

  /**
   * @generated from field: string commit_template = 5;
   */
  commitTemplate = "";

  /**
   * @generated from field: model.EnvironmentFilter environments = 6;
   */
  environments?: EnvironmentFilter;

  /**
   * @generated from field: string pr_title_template = 7;
   */
  prTitleTemplate = "";

  /**
   * @generated from field: string pr_body_template = 8;
   */
  prBodyTemplate = "";

  /**
   * @generated from field: bool require_pull_request = 9;
   */
  requirePullRequest = false;

  constructor(data?: PartialMessage<GitStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.GitStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "capsule_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "commit_template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "environments", kind: "message", T: EnvironmentFilter },
    { no: 7, name: "pr_title_template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "pr_body_template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "require_pull_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitStore {
    return new GitStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitStore {
    return new GitStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitStore {
    return new GitStore().fromJsonString(jsonString, options);
  }

  static equals(a: GitStore | PlainMessage<GitStore> | undefined, b: GitStore | PlainMessage<GitStore> | undefined): boolean {
    return proto3.util.equals(GitStore, a, b);
  }
}

/**
 * @generated from message model.Commit
 */
export class Commit extends Message<Commit> {
  /**
   * @generated from field: model.GitProvider provider = 1;
   */
  provider = GitProvider.UNSPECIFIED;

  /**
   * @generated from field: string repository = 2;
   */
  repository = "";

  /**
   * @generated from field: string owner = 5;
   */
  owner = "";

  /**
   * @generated from field: string commit_id = 3;
   */
  commitId = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  constructor(data?: PartialMessage<Commit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Commit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(GitProvider) },
    { no: 2, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commit {
    return new Commit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJsonString(jsonString, options);
  }

  static equals(a: Commit | PlainMessage<Commit> | undefined, b: Commit | PlainMessage<Commit> | undefined): boolean {
    return proto3.util.equals(Commit, a, b);
  }
}

/**
 * @generated from message model.GitChange
 */
export class GitChange extends Message<GitChange> {
  /**
   * @generated from field: model.Commit commit = 1;
   */
  commit?: Commit;

  /**
   * @generated from field: repeated string paths = 2;
   */
  paths: string[] = [];

  constructor(data?: PartialMessage<GitChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.GitChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit", kind: "message", T: Commit },
    { no: 2, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitChange {
    return new GitChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitChange {
    return new GitChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitChange {
    return new GitChange().fromJsonString(jsonString, options);
  }

  static equals(a: GitChange | PlainMessage<GitChange> | undefined, b: GitChange | PlainMessage<GitChange> | undefined): boolean {
    return proto3.util.equals(GitChange, a, b);
  }
}

/**
 * @generated from message model.GitStatus
 */
export class GitStatus extends Message<GitStatus> {
  /**
   * @generated from field: string last_processed_commit_id = 1;
   */
  lastProcessedCommitId = "";

  /**
   * @generated from field: google.protobuf.Timestamp last_processed_commit_time = 2;
   */
  lastProcessedCommitTime?: Timestamp;

  /**
   * @generated from field: string last_successful_commit_id = 3;
   */
  lastSuccessfulCommitId = "";

  /**
   * @generated from field: google.protobuf.Timestamp last_successful_commit_time = 4;
   */
  lastSuccessfulCommitTime?: Timestamp;

  /**
   * @generated from field: string error = 5;
   */
  error = "";

  constructor(data?: PartialMessage<GitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.GitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_processed_commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_processed_commit_time", kind: "message", T: Timestamp },
    { no: 3, name: "last_successful_commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_successful_commit_time", kind: "message", T: Timestamp },
    { no: 5, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitStatus {
    return new GitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitStatus {
    return new GitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitStatus {
    return new GitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GitStatus | PlainMessage<GitStatus> | undefined, b: GitStatus | PlainMessage<GitStatus> | undefined): boolean {
    return proto3.util.equals(GitStatus, a, b);
  }
}

/**
 * @generated from message model.RepoBranch
 */
export class RepoBranch extends Message<RepoBranch> {
  /**
   * @generated from field: string repository = 1;
   */
  repository = "";

  /**
   * @generated from field: string branch = 2;
   */
  branch = "";

  constructor(data?: PartialMessage<RepoBranch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.RepoBranch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoBranch {
    return new RepoBranch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoBranch {
    return new RepoBranch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoBranch {
    return new RepoBranch().fromJsonString(jsonString, options);
  }

  static equals(a: RepoBranch | PlainMessage<RepoBranch> | undefined, b: RepoBranch | PlainMessage<RepoBranch> | undefined): boolean {
    return proto3.util.equals(RepoBranch, a, b);
  }
}

