// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/environment.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message model.EnvironmentFilter
 */
export class EnvironmentFilter extends Message<EnvironmentFilter> {
  /**
   * @generated from oneof model.EnvironmentFilter.filter
   */
  filter: {
    /**
     * @generated from field: model.EnvironmentFilter.All all = 1;
     */
    value: EnvironmentFilter_All;
    case: "all";
  } | {
    /**
     * @generated from field: model.EnvironmentFilter.Selected selected = 2;
     */
    value: EnvironmentFilter_Selected;
    case: "selected";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<EnvironmentFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.EnvironmentFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "all", kind: "message", T: EnvironmentFilter_All, oneof: "filter" },
    { no: 2, name: "selected", kind: "message", T: EnvironmentFilter_Selected, oneof: "filter" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentFilter {
    return new EnvironmentFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentFilter {
    return new EnvironmentFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentFilter {
    return new EnvironmentFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentFilter | PlainMessage<EnvironmentFilter> | undefined, b: EnvironmentFilter | PlainMessage<EnvironmentFilter> | undefined): boolean {
    return proto3.util.equals(EnvironmentFilter, a, b);
  }
}

/**
 * @generated from message model.EnvironmentFilter.All
 */
export class EnvironmentFilter_All extends Message<EnvironmentFilter_All> {
  /**
   * @generated from field: bool include_ephemeral = 1;
   */
  includeEphemeral = false;

  constructor(data?: PartialMessage<EnvironmentFilter_All>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.EnvironmentFilter.All";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_ephemeral", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentFilter_All {
    return new EnvironmentFilter_All().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentFilter_All {
    return new EnvironmentFilter_All().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentFilter_All {
    return new EnvironmentFilter_All().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentFilter_All | PlainMessage<EnvironmentFilter_All> | undefined, b: EnvironmentFilter_All | PlainMessage<EnvironmentFilter_All> | undefined): boolean {
    return proto3.util.equals(EnvironmentFilter_All, a, b);
  }
}

/**
 * @generated from message model.EnvironmentFilter.Selected
 */
export class EnvironmentFilter_Selected extends Message<EnvironmentFilter_Selected> {
  /**
   * @generated from field: repeated string environment_ids = 1;
   */
  environmentIds: string[] = [];

  constructor(data?: PartialMessage<EnvironmentFilter_Selected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.EnvironmentFilter.Selected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentFilter_Selected {
    return new EnvironmentFilter_Selected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentFilter_Selected {
    return new EnvironmentFilter_Selected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentFilter_Selected {
    return new EnvironmentFilter_Selected().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentFilter_Selected | PlainMessage<EnvironmentFilter_Selected> | undefined, b: EnvironmentFilter_Selected | PlainMessage<EnvironmentFilter_Selected> | undefined): boolean {
    return proto3.util.equals(EnvironmentFilter_Selected, a, b);
  }
}

