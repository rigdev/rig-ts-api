// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file model/common.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Bcrypt hashing configuration.
 *
 * @generated from message model.BcryptHashingConfig
 */
export class BcryptHashingConfig extends Message<BcryptHashingConfig> {
  /**
   * The cost of the hashing algorithm.
   *
   * @generated from field: int32 cost = 1;
   */
  cost = 0;

  constructor(data?: PartialMessage<BcryptHashingConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.BcryptHashingConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cost", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BcryptHashingConfig {
    return new BcryptHashingConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BcryptHashingConfig {
    return new BcryptHashingConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BcryptHashingConfig {
    return new BcryptHashingConfig().fromJsonString(jsonString, options);
  }

  static equals(a: BcryptHashingConfig | PlainMessage<BcryptHashingConfig> | undefined, b: BcryptHashingConfig | PlainMessage<BcryptHashingConfig> | undefined): boolean {
    return proto3.util.equals(BcryptHashingConfig, a, b);
  }
}

/**
 * Bcrypt hashing instance.
 *
 * @generated from message model.BcryptHashingInstance
 */
export class BcryptHashingInstance extends Message<BcryptHashingInstance> {
  constructor(data?: PartialMessage<BcryptHashingInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.BcryptHashingInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BcryptHashingInstance {
    return new BcryptHashingInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BcryptHashingInstance {
    return new BcryptHashingInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BcryptHashingInstance {
    return new BcryptHashingInstance().fromJsonString(jsonString, options);
  }

  static equals(a: BcryptHashingInstance | PlainMessage<BcryptHashingInstance> | undefined, b: BcryptHashingInstance | PlainMessage<BcryptHashingInstance> | undefined): boolean {
    return proto3.util.equals(BcryptHashingInstance, a, b);
  }
}

/**
 * Scrypt hashing configuration.
 *
 * @generated from message model.ScryptHashingConfig
 */
export class ScryptHashingConfig extends Message<ScryptHashingConfig> {
  /**
   * The key used to sign the salt.
   *
   * @generated from field: string signer_key = 1;
   */
  signerKey = "";

  /**
   * The salt separator.
   *
   * @generated from field: string salt_separator = 2;
   */
  saltSeparator = "";

  /**
   * The number of rounds in the algorithm.
   *
   * @generated from field: int32 rounds = 3;
   */
  rounds = 0;

  /**
   * The memory cost of the algorithm.
   *
   * @generated from field: int32 mem_cost = 4;
   */
  memCost = 0;

  /**
   * The parallelization factor of the algorithm.
   *
   * @generated from field: int32 p = 5;
   */
  p = 0;

  /**
   * The length of the key.
   *
   * @generated from field: int32 key_len = 6;
   */
  keyLen = 0;

  constructor(data?: PartialMessage<ScryptHashingConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.ScryptHashingConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "salt_separator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rounds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "mem_cost", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "p", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "key_len", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScryptHashingConfig {
    return new ScryptHashingConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScryptHashingConfig {
    return new ScryptHashingConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScryptHashingConfig {
    return new ScryptHashingConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ScryptHashingConfig | PlainMessage<ScryptHashingConfig> | undefined, b: ScryptHashingConfig | PlainMessage<ScryptHashingConfig> | undefined): boolean {
    return proto3.util.equals(ScryptHashingConfig, a, b);
  }
}

/**
 * Scrypt hashing instance.
 *
 * @generated from message model.ScryptHashingInstance
 */
export class ScryptHashingInstance extends Message<ScryptHashingInstance> {
  /**
   * The salt used to hash the password.
   *
   * @generated from field: bytes salt = 1;
   */
  salt = new Uint8Array(0);

  constructor(data?: PartialMessage<ScryptHashingInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.ScryptHashingInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScryptHashingInstance {
    return new ScryptHashingInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScryptHashingInstance {
    return new ScryptHashingInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScryptHashingInstance {
    return new ScryptHashingInstance().fromJsonString(jsonString, options);
  }

  static equals(a: ScryptHashingInstance | PlainMessage<ScryptHashingInstance> | undefined, b: ScryptHashingInstance | PlainMessage<ScryptHashingInstance> | undefined): boolean {
    return proto3.util.equals(ScryptHashingInstance, a, b);
  }
}

/**
 * Hashing configuration.
 *
 * @generated from message model.HashingConfig
 */
export class HashingConfig extends Message<HashingConfig> {
  /**
   * @generated from oneof model.HashingConfig.method
   */
  method: {
    /**
     * if bcrypt is set, use bcrypt.
     *
     * @generated from field: model.BcryptHashingConfig bcrypt = 1;
     */
    value: BcryptHashingConfig;
    case: "bcrypt";
  } | {
    /**
     * if scrypt is set, use scrypt.
     *
     * @generated from field: model.ScryptHashingConfig scrypt = 2;
     */
    value: ScryptHashingConfig;
    case: "scrypt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<HashingConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.HashingConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bcrypt", kind: "message", T: BcryptHashingConfig, oneof: "method" },
    { no: 2, name: "scrypt", kind: "message", T: ScryptHashingConfig, oneof: "method" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HashingConfig {
    return new HashingConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HashingConfig {
    return new HashingConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HashingConfig {
    return new HashingConfig().fromJsonString(jsonString, options);
  }

  static equals(a: HashingConfig | PlainMessage<HashingConfig> | undefined, b: HashingConfig | PlainMessage<HashingConfig> | undefined): boolean {
    return proto3.util.equals(HashingConfig, a, b);
  }
}

/**
 * Hashing instance.
 *
 * @generated from message model.HashingInstance
 */
export class HashingInstance extends Message<HashingInstance> {
  /**
   * The hashing configuration.
   *
   * @generated from field: model.HashingConfig config = 1;
   */
  config?: HashingConfig;

  /**
   * A hash
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from oneof model.HashingInstance.instance
   */
  instance: {
    /**
     * if bcrypt is set, this bcrypt instance was used.
     *
     * @generated from field: model.BcryptHashingInstance bcrypt = 3;
     */
    value: BcryptHashingInstance;
    case: "bcrypt";
  } | {
    /**
     * if scrypt is set, this scrypt instance was used.
     *
     * @generated from field: model.ScryptHashingInstance scrypt = 4;
     */
    value: ScryptHashingInstance;
    case: "scrypt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<HashingInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.HashingInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: HashingConfig },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "bcrypt", kind: "message", T: BcryptHashingInstance, oneof: "instance" },
    { no: 4, name: "scrypt", kind: "message", T: ScryptHashingInstance, oneof: "instance" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HashingInstance {
    return new HashingInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HashingInstance {
    return new HashingInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HashingInstance {
    return new HashingInstance().fromJsonString(jsonString, options);
  }

  static equals(a: HashingInstance | PlainMessage<HashingInstance> | undefined, b: HashingInstance | PlainMessage<HashingInstance> | undefined): boolean {
    return proto3.util.equals(HashingInstance, a, b);
  }
}

/**
 * Pagination option.
 *
 * @generated from message model.Pagination
 */
export class Pagination extends Message<Pagination> {
  /**
   * Where to start the pagination.
   *
   * @generated from field: uint32 offset = 1;
   */
  offset = 0;

  /**
   * How many items to return.
   *
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * Whether to sort in descending order.
   *
   * @generated from field: bool descending = 3;
   */
  descending = false;

  constructor(data?: PartialMessage<Pagination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Pagination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "descending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pagination {
    return new Pagination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pagination {
    return new Pagination().fromJsonString(jsonString, options);
  }

  static equals(a: Pagination | PlainMessage<Pagination> | undefined, b: Pagination | PlainMessage<Pagination> | undefined): boolean {
    return proto3.util.equals(Pagination, a, b);
  }
}

