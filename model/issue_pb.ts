// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/issue.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum model.Level
 */
export enum Level {
  /**
   * @generated from enum value: LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEVEL_INFORMATIVE = 1;
   */
  INFORMATIVE = 1,

  /**
   * @generated from enum value: LEVEL_MINOR = 2;
   */
  MINOR = 2,

  /**
   * @generated from enum value: LEVEL_MAJOR = 3;
   */
  MAJOR = 3,

  /**
   * @generated from enum value: LEVEL_CRITICAL = 4;
   */
  CRITICAL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Level)
proto3.util.setEnumType(Level, "model.Level", [
  { no: 0, name: "LEVEL_UNSPECIFIED" },
  { no: 1, name: "LEVEL_INFORMATIVE" },
  { no: 2, name: "LEVEL_MINOR" },
  { no: 3, name: "LEVEL_MAJOR" },
  { no: 4, name: "LEVEL_CRITICAL" },
]);

/**
 * @generated from message model.Issue
 */
export class Issue extends Message<Issue> {
  /**
   * @generated from field: string issue_id = 1;
   */
  issueId = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp stale_at = 5;
   */
  staleAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp closed_at = 11;
   */
  closedAt?: Timestamp;

  /**
   * @generated from field: model.Reference reference = 6;
   */
  reference?: Reference;

  /**
   * @generated from field: string message = 7;
   */
  message = "";

  /**
   * @generated from field: model.Level level = 8;
   */
  level = Level.UNSPECIFIED;

  /**
   * @generated from field: uint32 count = 9;
   */
  count = 0;

  constructor(data?: PartialMessage<Issue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Issue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issue_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "stale_at", kind: "message", T: Timestamp },
    { no: 11, name: "closed_at", kind: "message", T: Timestamp },
    { no: 6, name: "reference", kind: "message", T: Reference },
    { no: 7, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "level", kind: "enum", T: proto3.getEnumType(Level) },
    { no: 9, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Issue {
    return new Issue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Issue {
    return new Issue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Issue {
    return new Issue().fromJsonString(jsonString, options);
  }

  static equals(a: Issue | PlainMessage<Issue> | undefined, b: Issue | PlainMessage<Issue> | undefined): boolean {
    return proto3.util.equals(Issue, a, b);
  }
}

/**
 * @generated from message model.Reference
 */
export class Reference extends Message<Reference> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string capsule_id = 2;
   */
  capsuleId = "";

  /**
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * @generated from field: uint64 rollout_id = 4;
   */
  rolloutId = protoInt64.zero;

  /**
   * @generated from field: string instance_id = 5;
   */
  instanceId = "";

  constructor(data?: PartialMessage<Reference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Reference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reference {
    return new Reference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJsonString(jsonString, options);
  }

  static equals(a: Reference | PlainMessage<Reference> | undefined, b: Reference | PlainMessage<Reference> | undefined): boolean {
    return proto3.util.equals(Reference, a, b);
  }
}

