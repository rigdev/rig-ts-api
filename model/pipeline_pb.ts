// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/pipeline.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message model.Pipeline
 */
export class Pipeline extends Message<Pipeline> {
  /**
   * Custom name for the pipeline.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string initial_environment = 2;
   */
  initialEnvironment = "";

  /**
   * @generated from field: repeated model.Phase phases = 3;
   */
  phases: Phase[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Pipeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Pipeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initial_environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phases", kind: "message", T: Phase, repeated: true },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline {
    return new Pipeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline | PlainMessage<Pipeline> | undefined, b: Pipeline | PlainMessage<Pipeline> | undefined): boolean {
    return proto3.util.equals(Pipeline, a, b);
  }
}

/**
 * @generated from message model.Phase
 */
export class Phase extends Message<Phase> {
  /**
   * Environment to promote to. The project must be active in this environment.
   *
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  /**
   * Fixed fields, that are not changed upon promotion.
   *
   * @generated from field: repeated string fixed_fields = 2;
   */
  fixedFields: string[] = [];

  /**
   * Promotion triggers.
   *
   * @generated from field: repeated model.PromotionTrigger triggers = 3;
   */
  triggers: PromotionTrigger[] = [];

  constructor(data?: PartialMessage<Phase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Phase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fixed_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "triggers", kind: "message", T: PromotionTrigger, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Phase {
    return new Phase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Phase {
    return new Phase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Phase {
    return new Phase().fromJsonString(jsonString, options);
  }

  static equals(a: Phase | PlainMessage<Phase> | undefined, b: Phase | PlainMessage<Phase> | undefined): boolean {
    return proto3.util.equals(Phase, a, b);
  }
}

/**
 * @generated from message model.PromotionTrigger
 */
export class PromotionTrigger extends Message<PromotionTrigger> {
  /**
   * @generated from oneof model.PromotionTrigger.trigger
   */
  trigger: {
    /**
     * @generated from field: model.PromotionTrigger.Manual manual = 1;
     */
    value: PromotionTrigger_Manual;
    case: "manual";
  } | {
    /**
     * @generated from field: model.PromotionTrigger.Auto auto = 2;
     */
    value: PromotionTrigger_Auto;
    case: "auto";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PromotionTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.PromotionTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "manual", kind: "message", T: PromotionTrigger_Manual, oneof: "trigger" },
    { no: 2, name: "auto", kind: "message", T: PromotionTrigger_Auto, oneof: "trigger" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionTrigger {
    return new PromotionTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionTrigger {
    return new PromotionTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionTrigger {
    return new PromotionTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionTrigger | PlainMessage<PromotionTrigger> | undefined, b: PromotionTrigger | PlainMessage<PromotionTrigger> | undefined): boolean {
    return proto3.util.equals(PromotionTrigger, a, b);
  }
}

/**
 * @generated from message model.PromotionTrigger.Manual
 */
export class PromotionTrigger_Manual extends Message<PromotionTrigger_Manual> {
  constructor(data?: PartialMessage<PromotionTrigger_Manual>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.PromotionTrigger.Manual";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionTrigger_Manual {
    return new PromotionTrigger_Manual().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionTrigger_Manual {
    return new PromotionTrigger_Manual().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionTrigger_Manual {
    return new PromotionTrigger_Manual().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionTrigger_Manual | PlainMessage<PromotionTrigger_Manual> | undefined, b: PromotionTrigger_Manual | PlainMessage<PromotionTrigger_Manual> | undefined): boolean {
    return proto3.util.equals(PromotionTrigger_Manual, a, b);
  }
}

/**
 * @generated from message model.PromotionTrigger.Auto
 */
export class PromotionTrigger_Auto extends Message<PromotionTrigger_Auto> {
  /**
   * @generated from oneof model.PromotionTrigger.Auto.trigger
   */
  trigger: {
    /**
     * @generated from field: google.protobuf.Duration time_alive = 1;
     */
    value: Duration;
    case: "timeAlive";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PromotionTrigger_Auto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.PromotionTrigger.Auto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_alive", kind: "message", T: Duration, oneof: "trigger" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionTrigger_Auto {
    return new PromotionTrigger_Auto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionTrigger_Auto {
    return new PromotionTrigger_Auto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionTrigger_Auto {
    return new PromotionTrigger_Auto().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionTrigger_Auto | PlainMessage<PromotionTrigger_Auto> | undefined, b: PromotionTrigger_Auto | PlainMessage<PromotionTrigger_Auto> | undefined): boolean {
    return proto3.util.equals(PromotionTrigger_Auto, a, b);
  }
}

