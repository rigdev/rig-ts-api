// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/pipeline.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message model.Pipeline
 */
export class Pipeline extends Message<Pipeline> {
  /**
   * Custom name for the pipeline.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string initial_environment = 2;
   */
  initialEnvironment = "";

  /**
   * @generated from field: repeated model.Phase phases = 3;
   */
  phases: Phase[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Pipeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Pipeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initial_environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phases", kind: "message", T: Phase, repeated: true },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline {
    return new Pipeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline | PlainMessage<Pipeline> | undefined, b: Pipeline | PlainMessage<Pipeline> | undefined): boolean {
    return proto3.util.equals(Pipeline, a, b);
  }
}

/**
 * @generated from message model.Phase
 */
export class Phase extends Message<Phase> {
  /**
   * Environment to promote to. The project must be active in this environment.
   *
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  /**
   * Fields prefixes to either promote or not.
   *
   * @generated from field: model.FieldPrefixes field_prefixes = 2;
   */
  fieldPrefixes?: FieldPrefixes;

  /**
   * Promotion triggers.
   *
   * @generated from field: model.Triggers triggers = 3;
   */
  triggers?: Triggers;

  constructor(data?: PartialMessage<Phase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Phase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field_prefixes", kind: "message", T: FieldPrefixes },
    { no: 3, name: "triggers", kind: "message", T: Triggers },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Phase {
    return new Phase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Phase {
    return new Phase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Phase {
    return new Phase().fromJsonString(jsonString, options);
  }

  static equals(a: Phase | PlainMessage<Phase> | undefined, b: Phase | PlainMessage<Phase> | undefined): boolean {
    return proto3.util.equals(Phase, a, b);
  }
}

/**
 * @generated from message model.FieldPrefixes
 */
export class FieldPrefixes extends Message<FieldPrefixes> {
  /**
   * If true, only fields with the specified prefixes will be promoted
   * If false, only fields without the specified prefixes will be promoted
   *
   * @generated from field: bool inclusion = 1;
   */
  inclusion = false;

  /**
   * @generated from field: repeated string prefixes = 2;
   */
  prefixes: string[] = [];

  constructor(data?: PartialMessage<FieldPrefixes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.FieldPrefixes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inclusion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "prefixes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldPrefixes {
    return new FieldPrefixes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldPrefixes {
    return new FieldPrefixes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldPrefixes {
    return new FieldPrefixes().fromJsonString(jsonString, options);
  }

  static equals(a: FieldPrefixes | PlainMessage<FieldPrefixes> | undefined, b: FieldPrefixes | PlainMessage<FieldPrefixes> | undefined): boolean {
    return proto3.util.equals(FieldPrefixes, a, b);
  }
}

/**
 * @generated from message model.Triggers
 */
export class Triggers extends Message<Triggers> {
  /**
   * The automatic trigger
   *
   * @generated from field: model.Trigger automatic = 1;
   */
  automatic?: Trigger;

  /**
   * The manual trigger
   *
   * @generated from field: model.Trigger manual = 2;
   */
  manual?: Trigger;

  constructor(data?: PartialMessage<Triggers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Triggers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "automatic", kind: "message", T: Trigger },
    { no: 2, name: "manual", kind: "message", T: Trigger },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Triggers {
    return new Triggers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Triggers {
    return new Triggers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Triggers {
    return new Triggers().fromJsonString(jsonString, options);
  }

  static equals(a: Triggers | PlainMessage<Triggers> | undefined, b: Triggers | PlainMessage<Triggers> | undefined): boolean {
    return proto3.util.equals(Triggers, a, b);
  }
}

/**
 * @generated from message model.Trigger
 */
export class Trigger extends Message<Trigger> {
  /**
   * The conditions that must be met for the trigger to fire.
   *
   * @generated from field: repeated model.Trigger.Condition conditions = 1;
   */
  conditions: Trigger_Condition[] = [];

  /**
   * If true, all conditions must be met for the trigger to fire. Otherwise only
   * a single condition must be met.
   *
   * @generated from field: bool require_all = 2;
   */
  requireAll = false;

  constructor(data?: PartialMessage<Trigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Trigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "message", T: Trigger_Condition, repeated: true },
    { no: 2, name: "require_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger {
    return new Trigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger {
    return new Trigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger {
    return new Trigger().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger | PlainMessage<Trigger> | undefined, b: Trigger | PlainMessage<Trigger> | undefined): boolean {
    return proto3.util.equals(Trigger, a, b);
  }
}

/**
 * Condition that must be met for the trigger to fire.
 *
 * @generated from message model.Trigger.Condition
 */
export class Trigger_Condition extends Message<Trigger_Condition> {
  /**
   * @generated from oneof model.Trigger.Condition.Condition
   */
  Condition: {
    /**
     * @generated from field: google.protobuf.Duration time_alive = 1;
     */
    value: Duration;
    case: "timeAlive";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Trigger_Condition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Trigger.Condition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_alive", kind: "message", T: Duration, oneof: "Condition" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Condition {
    return new Trigger_Condition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Condition {
    return new Trigger_Condition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Condition {
    return new Trigger_Condition().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Condition | PlainMessage<Trigger_Condition> | undefined, b: Trigger_Condition | PlainMessage<Trigger_Condition> | undefined): boolean {
    return proto3.util.equals(Trigger_Condition, a, b);
  }
}

