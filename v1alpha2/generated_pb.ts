// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file v1alpha2/generated.proto (package v1alpha2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CrossVersionObjectReference } from "../k8s.io/api/autoscaling/v2/generated_pb.js";

/**
 * @generated from message v1alpha2.CapsuleInterface
 */
export class CapsuleInterface extends Message<CapsuleInterface> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 port = 2;
   */
  port = 0;

  /**
   * @generated from field: v1alpha2.InterfaceProbe liveness = 3;
   */
  liveness?: InterfaceProbe;

  /**
   * @generated from field: v1alpha2.InterfaceProbe readiness = 4;
   */
  readiness?: InterfaceProbe;

  /**
   * @generated from field: v1alpha2.CapsulePublicInterface public = 5;
   */
  public?: CapsulePublicInterface;

  /**
   * @generated from field: repeated v1alpha2.HostRoute routes = 6;
   */
  routes: HostRoute[] = [];

  constructor(data?: PartialMessage<CapsuleInterface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CapsuleInterface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "liveness", kind: "message", T: InterfaceProbe },
    { no: 4, name: "readiness", kind: "message", T: InterfaceProbe },
    { no: 5, name: "public", kind: "message", T: CapsulePublicInterface },
    { no: 6, name: "routes", kind: "message", T: HostRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleInterface {
    return new CapsuleInterface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleInterface {
    return new CapsuleInterface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleInterface {
    return new CapsuleInterface().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleInterface | PlainMessage<CapsuleInterface> | undefined, b: CapsuleInterface | PlainMessage<CapsuleInterface> | undefined): boolean {
    return proto3.util.equals(CapsuleInterface, a, b);
  }
}

/**
 * @generated from message v1alpha2.InterfaceProbe
 */
export class InterfaceProbe extends Message<InterfaceProbe> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bool tcp = 2;
   */
  tcp = false;

  /**
   * @generated from field: v1alpha2.InterfaceGRPCProbe grpc = 3;
   */
  grpc?: InterfaceGRPCProbe;

  constructor(data?: PartialMessage<InterfaceProbe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.InterfaceProbe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tcp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "grpc", kind: "message", T: InterfaceGRPCProbe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceProbe | PlainMessage<InterfaceProbe> | undefined, b: InterfaceProbe | PlainMessage<InterfaceProbe> | undefined): boolean {
    return proto3.util.equals(InterfaceProbe, a, b);
  }
}

/**
 * @generated from message v1alpha2.InterfaceGRPCProbe
 */
export class InterfaceGRPCProbe extends Message<InterfaceGRPCProbe> {
  /**
   * @generated from field: string service = 1;
   */
  service = "";

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled = false;

  constructor(data?: PartialMessage<InterfaceGRPCProbe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.InterfaceGRPCProbe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceGRPCProbe {
    return new InterfaceGRPCProbe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceGRPCProbe {
    return new InterfaceGRPCProbe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceGRPCProbe {
    return new InterfaceGRPCProbe().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceGRPCProbe | PlainMessage<InterfaceGRPCProbe> | undefined, b: InterfaceGRPCProbe | PlainMessage<InterfaceGRPCProbe> | undefined): boolean {
    return proto3.util.equals(InterfaceGRPCProbe, a, b);
  }
}

/**
 * @generated from message v1alpha2.CapsulePublicInterface
 */
export class CapsulePublicInterface extends Message<CapsulePublicInterface> {
  /**
   * @generated from field: v1alpha2.CapsuleInterfaceIngress ingress = 1;
   */
  ingress?: CapsuleInterfaceIngress;

  /**
   * @generated from field: v1alpha2.CapsuleInterfaceLoadBalancer loadBalancer = 2;
   */
  loadBalancer?: CapsuleInterfaceLoadBalancer;

  constructor(data?: PartialMessage<CapsulePublicInterface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CapsulePublicInterface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ingress", kind: "message", T: CapsuleInterfaceIngress },
    { no: 2, name: "loadBalancer", kind: "message", T: CapsuleInterfaceLoadBalancer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsulePublicInterface {
    return new CapsulePublicInterface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsulePublicInterface {
    return new CapsulePublicInterface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsulePublicInterface {
    return new CapsulePublicInterface().fromJsonString(jsonString, options);
  }

  static equals(a: CapsulePublicInterface | PlainMessage<CapsulePublicInterface> | undefined, b: CapsulePublicInterface | PlainMessage<CapsulePublicInterface> | undefined): boolean {
    return proto3.util.equals(CapsulePublicInterface, a, b);
  }
}

/**
 * @generated from message v1alpha2.CapsuleInterfaceIngress
 */
export class CapsuleInterfaceIngress extends Message<CapsuleInterfaceIngress> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: repeated string paths = 2;
   */
  paths: string[] = [];

  constructor(data?: PartialMessage<CapsuleInterfaceIngress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CapsuleInterfaceIngress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleInterfaceIngress {
    return new CapsuleInterfaceIngress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleInterfaceIngress {
    return new CapsuleInterfaceIngress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleInterfaceIngress {
    return new CapsuleInterfaceIngress().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleInterfaceIngress | PlainMessage<CapsuleInterfaceIngress> | undefined, b: CapsuleInterfaceIngress | PlainMessage<CapsuleInterfaceIngress> | undefined): boolean {
    return proto3.util.equals(CapsuleInterfaceIngress, a, b);
  }
}

/**
 * @generated from message v1alpha2.CapsuleInterfaceLoadBalancer
 */
export class CapsuleInterfaceLoadBalancer extends Message<CapsuleInterfaceLoadBalancer> {
  /**
   * @generated from field: int32 port = 1;
   */
  port = 0;

  constructor(data?: PartialMessage<CapsuleInterfaceLoadBalancer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CapsuleInterfaceLoadBalancer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleInterfaceLoadBalancer {
    return new CapsuleInterfaceLoadBalancer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleInterfaceLoadBalancer {
    return new CapsuleInterfaceLoadBalancer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleInterfaceLoadBalancer {
    return new CapsuleInterfaceLoadBalancer().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleInterfaceLoadBalancer | PlainMessage<CapsuleInterfaceLoadBalancer> | undefined, b: CapsuleInterfaceLoadBalancer | PlainMessage<CapsuleInterfaceLoadBalancer> | undefined): boolean {
    return proto3.util.equals(CapsuleInterfaceLoadBalancer, a, b);
  }
}

/**
 * @generated from message v1alpha2.HostRoute
 */
export class HostRoute extends Message<HostRoute> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: repeated v1alpha2.HTTPPathRoute paths = 3;
   */
  paths: HTTPPathRoute[] = [];

  /**
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<HostRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.HostRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "paths", kind: "message", T: HTTPPathRoute, repeated: true },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HostRoute {
    return new HostRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HostRoute {
    return new HostRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HostRoute {
    return new HostRoute().fromJsonString(jsonString, options);
  }

  static equals(a: HostRoute | PlainMessage<HostRoute> | undefined, b: HostRoute | PlainMessage<HostRoute> | undefined): boolean {
    return proto3.util.equals(HostRoute, a, b);
  }
}

/**
 * @generated from message v1alpha2.HTTPPathRoute
 */
export class HTTPPathRoute extends Message<HTTPPathRoute> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string match = 2;
   */
  match = "";

  constructor(data?: PartialMessage<HTTPPathRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.HTTPPathRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HTTPPathRoute {
    return new HTTPPathRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HTTPPathRoute {
    return new HTTPPathRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HTTPPathRoute {
    return new HTTPPathRoute().fromJsonString(jsonString, options);
  }

  static equals(a: HTTPPathRoute | PlainMessage<HTTPPathRoute> | undefined, b: HTTPPathRoute | PlainMessage<HTTPPathRoute> | undefined): boolean {
    return proto3.util.equals(HTTPPathRoute, a, b);
  }
}

/**
 * @generated from message v1alpha2.CapsuleScale
 */
export class CapsuleScale extends Message<CapsuleScale> {
  /**
   * @generated from field: v1alpha2.HorizontalScale horizontal = 1;
   */
  horizontal?: HorizontalScale;

  /**
   * @generated from field: v1alpha2.VerticalScale vertical = 2;
   */
  vertical?: VerticalScale;

  constructor(data?: PartialMessage<CapsuleScale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CapsuleScale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "horizontal", kind: "message", T: HorizontalScale },
    { no: 2, name: "vertical", kind: "message", T: VerticalScale },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleScale {
    return new CapsuleScale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleScale {
    return new CapsuleScale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleScale {
    return new CapsuleScale().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleScale | PlainMessage<CapsuleScale> | undefined, b: CapsuleScale | PlainMessage<CapsuleScale> | undefined): boolean {
    return proto3.util.equals(CapsuleScale, a, b);
  }
}

/**
 * @generated from message v1alpha2.HorizontalScale
 */
export class HorizontalScale extends Message<HorizontalScale> {
  /**
   * @generated from field: v1alpha2.Instances instances = 1;
   */
  instances?: Instances;

  /**
   * @generated from field: v1alpha2.CPUTarget cpuTarget = 2;
   */
  cpuTarget?: CPUTarget;

  /**
   * @generated from field: repeated v1alpha2.CustomMetric customMetrics = 3;
   */
  customMetrics: CustomMetric[] = [];

  constructor(data?: PartialMessage<HorizontalScale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.HorizontalScale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instances },
    { no: 2, name: "cpuTarget", kind: "message", T: CPUTarget },
    { no: 3, name: "customMetrics", kind: "message", T: CustomMetric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorizontalScale {
    return new HorizontalScale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorizontalScale {
    return new HorizontalScale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorizontalScale {
    return new HorizontalScale().fromJsonString(jsonString, options);
  }

  static equals(a: HorizontalScale | PlainMessage<HorizontalScale> | undefined, b: HorizontalScale | PlainMessage<HorizontalScale> | undefined): boolean {
    return proto3.util.equals(HorizontalScale, a, b);
  }
}

/**
 * @generated from message v1alpha2.Instances
 */
export class Instances extends Message<Instances> {
  /**
   * @generated from field: uint32 min = 1;
   */
  min = 0;

  /**
   * @generated from field: uint32 max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<Instances>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.Instances";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instances {
    return new Instances().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instances {
    return new Instances().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instances {
    return new Instances().fromJsonString(jsonString, options);
  }

  static equals(a: Instances | PlainMessage<Instances> | undefined, b: Instances | PlainMessage<Instances> | undefined): boolean {
    return proto3.util.equals(Instances, a, b);
  }
}

/**
 * @generated from message v1alpha2.CPUTarget
 */
export class CPUTarget extends Message<CPUTarget> {
  /**
   * @generated from field: uint32 utilization = 1;
   */
  utilization = 0;

  constructor(data?: PartialMessage<CPUTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CPUTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "utilization", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CPUTarget {
    return new CPUTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CPUTarget {
    return new CPUTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CPUTarget {
    return new CPUTarget().fromJsonString(jsonString, options);
  }

  static equals(a: CPUTarget | PlainMessage<CPUTarget> | undefined, b: CPUTarget | PlainMessage<CPUTarget> | undefined): boolean {
    return proto3.util.equals(CPUTarget, a, b);
  }
}

/**
 * @generated from message v1alpha2.CustomMetric
 */
export class CustomMetric extends Message<CustomMetric> {
  /**
   * @generated from field: v1alpha2.InstanceMetric instanceMetric = 1;
   */
  instanceMetric?: InstanceMetric;

  /**
   * @generated from field: v1alpha2.ObjectMetric objectMetric = 2;
   */
  objectMetric?: ObjectMetric;

  constructor(data?: PartialMessage<CustomMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CustomMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instanceMetric", kind: "message", T: InstanceMetric },
    { no: 2, name: "objectMetric", kind: "message", T: ObjectMetric },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomMetric {
    return new CustomMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomMetric {
    return new CustomMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomMetric {
    return new CustomMetric().fromJsonString(jsonString, options);
  }

  static equals(a: CustomMetric | PlainMessage<CustomMetric> | undefined, b: CustomMetric | PlainMessage<CustomMetric> | undefined): boolean {
    return proto3.util.equals(CustomMetric, a, b);
  }
}

/**
 * @generated from message v1alpha2.InstanceMetric
 */
export class InstanceMetric extends Message<InstanceMetric> {
  /**
   * @generated from field: string metricName = 1;
   */
  metricName = "";

  /**
   * @generated from field: map<string, string> matchLabels = 2;
   */
  matchLabels: { [key: string]: string } = {};

  /**
   * @generated from field: string averageValue = 3;
   */
  averageValue = "";

  constructor(data?: PartialMessage<InstanceMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.InstanceMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "matchLabels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "averageValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceMetric {
    return new InstanceMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceMetric {
    return new InstanceMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceMetric {
    return new InstanceMetric().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceMetric | PlainMessage<InstanceMetric> | undefined, b: InstanceMetric | PlainMessage<InstanceMetric> | undefined): boolean {
    return proto3.util.equals(InstanceMetric, a, b);
  }
}

/**
 * @generated from message v1alpha2.ObjectMetric
 */
export class ObjectMetric extends Message<ObjectMetric> {
  /**
   * @generated from field: string metricName = 1;
   */
  metricName = "";

  /**
   * @generated from field: map<string, string> matchLabels = 2;
   */
  matchLabels: { [key: string]: string } = {};

  /**
   * @generated from field: string averageValue = 3;
   */
  averageValue = "";

  /**
   * @generated from field: string value = 4;
   */
  value = "";

  /**
   * @generated from field: k8s.io.api.autoscaling.v2.CrossVersionObjectReference objectReference = 5;
   */
  objectReference?: CrossVersionObjectReference;

  constructor(data?: PartialMessage<ObjectMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.ObjectMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "matchLabels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "averageValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "objectReference", kind: "message", T: CrossVersionObjectReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectMetric {
    return new ObjectMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectMetric {
    return new ObjectMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectMetric {
    return new ObjectMetric().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectMetric | PlainMessage<ObjectMetric> | undefined, b: ObjectMetric | PlainMessage<ObjectMetric> | undefined): boolean {
    return proto3.util.equals(ObjectMetric, a, b);
  }
}

/**
 * @generated from message v1alpha2.VerticalScale
 */
export class VerticalScale extends Message<VerticalScale> {
  /**
   * @generated from field: v1alpha2.ResourceLimits cpu = 1;
   */
  cpu?: ResourceLimits;

  /**
   * @generated from field: v1alpha2.ResourceLimits memory = 2;
   */
  memory?: ResourceLimits;

  /**
   * @generated from field: v1alpha2.ResourceRequest gpu = 3;
   */
  gpu?: ResourceRequest;

  constructor(data?: PartialMessage<VerticalScale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.VerticalScale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu", kind: "message", T: ResourceLimits },
    { no: 2, name: "memory", kind: "message", T: ResourceLimits },
    { no: 3, name: "gpu", kind: "message", T: ResourceRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerticalScale {
    return new VerticalScale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerticalScale {
    return new VerticalScale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerticalScale {
    return new VerticalScale().fromJsonString(jsonString, options);
  }

  static equals(a: VerticalScale | PlainMessage<VerticalScale> | undefined, b: VerticalScale | PlainMessage<VerticalScale> | undefined): boolean {
    return proto3.util.equals(VerticalScale, a, b);
  }
}

/**
 * @generated from message v1alpha2.ResourceLimits
 */
export class ResourceLimits extends Message<ResourceLimits> {
  /**
   * @generated from field: string request = 1;
   */
  request = "";

  /**
   * @generated from field: string limit = 2;
   */
  limit = "";

  constructor(data?: PartialMessage<ResourceLimits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.ResourceLimits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceLimits {
    return new ResourceLimits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceLimits {
    return new ResourceLimits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceLimits {
    return new ResourceLimits().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceLimits | PlainMessage<ResourceLimits> | undefined, b: ResourceLimits | PlainMessage<ResourceLimits> | undefined): boolean {
    return proto3.util.equals(ResourceLimits, a, b);
  }
}

/**
 * @generated from message v1alpha2.ResourceRequest
 */
export class ResourceRequest extends Message<ResourceRequest> {
  /**
   * @generated from field: string request = 1;
   */
  request = "";

  constructor(data?: PartialMessage<ResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.ResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceRequest {
    return new ResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceRequest {
    return new ResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceRequest {
    return new ResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceRequest | PlainMessage<ResourceRequest> | undefined, b: ResourceRequest | PlainMessage<ResourceRequest> | undefined): boolean {
    return proto3.util.equals(ResourceRequest, a, b);
  }
}

/**
 * @generated from message v1alpha2.CronJob
 */
export class CronJob extends Message<CronJob> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string schedule = 2;
   */
  schedule = "";

  /**
   * @generated from field: v1alpha2.URL url = 3;
   */
  url?: URL;

  /**
   * @generated from field: v1alpha2.JobCommand command = 4;
   */
  command?: JobCommand;

  /**
   * @generated from field: uint64 maxRetries = 5;
   */
  maxRetries = protoInt64.zero;

  /**
   * @generated from field: uint64 timeoutSeconds = 6;
   */
  timeoutSeconds = protoInt64.zero;

  constructor(data?: PartialMessage<CronJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.CronJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schedule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "message", T: URL },
    { no: 4, name: "command", kind: "message", T: JobCommand },
    { no: 5, name: "maxRetries", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "timeoutSeconds", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronJob {
    return new CronJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronJob {
    return new CronJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronJob {
    return new CronJob().fromJsonString(jsonString, options);
  }

  static equals(a: CronJob | PlainMessage<CronJob> | undefined, b: CronJob | PlainMessage<CronJob> | undefined): boolean {
    return proto3.util.equals(CronJob, a, b);
  }
}

/**
 * @generated from message v1alpha2.URL
 */
export class URL extends Message<URL> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: map<string, string> queryParameters = 3;
   */
  queryParameters: { [key: string]: string } = {};

  constructor(data?: PartialMessage<URL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.URL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "queryParameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URL {
    return new URL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URL {
    return new URL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URL {
    return new URL().fromJsonString(jsonString, options);
  }

  static equals(a: URL | PlainMessage<URL> | undefined, b: URL | PlainMessage<URL> | undefined): boolean {
    return proto3.util.equals(URL, a, b);
  }
}

/**
 * @generated from message v1alpha2.JobCommand
 */
export class JobCommand extends Message<JobCommand> {
  /**
   * @generated from field: string command = 1;
   */
  command = "";

  /**
   * @generated from field: repeated string args = 2;
   */
  args: string[] = [];

  constructor(data?: PartialMessage<JobCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1alpha2.JobCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobCommand {
    return new JobCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobCommand {
    return new JobCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobCommand {
    return new JobCommand().fromJsonString(jsonString, options);
  }

  static equals(a: JobCommand | PlainMessage<JobCommand> | undefined, b: JobCommand | PlainMessage<JobCommand> | undefined): boolean {
    return proto3.util.equals(JobCommand, a, b);
  }
}

