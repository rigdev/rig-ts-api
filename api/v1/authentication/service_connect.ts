// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/authentication/service.proto (package api.v1.authentication, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeleteRequest, DeleteResponse, GetAuthConfigRequest, GetAuthConfigResponse, GetRequest, GetResponse, LoginRequest, LoginResponse, LogoutRequest, LogoutResponse, RefreshTokenRequest, RefreshTokenResponse, RegisterRequest, RegisterResponse, ResetPasswordRequest, ResetPasswordResponse, SendPasswordResetRequest, SendPasswordResetResponse, VerifyEmailRequest, VerifyEmailResponse, VerifyPhoneNumberRequest, VerifyPhoneNumberResponse } from "./service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * The service to manage public endpoints in Users
 *
 * @generated from service api.v1.authentication.Service
 */
export const Service = {
  typeName: "api.v1.authentication.Service",
  methods: {
    /**
     * Login authenticats a user and returns a access/refresh token
     *
     * @generated from rpc api.v1.authentication.Service.Login
     */
    login: {
      name: "Login",
      I: LoginRequest,
      O: LoginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Logout validates the access token and blocks it afterwards
     *
     * @generated from rpc api.v1.authentication.Service.Logout
     */
    logout: {
      name: "Logout",
      I: LogoutRequest,
      O: LogoutResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the logged in user
     *
     * @generated from rpc api.v1.authentication.Service.Get
     */
    get: {
      name: "Get",
      I: GetRequest,
      O: GetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Register creates a new user
     *
     * @generated from rpc api.v1.authentication.Service.Register
     */
    register: {
      name: "Register",
      I: RegisterRequest,
      O: RegisterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send reset password email to the user
     *
     * @generated from rpc api.v1.authentication.Service.SendPasswordReset
     */
    sendPasswordReset: {
      name: "SendPasswordReset",
      I: SendPasswordResetRequest,
      O: SendPasswordResetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reset password of the user
     *
     * @generated from rpc api.v1.authentication.Service.ResetPassword
     */
    resetPassword: {
      name: "ResetPassword",
      I: ResetPasswordRequest,
      O: ResetPasswordResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete logged in user
     *
     * @generated from rpc api.v1.authentication.Service.Delete
     */
    delete: {
      name: "Delete",
      I: DeleteRequest,
      O: DeleteResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Refresh logged in token pair
     *
     * @generated from rpc api.v1.authentication.Service.RefreshToken
     */
    refreshToken: {
      name: "RefreshToken",
      I: RefreshTokenRequest,
      O: RefreshTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get auth config for how available login methods
     *
     * @generated from rpc api.v1.authentication.Service.GetAuthConfig
     */
    getAuthConfig: {
      name: "GetAuthConfig",
      I: GetAuthConfigRequest,
      O: GetAuthConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify email
     *
     * @generated from rpc api.v1.authentication.Service.VerifyEmail
     */
    verifyEmail: {
      name: "VerifyEmail",
      I: VerifyEmailRequest,
      O: VerifyEmailResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify phone number
     *
     * @generated from rpc api.v1.authentication.Service.VerifyPhoneNumber
     */
    verifyPhoneNumber: {
      name: "VerifyPhoneNumber",
      I: VerifyPhoneNumberRequest,
      O: VerifyPhoneNumberResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

