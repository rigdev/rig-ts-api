// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file api/v1/storage/service.proto (package api.v1.storage, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Bucket, Config, Object$, Provider, ProviderEntry } from "./storage_pb.js";
import { Pagination } from "../../../model/common_pb.js";

/**
 * @generated from message api.v1.storage.UnlinkBucketRequest
 */
export class UnlinkBucketRequest extends Message<UnlinkBucketRequest> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  constructor(data?: PartialMessage<UnlinkBucketRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.UnlinkBucketRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnlinkBucketRequest {
    return new UnlinkBucketRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnlinkBucketRequest {
    return new UnlinkBucketRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnlinkBucketRequest {
    return new UnlinkBucketRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnlinkBucketRequest | PlainMessage<UnlinkBucketRequest> | undefined, b: UnlinkBucketRequest | PlainMessage<UnlinkBucketRequest> | undefined): boolean {
    return proto3.util.equals(UnlinkBucketRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.UnlinkBucketResponse
 */
export class UnlinkBucketResponse extends Message<UnlinkBucketResponse> {
  constructor(data?: PartialMessage<UnlinkBucketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.UnlinkBucketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnlinkBucketResponse {
    return new UnlinkBucketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnlinkBucketResponse {
    return new UnlinkBucketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnlinkBucketResponse {
    return new UnlinkBucketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnlinkBucketResponse | PlainMessage<UnlinkBucketResponse> | undefined, b: UnlinkBucketResponse | PlainMessage<UnlinkBucketResponse> | undefined): boolean {
    return proto3.util.equals(UnlinkBucketResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.LookupProviderRequest
 */
export class LookupProviderRequest extends Message<LookupProviderRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<LookupProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.LookupProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LookupProviderRequest {
    return new LookupProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LookupProviderRequest {
    return new LookupProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LookupProviderRequest {
    return new LookupProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LookupProviderRequest | PlainMessage<LookupProviderRequest> | undefined, b: LookupProviderRequest | PlainMessage<LookupProviderRequest> | undefined): boolean {
    return proto3.util.equals(LookupProviderRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.LookupProviderResponse
 */
export class LookupProviderResponse extends Message<LookupProviderResponse> {
  /**
   * @generated from field: string provider_id = 1;
   */
  providerId = "";

  /**
   * @generated from field: api.v1.storage.Provider provider = 2;
   */
  provider?: Provider;

  constructor(data?: PartialMessage<LookupProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.LookupProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "message", T: Provider },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LookupProviderResponse {
    return new LookupProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LookupProviderResponse {
    return new LookupProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LookupProviderResponse {
    return new LookupProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LookupProviderResponse | PlainMessage<LookupProviderResponse> | undefined, b: LookupProviderResponse | PlainMessage<LookupProviderResponse> | undefined): boolean {
    return proto3.util.equals(LookupProviderResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.CreateProviderRequest
 */
export class CreateProviderRequest extends Message<CreateProviderRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: api.v1.storage.Config config = 2;
   */
  config?: Config;

  /**
   * @generated from field: bool link_buckets = 3;
   */
  linkBuckets = false;

  constructor(data?: PartialMessage<CreateProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.CreateProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Config },
    { no: 3, name: "link_buckets", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProviderRequest {
    return new CreateProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProviderRequest {
    return new CreateProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProviderRequest {
    return new CreateProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProviderRequest | PlainMessage<CreateProviderRequest> | undefined, b: CreateProviderRequest | PlainMessage<CreateProviderRequest> | undefined): boolean {
    return proto3.util.equals(CreateProviderRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.CreateProviderResponse
 */
export class CreateProviderResponse extends Message<CreateProviderResponse> {
  /**
   * @generated from field: string provider_id = 1;
   */
  providerId = "";

  /**
   * @generated from field: api.v1.storage.Provider provider = 2;
   */
  provider?: Provider;

  constructor(data?: PartialMessage<CreateProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.CreateProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "message", T: Provider },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProviderResponse {
    return new CreateProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProviderResponse {
    return new CreateProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProviderResponse {
    return new CreateProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProviderResponse | PlainMessage<CreateProviderResponse> | undefined, b: CreateProviderResponse | PlainMessage<CreateProviderResponse> | undefined): boolean {
    return proto3.util.equals(CreateProviderResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DeleteProviderRequest
 */
export class DeleteProviderRequest extends Message<DeleteProviderRequest> {
  /**
   * @generated from field: string provider_id = 1;
   */
  providerId = "";

  constructor(data?: PartialMessage<DeleteProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DeleteProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProviderRequest {
    return new DeleteProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProviderRequest {
    return new DeleteProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProviderRequest {
    return new DeleteProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProviderRequest | PlainMessage<DeleteProviderRequest> | undefined, b: DeleteProviderRequest | PlainMessage<DeleteProviderRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProviderRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DeleteProviderResponse
 */
export class DeleteProviderResponse extends Message<DeleteProviderResponse> {
  constructor(data?: PartialMessage<DeleteProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DeleteProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProviderResponse {
    return new DeleteProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProviderResponse {
    return new DeleteProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProviderResponse {
    return new DeleteProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProviderResponse | PlainMessage<DeleteProviderResponse> | undefined, b: DeleteProviderResponse | PlainMessage<DeleteProviderResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProviderResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.GetProviderRequest
 */
export class GetProviderRequest extends Message<GetProviderRequest> {
  /**
   * @generated from field: string provider_id = 1;
   */
  providerId = "";

  constructor(data?: PartialMessage<GetProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.GetProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderRequest {
    return new GetProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderRequest {
    return new GetProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderRequest {
    return new GetProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProviderRequest | PlainMessage<GetProviderRequest> | undefined, b: GetProviderRequest | PlainMessage<GetProviderRequest> | undefined): boolean {
    return proto3.util.equals(GetProviderRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.GetProviderResponse
 */
export class GetProviderResponse extends Message<GetProviderResponse> {
  /**
   * @generated from field: api.v1.storage.Provider provider = 1;
   */
  provider?: Provider;

  constructor(data?: PartialMessage<GetProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.GetProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "message", T: Provider },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderResponse {
    return new GetProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderResponse {
    return new GetProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderResponse {
    return new GetProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProviderResponse | PlainMessage<GetProviderResponse> | undefined, b: GetProviderResponse | PlainMessage<GetProviderResponse> | undefined): boolean {
    return proto3.util.equals(GetProviderResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ListProvidersRequest
 */
export class ListProvidersRequest extends Message<ListProvidersRequest> {
  /**
   * @generated from field: model.Pagination pagination = 1;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListProvidersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ListProvidersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProvidersRequest {
    return new ListProvidersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProvidersRequest {
    return new ListProvidersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProvidersRequest {
    return new ListProvidersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProvidersRequest | PlainMessage<ListProvidersRequest> | undefined, b: ListProvidersRequest | PlainMessage<ListProvidersRequest> | undefined): boolean {
    return proto3.util.equals(ListProvidersRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ListProvidersResponse
 */
export class ListProvidersResponse extends Message<ListProvidersResponse> {
  /**
   * @generated from field: repeated api.v1.storage.ProviderEntry providers = 1;
   */
  providers: ProviderEntry[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListProvidersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ListProvidersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "providers", kind: "message", T: ProviderEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProvidersResponse {
    return new ListProvidersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProvidersResponse {
    return new ListProvidersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProvidersResponse {
    return new ListProvidersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProvidersResponse | PlainMessage<ListProvidersResponse> | undefined, b: ListProvidersResponse | PlainMessage<ListProvidersResponse> | undefined): boolean {
    return proto3.util.equals(ListProvidersResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.CreateBucketRequest
 */
export class CreateBucketRequest extends Message<CreateBucketRequest> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * @generated from field: string provider_bucket = 2;
   */
  providerBucket = "";

  /**
   * @generated from field: string region = 3;
   */
  region = "";

  /**
   * @generated from field: string provider_id = 4;
   */
  providerId = "";

  constructor(data?: PartialMessage<CreateBucketRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.CreateBucketRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBucketRequest {
    return new CreateBucketRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBucketRequest {
    return new CreateBucketRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBucketRequest {
    return new CreateBucketRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBucketRequest | PlainMessage<CreateBucketRequest> | undefined, b: CreateBucketRequest | PlainMessage<CreateBucketRequest> | undefined): boolean {
    return proto3.util.equals(CreateBucketRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.CreateBucketResponse
 */
export class CreateBucketResponse extends Message<CreateBucketResponse> {
  constructor(data?: PartialMessage<CreateBucketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.CreateBucketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBucketResponse {
    return new CreateBucketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBucketResponse {
    return new CreateBucketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBucketResponse {
    return new CreateBucketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBucketResponse | PlainMessage<CreateBucketResponse> | undefined, b: CreateBucketResponse | PlainMessage<CreateBucketResponse> | undefined): boolean {
    return proto3.util.equals(CreateBucketResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.GetBucketRequest
 */
export class GetBucketRequest extends Message<GetBucketRequest> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  constructor(data?: PartialMessage<GetBucketRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.GetBucketRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBucketRequest {
    return new GetBucketRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBucketRequest {
    return new GetBucketRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBucketRequest {
    return new GetBucketRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBucketRequest | PlainMessage<GetBucketRequest> | undefined, b: GetBucketRequest | PlainMessage<GetBucketRequest> | undefined): boolean {
    return proto3.util.equals(GetBucketRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.GetBucketResponse
 */
export class GetBucketResponse extends Message<GetBucketResponse> {
  /**
   * @generated from field: api.v1.storage.Bucket bucket = 1;
   */
  bucket?: Bucket;

  constructor(data?: PartialMessage<GetBucketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.GetBucketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "message", T: Bucket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBucketResponse {
    return new GetBucketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBucketResponse {
    return new GetBucketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBucketResponse {
    return new GetBucketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBucketResponse | PlainMessage<GetBucketResponse> | undefined, b: GetBucketResponse | PlainMessage<GetBucketResponse> | undefined): boolean {
    return proto3.util.equals(GetBucketResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ListBucketsRequest
 */
export class ListBucketsRequest extends Message<ListBucketsRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<ListBucketsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ListBucketsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBucketsRequest {
    return new ListBucketsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBucketsRequest {
    return new ListBucketsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBucketsRequest {
    return new ListBucketsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBucketsRequest | PlainMessage<ListBucketsRequest> | undefined, b: ListBucketsRequest | PlainMessage<ListBucketsRequest> | undefined): boolean {
    return proto3.util.equals(ListBucketsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ListBucketsResponse
 */
export class ListBucketsResponse extends Message<ListBucketsResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated api.v1.storage.Bucket buckets = 2;
   */
  buckets: Bucket[] = [];

  constructor(data?: PartialMessage<ListBucketsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ListBucketsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buckets", kind: "message", T: Bucket, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBucketsResponse {
    return new ListBucketsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBucketsResponse {
    return new ListBucketsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBucketsResponse {
    return new ListBucketsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBucketsResponse | PlainMessage<ListBucketsResponse> | undefined, b: ListBucketsResponse | PlainMessage<ListBucketsResponse> | undefined): boolean {
    return proto3.util.equals(ListBucketsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DeleteBucketRequest
 */
export class DeleteBucketRequest extends Message<DeleteBucketRequest> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  constructor(data?: PartialMessage<DeleteBucketRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DeleteBucketRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBucketRequest {
    return new DeleteBucketRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBucketRequest {
    return new DeleteBucketRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBucketRequest {
    return new DeleteBucketRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBucketRequest | PlainMessage<DeleteBucketRequest> | undefined, b: DeleteBucketRequest | PlainMessage<DeleteBucketRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBucketRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DeleteBucketResponse
 */
export class DeleteBucketResponse extends Message<DeleteBucketResponse> {
  constructor(data?: PartialMessage<DeleteBucketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DeleteBucketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBucketResponse {
    return new DeleteBucketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBucketResponse {
    return new DeleteBucketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBucketResponse {
    return new DeleteBucketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBucketResponse | PlainMessage<DeleteBucketResponse> | undefined, b: DeleteBucketResponse | PlainMessage<DeleteBucketResponse> | undefined): boolean {
    return proto3.util.equals(DeleteBucketResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.GetObjectRequest
 */
export class GetObjectRequest extends Message<GetObjectRequest> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<GetObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.GetObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectRequest {
    return new GetObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectRequest | PlainMessage<GetObjectRequest> | undefined, b: GetObjectRequest | PlainMessage<GetObjectRequest> | undefined): boolean {
    return proto3.util.equals(GetObjectRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.GetObjectResponse
 */
export class GetObjectResponse extends Message<GetObjectResponse> {
  /**
   * @generated from field: api.v1.storage.Object object = 1;
   */
  object?: Object$;

  constructor(data?: PartialMessage<GetObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.GetObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetObjectResponse {
    return new GetObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetObjectResponse | PlainMessage<GetObjectResponse> | undefined, b: GetObjectResponse | PlainMessage<GetObjectResponse> | undefined): boolean {
    return proto3.util.equals(GetObjectResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ListObjectsRequest
 */
export class ListObjectsRequest extends Message<ListObjectsRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string bucket = 2;
   */
  bucket = "";

  /**
   * @generated from field: string prefix = 3;
   */
  prefix = "";

  /**
   * @generated from field: string start_path = 4;
   */
  startPath = "";

  /**
   * @generated from field: string end_path = 5;
   */
  endPath = "";

  /**
   * @generated from field: bool recursive = 6;
   */
  recursive = false;

  /**
   * @generated from field: uint32 limit = 7;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListObjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ListObjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "end_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "recursive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListObjectsRequest {
    return new ListObjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListObjectsRequest {
    return new ListObjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListObjectsRequest {
    return new ListObjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListObjectsRequest | PlainMessage<ListObjectsRequest> | undefined, b: ListObjectsRequest | PlainMessage<ListObjectsRequest> | undefined): boolean {
    return proto3.util.equals(ListObjectsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ListObjectsResponse
 */
export class ListObjectsResponse extends Message<ListObjectsResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated api.v1.storage.ListObjectsResponse.Result results = 2;
   */
  results: ListObjectsResponse_Result[] = [];

  constructor(data?: PartialMessage<ListObjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ListObjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: ListObjectsResponse_Result, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListObjectsResponse {
    return new ListObjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListObjectsResponse {
    return new ListObjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListObjectsResponse {
    return new ListObjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListObjectsResponse | PlainMessage<ListObjectsResponse> | undefined, b: ListObjectsResponse | PlainMessage<ListObjectsResponse> | undefined): boolean {
    return proto3.util.equals(ListObjectsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ListObjectsResponse.Result
 */
export class ListObjectsResponse_Result extends Message<ListObjectsResponse_Result> {
  /**
   * @generated from oneof api.v1.storage.ListObjectsResponse.Result.result
   */
  result: {
    /**
     * @generated from field: api.v1.storage.Object object = 1;
     */
    value: Object$;
    case: "object";
  } | {
    /**
     * @generated from field: string folder = 2;
     */
    value: string;
    case: "folder";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ListObjectsResponse_Result>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ListObjectsResponse.Result";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: Object$, oneof: "result" },
    { no: 2, name: "folder", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListObjectsResponse_Result {
    return new ListObjectsResponse_Result().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListObjectsResponse_Result {
    return new ListObjectsResponse_Result().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListObjectsResponse_Result {
    return new ListObjectsResponse_Result().fromJsonString(jsonString, options);
  }

  static equals(a: ListObjectsResponse_Result | PlainMessage<ListObjectsResponse_Result> | undefined, b: ListObjectsResponse_Result | PlainMessage<ListObjectsResponse_Result> | undefined): boolean {
    return proto3.util.equals(ListObjectsResponse_Result, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DeleteObjectRequest
 */
export class DeleteObjectRequest extends Message<DeleteObjectRequest> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<DeleteObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DeleteObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectRequest {
    return new DeleteObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectRequest | PlainMessage<DeleteObjectRequest> | undefined, b: DeleteObjectRequest | PlainMessage<DeleteObjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteObjectRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DeleteObjectResponse
 */
export class DeleteObjectResponse extends Message<DeleteObjectResponse> {
  constructor(data?: PartialMessage<DeleteObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DeleteObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteObjectResponse {
    return new DeleteObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteObjectResponse | PlainMessage<DeleteObjectResponse> | undefined, b: DeleteObjectResponse | PlainMessage<DeleteObjectResponse> | undefined): boolean {
    return proto3.util.equals(DeleteObjectResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.CopyObjectRequest
 */
export class CopyObjectRequest extends Message<CopyObjectRequest> {
  /**
   * @generated from field: string from_bucket = 1;
   */
  fromBucket = "";

  /**
   * @generated from field: string from_path = 2;
   */
  fromPath = "";

  /**
   * @generated from field: string to_bucket = 3;
   */
  toBucket = "";

  /**
   * @generated from field: string to_path = 4;
   */
  toPath = "";

  constructor(data?: PartialMessage<CopyObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.CopyObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyObjectRequest {
    return new CopyObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyObjectRequest {
    return new CopyObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyObjectRequest {
    return new CopyObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CopyObjectRequest | PlainMessage<CopyObjectRequest> | undefined, b: CopyObjectRequest | PlainMessage<CopyObjectRequest> | undefined): boolean {
    return proto3.util.equals(CopyObjectRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.CopyObjectResponse
 */
export class CopyObjectResponse extends Message<CopyObjectResponse> {
  constructor(data?: PartialMessage<CopyObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.CopyObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyObjectResponse {
    return new CopyObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyObjectResponse {
    return new CopyObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyObjectResponse {
    return new CopyObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CopyObjectResponse | PlainMessage<CopyObjectResponse> | undefined, b: CopyObjectResponse | PlainMessage<CopyObjectResponse> | undefined): boolean {
    return proto3.util.equals(CopyObjectResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.UploadObjectRequest
 */
export class UploadObjectRequest extends Message<UploadObjectRequest> {
  /**
   * @generated from oneof api.v1.storage.UploadObjectRequest.request
   */
  request: {
    /**
     * @generated from field: api.v1.storage.UploadObjectRequest.Metadata metadata = 1;
     */
    value: UploadObjectRequest_Metadata;
    case: "metadata";
  } | {
    /**
     * @generated from field: bytes chunk = 2;
     */
    value: Uint8Array;
    case: "chunk";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.UploadObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: UploadObjectRequest_Metadata, oneof: "request" },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "request" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadObjectRequest {
    return new UploadObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadObjectRequest {
    return new UploadObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadObjectRequest {
    return new UploadObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadObjectRequest | PlainMessage<UploadObjectRequest> | undefined, b: UploadObjectRequest | PlainMessage<UploadObjectRequest> | undefined): boolean {
    return proto3.util.equals(UploadObjectRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.UploadObjectRequest.Metadata
 */
export class UploadObjectRequest_Metadata extends Message<UploadObjectRequest_Metadata> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: uint64 size = 3;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: bool only_replace = 4;
   */
  onlyReplace = false;

  /**
   * @generated from field: bool only_create = 5;
   */
  onlyCreate = false;

  /**
   * @generated from field: string content_type = 6;
   */
  contentType = "";

  constructor(data?: PartialMessage<UploadObjectRequest_Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.UploadObjectRequest.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "only_replace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "only_create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadObjectRequest_Metadata {
    return new UploadObjectRequest_Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadObjectRequest_Metadata {
    return new UploadObjectRequest_Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadObjectRequest_Metadata {
    return new UploadObjectRequest_Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: UploadObjectRequest_Metadata | PlainMessage<UploadObjectRequest_Metadata> | undefined, b: UploadObjectRequest_Metadata | PlainMessage<UploadObjectRequest_Metadata> | undefined): boolean {
    return proto3.util.equals(UploadObjectRequest_Metadata, a, b);
  }
}

/**
 * @generated from message api.v1.storage.UploadObjectResponse
 */
export class UploadObjectResponse extends Message<UploadObjectResponse> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: uint64 size = 2;
   */
  size = protoInt64.zero;

  constructor(data?: PartialMessage<UploadObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.UploadObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadObjectResponse {
    return new UploadObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadObjectResponse {
    return new UploadObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadObjectResponse {
    return new UploadObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadObjectResponse | PlainMessage<UploadObjectResponse> | undefined, b: UploadObjectResponse | PlainMessage<UploadObjectResponse> | undefined): boolean {
    return proto3.util.equals(UploadObjectResponse, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DownloadObjectRequest
 */
export class DownloadObjectRequest extends Message<DownloadObjectRequest> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<DownloadObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DownloadObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadObjectRequest {
    return new DownloadObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadObjectRequest {
    return new DownloadObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadObjectRequest {
    return new DownloadObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadObjectRequest | PlainMessage<DownloadObjectRequest> | undefined, b: DownloadObjectRequest | PlainMessage<DownloadObjectRequest> | undefined): boolean {
    return proto3.util.equals(DownloadObjectRequest, a, b);
  }
}

/**
 * @generated from message api.v1.storage.DownloadObjectResponse
 */
export class DownloadObjectResponse extends Message<DownloadObjectResponse> {
  /**
   * @generated from field: bytes chunk = 1;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<DownloadObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.DownloadObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadObjectResponse {
    return new DownloadObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadObjectResponse {
    return new DownloadObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadObjectResponse {
    return new DownloadObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadObjectResponse | PlainMessage<DownloadObjectResponse> | undefined, b: DownloadObjectResponse | PlainMessage<DownloadObjectResponse> | undefined): boolean {
    return proto3.util.equals(DownloadObjectResponse, a, b);
  }
}

