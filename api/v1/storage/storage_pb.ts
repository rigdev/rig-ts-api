// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/storage/storage.proto (package api.v1.storage, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { ProviderCredentials } from "../../../model/credentials_pb.js";

/**
 * @generated from message api.v1.storage.Bucket
 */
export class Bucket extends Message<Bucket> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string region = 2;
   */
  region = "";

  /**
   * @generated from field: string provider_bucket = 3;
   */
  providerBucket = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Bucket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.Bucket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "provider_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bucket {
    return new Bucket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bucket {
    return new Bucket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bucket {
    return new Bucket().fromJsonString(jsonString, options);
  }

  static equals(a: Bucket | PlainMessage<Bucket> | undefined, b: Bucket | PlainMessage<Bucket> | undefined): boolean {
    return proto3.util.equals(Bucket, a, b);
  }
}

/**
 * @generated from message api.v1.storage.Object
 */
export class Object$ extends Message<Object$> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: google.protobuf.Timestamp last_modified = 2;
   */
  lastModified?: Timestamp;

  /**
   * @generated from field: uint64 size = 3;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: string etag = 4;
   */
  etag = "";

  /**
   * @generated from field: string content_type = 5;
   */
  contentType = "";

  constructor(data?: PartialMessage<Object$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_modified", kind: "message", T: Timestamp },
    { no: 3, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$ {
    return new Object$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJsonString(jsonString, options);
  }

  static equals(a: Object$ | PlainMessage<Object$> | undefined, b: Object$ | PlainMessage<Object$> | undefined): boolean {
    return proto3.util.equals(Object$, a, b);
  }
}

/**
 * @generated from message api.v1.storage.Provider
 */
export class Provider extends Message<Provider> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: api.v1.storage.Config config = 3;
   */
  config?: Config;

  /**
   * @generated from field: repeated api.v1.storage.Bucket buckets = 4;
   */
  buckets: Bucket[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Provider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.Provider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "message", T: Config },
    { no: 4, name: "buckets", kind: "message", T: Bucket, repeated: true },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provider {
    return new Provider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJsonString(jsonString, options);
  }

  static equals(a: Provider | PlainMessage<Provider> | undefined, b: Provider | PlainMessage<Provider> | undefined): boolean {
    return proto3.util.equals(Provider, a, b);
  }
}

/**
 * @generated from message api.v1.storage.Config
 */
export class Config extends Message<Config> {
  /**
   * @generated from oneof api.v1.storage.Config.config
   */
  config: {
    /**
     * @generated from field: api.v1.storage.MinioConfig minio = 1;
     */
    value: MinioConfig;
    case: "minio";
  } | {
    /**
     * @generated from field: api.v1.storage.GcsConfig gcs = 2;
     */
    value: GcsConfig;
    case: "gcs";
  } | {
    /**
     * @generated from field: api.v1.storage.S3Config s3 = 3;
     */
    value: S3Config;
    case: "s3";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "minio", kind: "message", T: MinioConfig, oneof: "config" },
    { no: 2, name: "gcs", kind: "message", T: GcsConfig, oneof: "config" },
    { no: 3, name: "s3", kind: "message", T: S3Config, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options);
  }

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {
    return proto3.util.equals(Config, a, b);
  }
}

/**
 * @generated from message api.v1.storage.ProviderEntry
 */
export class ProviderEntry extends Message<ProviderEntry> {
  /**
   * @generated from field: string provider_id = 1;
   */
  providerId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: api.v1.storage.Config config = 3;
   */
  config?: Config;

  /**
   * @generated from field: repeated api.v1.storage.Bucket buckets = 4;
   */
  buckets: Bucket[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<ProviderEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.ProviderEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "message", T: Config },
    { no: 4, name: "buckets", kind: "message", T: Bucket, repeated: true },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderEntry {
    return new ProviderEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderEntry {
    return new ProviderEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderEntry {
    return new ProviderEntry().fromJsonString(jsonString, options);
  }

  static equals(a: ProviderEntry | PlainMessage<ProviderEntry> | undefined, b: ProviderEntry | PlainMessage<ProviderEntry> | undefined): boolean {
    return proto3.util.equals(ProviderEntry, a, b);
  }
}

/**
 * @generated from message api.v1.storage.GcsConfig
 */
export class GcsConfig extends Message<GcsConfig> {
  /**
   * @generated from field: bytes config = 1;
   */
  config = new Uint8Array(0);

  constructor(data?: PartialMessage<GcsConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.GcsConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GcsConfig {
    return new GcsConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GcsConfig {
    return new GcsConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GcsConfig {
    return new GcsConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GcsConfig | PlainMessage<GcsConfig> | undefined, b: GcsConfig | PlainMessage<GcsConfig> | undefined): boolean {
    return proto3.util.equals(GcsConfig, a, b);
  }
}

/**
 * @generated from message api.v1.storage.MinioConfig
 */
export class MinioConfig extends Message<MinioConfig> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = "";

  /**
   * @generated from field: string region = 2;
   */
  region = "";

  /**
   * @generated from field: model.ProviderCredentials credentials = 3;
   */
  credentials?: ProviderCredentials;

  /**
   * @generated from field: bool secure = 4;
   */
  secure = false;

  constructor(data?: PartialMessage<MinioConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.MinioConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "credentials", kind: "message", T: ProviderCredentials },
    { no: 4, name: "secure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MinioConfig {
    return new MinioConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MinioConfig {
    return new MinioConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MinioConfig {
    return new MinioConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MinioConfig | PlainMessage<MinioConfig> | undefined, b: MinioConfig | PlainMessage<MinioConfig> | undefined): boolean {
    return proto3.util.equals(MinioConfig, a, b);
  }
}

/**
 * @generated from message api.v1.storage.S3Config
 */
export class S3Config extends Message<S3Config> {
  /**
   * @generated from field: string region = 1;
   */
  region = "";

  /**
   * @generated from field: model.ProviderCredentials credentials = 2;
   */
  credentials?: ProviderCredentials;

  constructor(data?: PartialMessage<S3Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.storage.S3Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: ProviderCredentials },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): S3Config {
    return new S3Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): S3Config {
    return new S3Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): S3Config {
    return new S3Config().fromJsonString(jsonString, options);
  }

  static equals(a: S3Config | PlainMessage<S3Config> | undefined, b: S3Config | PlainMessage<S3Config> | undefined): boolean {
    return proto3.util.equals(S3Config, a, b);
  }
}

