// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/settings/service.proto (package api.v1.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Settings, Update } from "./settings_pb.js";
import { Configuration } from "./configuration_pb.js";
import { GitStatus, RepoBranch } from "../../../model/git_pb.js";
import { CapsuleID, CapsuleSetID } from "../../../model/id_pb.js";

/**
 * Request to get the license information of the Rig installation.
 *
 * @generated from message api.v1.settings.GetLicenseInfoRequest
 */
export class GetLicenseInfoRequest extends Message<GetLicenseInfoRequest> {
  constructor(data?: PartialMessage<GetLicenseInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetLicenseInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLicenseInfoRequest {
    return new GetLicenseInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLicenseInfoRequest {
    return new GetLicenseInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLicenseInfoRequest {
    return new GetLicenseInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLicenseInfoRequest | PlainMessage<GetLicenseInfoRequest> | undefined, b: GetLicenseInfoRequest | PlainMessage<GetLicenseInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetLicenseInfoRequest, a, b);
  }
}

/**
 * Response for getting the license information of the Rig installation.
 *
 * @generated from message api.v1.settings.GetLicenseInfoResponse
 */
export class GetLicenseInfoResponse extends Message<GetLicenseInfoResponse> {
  /**
   * The expiration date of the license.
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 2;
   */
  expiresAt?: Timestamp;

  /**
   * The number of users allowed in the installation.
   *
   * @generated from field: int32 user_limit = 3;
   */
  userLimit = 0;

  constructor(data?: PartialMessage<GetLicenseInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetLicenseInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "expires_at", kind: "message", T: Timestamp },
    { no: 3, name: "user_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLicenseInfoResponse {
    return new GetLicenseInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLicenseInfoResponse {
    return new GetLicenseInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLicenseInfoResponse {
    return new GetLicenseInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLicenseInfoResponse | PlainMessage<GetLicenseInfoResponse> | undefined, b: GetLicenseInfoResponse | PlainMessage<GetLicenseInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetLicenseInfoResponse, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetSettingsRequest
 */
export class GetSettingsRequest extends Message<GetSettingsRequest> {
  constructor(data?: PartialMessage<GetSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSettingsRequest {
    return new GetSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSettingsRequest {
    return new GetSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSettingsRequest {
    return new GetSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSettingsRequest | PlainMessage<GetSettingsRequest> | undefined, b: GetSettingsRequest | PlainMessage<GetSettingsRequest> | undefined): boolean {
    return proto3.util.equals(GetSettingsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetSettingsResponse
 */
export class GetSettingsResponse extends Message<GetSettingsResponse> {
  /**
   * @generated from field: api.v1.settings.Settings settings = 1;
   */
  settings?: Settings;

  constructor(data?: PartialMessage<GetSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: Settings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSettingsResponse {
    return new GetSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSettingsResponse {
    return new GetSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSettingsResponse {
    return new GetSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSettingsResponse | PlainMessage<GetSettingsResponse> | undefined, b: GetSettingsResponse | PlainMessage<GetSettingsResponse> | undefined): boolean {
    return proto3.util.equals(GetSettingsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.settings.UpdateSettingsRequest
 */
export class UpdateSettingsRequest extends Message<UpdateSettingsRequest> {
  /**
   * @generated from field: repeated api.v1.settings.Update updates = 1;
   */
  updates: Update[] = [];

  constructor(data?: PartialMessage<UpdateSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.UpdateSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSettingsRequest {
    return new UpdateSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSettingsRequest {
    return new UpdateSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSettingsRequest {
    return new UpdateSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSettingsRequest | PlainMessage<UpdateSettingsRequest> | undefined, b: UpdateSettingsRequest | PlainMessage<UpdateSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSettingsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.settings.UpdateSettingsResponse
 */
export class UpdateSettingsResponse extends Message<UpdateSettingsResponse> {
  constructor(data?: PartialMessage<UpdateSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.UpdateSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSettingsResponse | PlainMessage<UpdateSettingsResponse> | undefined, b: UpdateSettingsResponse | PlainMessage<UpdateSettingsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSettingsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetConfigurationRequest
 */
export class GetConfigurationRequest extends Message<GetConfigurationRequest> {
  constructor(data?: PartialMessage<GetConfigurationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetConfigurationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigurationRequest {
    return new GetConfigurationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigurationRequest {
    return new GetConfigurationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigurationRequest {
    return new GetConfigurationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigurationRequest | PlainMessage<GetConfigurationRequest> | undefined, b: GetConfigurationRequest | PlainMessage<GetConfigurationRequest> | undefined): boolean {
    return proto3.util.equals(GetConfigurationRequest, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetConfigurationResponse
 */
export class GetConfigurationResponse extends Message<GetConfigurationResponse> {
  /**
   * @generated from field: api.v1.settings.Configuration configuration = 1;
   */
  configuration?: Configuration;

  constructor(data?: PartialMessage<GetConfigurationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetConfigurationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configuration", kind: "message", T: Configuration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigurationResponse {
    return new GetConfigurationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigurationResponse {
    return new GetConfigurationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigurationResponse {
    return new GetConfigurationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigurationResponse | PlainMessage<GetConfigurationResponse> | undefined, b: GetConfigurationResponse | PlainMessage<GetConfigurationResponse> | undefined): boolean {
    return proto3.util.equals(GetConfigurationResponse, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetGitStoreStatusRequest
 */
export class GetGitStoreStatusRequest extends Message<GetGitStoreStatusRequest> {
  constructor(data?: PartialMessage<GetGitStoreStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetGitStoreStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitStoreStatusRequest {
    return new GetGitStoreStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitStoreStatusRequest {
    return new GetGitStoreStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitStoreStatusRequest {
    return new GetGitStoreStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitStoreStatusRequest | PlainMessage<GetGitStoreStatusRequest> | undefined, b: GetGitStoreStatusRequest | PlainMessage<GetGitStoreStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetGitStoreStatusRequest, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetGitStoreStatusResponse
 */
export class GetGitStoreStatusResponse extends Message<GetGitStoreStatusResponse> {
  /**
   * @generated from field: repeated api.v1.settings.GetGitStoreStatusResponse.RepoGitStatus repositories = 1;
   */
  repositories: GetGitStoreStatusResponse_RepoGitStatus[] = [];

  /**
   * @generated from field: repeated api.v1.settings.GetGitStoreStatusResponse.CapsuleStatus capsules = 2;
   */
  capsules: GetGitStoreStatusResponse_CapsuleStatus[] = [];

  /**
   * @generated from field: repeated api.v1.settings.GetGitStoreStatusResponse.CapsuleSetStatus capsule_sets = 4;
   */
  capsuleSets: GetGitStoreStatusResponse_CapsuleSetStatus[] = [];

  /**
   * @generated from field: repeated api.v1.settings.GetGitStoreStatusResponse.CallbackErr errors = 3;
   */
  errors: GetGitStoreStatusResponse_CallbackErr[] = [];

  constructor(data?: PartialMessage<GetGitStoreStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetGitStoreStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repositories", kind: "message", T: GetGitStoreStatusResponse_RepoGitStatus, repeated: true },
    { no: 2, name: "capsules", kind: "message", T: GetGitStoreStatusResponse_CapsuleStatus, repeated: true },
    { no: 4, name: "capsule_sets", kind: "message", T: GetGitStoreStatusResponse_CapsuleSetStatus, repeated: true },
    { no: 3, name: "errors", kind: "message", T: GetGitStoreStatusResponse_CallbackErr, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitStoreStatusResponse {
    return new GetGitStoreStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse {
    return new GetGitStoreStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse {
    return new GetGitStoreStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitStoreStatusResponse | PlainMessage<GetGitStoreStatusResponse> | undefined, b: GetGitStoreStatusResponse | PlainMessage<GetGitStoreStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetGitStoreStatusResponse, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetGitStoreStatusResponse.RepoGitStatus
 */
export class GetGitStoreStatusResponse_RepoGitStatus extends Message<GetGitStoreStatusResponse_RepoGitStatus> {
  /**
   * @generated from field: model.RepoBranch repo = 1;
   */
  repo?: RepoBranch;

  /**
   * @generated from field: model.GitStatus status = 2;
   */
  status?: GitStatus;

  constructor(data?: PartialMessage<GetGitStoreStatusResponse_RepoGitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetGitStoreStatusResponse.RepoGitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo", kind: "message", T: RepoBranch },
    { no: 2, name: "status", kind: "message", T: GitStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitStoreStatusResponse_RepoGitStatus {
    return new GetGitStoreStatusResponse_RepoGitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_RepoGitStatus {
    return new GetGitStoreStatusResponse_RepoGitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_RepoGitStatus {
    return new GetGitStoreStatusResponse_RepoGitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitStoreStatusResponse_RepoGitStatus | PlainMessage<GetGitStoreStatusResponse_RepoGitStatus> | undefined, b: GetGitStoreStatusResponse_RepoGitStatus | PlainMessage<GetGitStoreStatusResponse_RepoGitStatus> | undefined): boolean {
    return proto3.util.equals(GetGitStoreStatusResponse_RepoGitStatus, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetGitStoreStatusResponse.CapsuleStatus
 */
export class GetGitStoreStatusResponse_CapsuleStatus extends Message<GetGitStoreStatusResponse_CapsuleStatus> {
  /**
   * @generated from field: model.CapsuleID capsule = 1;
   */
  capsule?: CapsuleID;

  /**
   * @generated from field: model.GitStatus status = 3;
   */
  status?: GitStatus;

  constructor(data?: PartialMessage<GetGitStoreStatusResponse_CapsuleStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetGitStoreStatusResponse.CapsuleStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: CapsuleID },
    { no: 3, name: "status", kind: "message", T: GitStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitStoreStatusResponse_CapsuleStatus {
    return new GetGitStoreStatusResponse_CapsuleStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_CapsuleStatus {
    return new GetGitStoreStatusResponse_CapsuleStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_CapsuleStatus {
    return new GetGitStoreStatusResponse_CapsuleStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitStoreStatusResponse_CapsuleStatus | PlainMessage<GetGitStoreStatusResponse_CapsuleStatus> | undefined, b: GetGitStoreStatusResponse_CapsuleStatus | PlainMessage<GetGitStoreStatusResponse_CapsuleStatus> | undefined): boolean {
    return proto3.util.equals(GetGitStoreStatusResponse_CapsuleStatus, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetGitStoreStatusResponse.CapsuleSetStatus
 */
export class GetGitStoreStatusResponse_CapsuleSetStatus extends Message<GetGitStoreStatusResponse_CapsuleSetStatus> {
  /**
   * @generated from field: model.CapsuleSetID capsule = 1;
   */
  capsule?: CapsuleSetID;

  /**
   * @generated from field: model.GitStatus status = 2;
   */
  status?: GitStatus;

  constructor(data?: PartialMessage<GetGitStoreStatusResponse_CapsuleSetStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetGitStoreStatusResponse.CapsuleSetStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: CapsuleSetID },
    { no: 2, name: "status", kind: "message", T: GitStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitStoreStatusResponse_CapsuleSetStatus {
    return new GetGitStoreStatusResponse_CapsuleSetStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_CapsuleSetStatus {
    return new GetGitStoreStatusResponse_CapsuleSetStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_CapsuleSetStatus {
    return new GetGitStoreStatusResponse_CapsuleSetStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitStoreStatusResponse_CapsuleSetStatus | PlainMessage<GetGitStoreStatusResponse_CapsuleSetStatus> | undefined, b: GetGitStoreStatusResponse_CapsuleSetStatus | PlainMessage<GetGitStoreStatusResponse_CapsuleSetStatus> | undefined): boolean {
    return proto3.util.equals(GetGitStoreStatusResponse_CapsuleSetStatus, a, b);
  }
}

/**
 * @generated from message api.v1.settings.GetGitStoreStatusResponse.CallbackErr
 */
export class GetGitStoreStatusResponse_CallbackErr extends Message<GetGitStoreStatusResponse_CallbackErr> {
  /**
   * @generated from field: string err = 1;
   */
  err = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<GetGitStoreStatusResponse_CallbackErr>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.GetGitStoreStatusResponse.CallbackErr";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "err", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitStoreStatusResponse_CallbackErr {
    return new GetGitStoreStatusResponse_CallbackErr().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_CallbackErr {
    return new GetGitStoreStatusResponse_CallbackErr().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitStoreStatusResponse_CallbackErr {
    return new GetGitStoreStatusResponse_CallbackErr().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitStoreStatusResponse_CallbackErr | PlainMessage<GetGitStoreStatusResponse_CallbackErr> | undefined, b: GetGitStoreStatusResponse_CallbackErr | PlainMessage<GetGitStoreStatusResponse_CallbackErr> | undefined): boolean {
    return proto3.util.equals(GetGitStoreStatusResponse_CallbackErr, a, b);
  }
}

