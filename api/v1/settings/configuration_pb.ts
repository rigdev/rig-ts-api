// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/settings/configuration.proto (package api.v1.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum api.v1.settings.EmailType
 */
export enum EmailType {
  /**
   * @generated from enum value: EMAIL_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EMAIL_TYPE_MAILJET = 1;
   */
  MAILJET = 1,

  /**
   * @generated from enum value: EMAIL_TYPE_SMTP = 2;
   */
  SMTP = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EmailType)
proto3.util.setEnumType(EmailType, "api.v1.settings.EmailType", [
  { no: 0, name: "EMAIL_TYPE_UNSPECIFIED" },
  { no: 1, name: "EMAIL_TYPE_MAILJET" },
  { no: 2, name: "EMAIL_TYPE_SMTP" },
]);

/**
 * Platform wide static configuration.
 *
 * @generated from message api.v1.settings.Configuration
 */
export class Configuration extends Message<Configuration> {
  /**
   * @generated from field: api.v1.settings.Client client = 1;
   */
  client?: Client;

  /**
   * @generated from field: repeated string docker_registries = 2;
   */
  dockerRegistries: string[] = [];

  /**
   * @generated from field: api.v1.settings.EmailClient default_email = 3;
   */
  defaultEmail?: EmailClient;

  constructor(data?: PartialMessage<Configuration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Configuration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client", kind: "message", T: Client },
    { no: 2, name: "docker_registries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "default_email", kind: "message", T: EmailClient },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Configuration {
    return new Configuration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Configuration {
    return new Configuration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Configuration {
    return new Configuration().fromJsonString(jsonString, options);
  }

  static equals(a: Configuration | PlainMessage<Configuration> | undefined, b: Configuration | PlainMessage<Configuration> | undefined): boolean {
    return proto3.util.equals(Configuration, a, b);
  }
}

/**
 * @generated from message api.v1.settings.Client
 */
export class Client extends Message<Client> {
  /**
   * @generated from field: api.v1.settings.Slack slack = 1;
   */
  slack?: Slack;

  /**
   * @generated from field: repeated api.v1.settings.EmailClient email = 2;
   */
  email: EmailClient[] = [];

  /**
   * @generated from field: repeated api.v1.settings.Git git = 3;
   */
  git: Git[] = [];

  constructor(data?: PartialMessage<Client>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Client";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slack", kind: "message", T: Slack },
    { no: 2, name: "email", kind: "message", T: EmailClient, repeated: true },
    { no: 3, name: "git", kind: "message", T: Git, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Client {
    return new Client().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Client {
    return new Client().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Client {
    return new Client().fromJsonString(jsonString, options);
  }

  static equals(a: Client | PlainMessage<Client> | undefined, b: Client | PlainMessage<Client> | undefined): boolean {
    return proto3.util.equals(Client, a, b);
  }
}

/**
 * @generated from message api.v1.settings.Slack
 */
export class Slack extends Message<Slack> {
  /**
   * @generated from field: repeated api.v1.settings.Slack.Workspace workspace = 1;
   */
  workspace: Slack_Workspace[] = [];

  constructor(data?: PartialMessage<Slack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Slack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Slack_Workspace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Slack {
    return new Slack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Slack {
    return new Slack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Slack {
    return new Slack().fromJsonString(jsonString, options);
  }

  static equals(a: Slack | PlainMessage<Slack> | undefined, b: Slack | PlainMessage<Slack> | undefined): boolean {
    return proto3.util.equals(Slack, a, b);
  }
}

/**
 * @generated from message api.v1.settings.Slack.Workspace
 */
export class Slack_Workspace extends Message<Slack_Workspace> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<Slack_Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Slack.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Slack_Workspace {
    return new Slack_Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Slack_Workspace {
    return new Slack_Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Slack_Workspace {
    return new Slack_Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Slack_Workspace | PlainMessage<Slack_Workspace> | undefined, b: Slack_Workspace | PlainMessage<Slack_Workspace> | undefined): boolean {
    return proto3.util.equals(Slack_Workspace, a, b);
  }
}

/**
 * @generated from message api.v1.settings.EmailClient
 */
export class EmailClient extends Message<EmailClient> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: api.v1.settings.EmailType type = 2;
   */
  type = EmailType.UNSPECIFIED;

  constructor(data?: PartialMessage<EmailClient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.EmailClient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(EmailType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailClient {
    return new EmailClient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailClient {
    return new EmailClient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailClient {
    return new EmailClient().fromJsonString(jsonString, options);
  }

  static equals(a: EmailClient | PlainMessage<EmailClient> | undefined, b: EmailClient | PlainMessage<EmailClient> | undefined): boolean {
    return proto3.util.equals(EmailClient, a, b);
  }
}

/**
 * @generated from message api.v1.settings.Git
 */
export class Git extends Message<Git> {
  /**
   * URL is a exact match for the repo-url this auth can be used for.
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * URLPrefix is a prefix-match for the repo urls this auth can be used for.
   *
   * @generated from field: string url_prefix = 2;
   */
  urlPrefix = "";

  constructor(data?: PartialMessage<Git>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Git";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Git {
    return new Git().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Git {
    return new Git().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Git {
    return new Git().fromJsonString(jsonString, options);
  }

  static equals(a: Git | PlainMessage<Git> | undefined, b: Git | PlainMessage<Git> | undefined): boolean {
    return proto3.util.equals(Git, a, b);
  }
}

