// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/settings/settings.proto (package api.v1.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { NotificationNotifier } from "../../../model/notification_pb.js";
import { GitStore } from "../../../model/git_pb.js";

/**
 * The plan for a rig installation
 *
 * @generated from enum api.v1.settings.Plan
 */
export enum Plan {
  /**
   * Unspecified / unactivated plan.
   *
   * @generated from enum value: PLAN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Free tier.
   *
   * @generated from enum value: PLAN_FREE = 1;
   */
  FREE = 1,

  /**
   * Team / Pro tier.
   *
   * @generated from enum value: PLAN_TEAM = 2;
   */
  TEAM = 2,

  /**
   * Enterprise tier.
   *
   * @generated from enum value: PLAN_ENTERPRISE = 3;
   */
  ENTERPRISE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Plan)
proto3.util.setEnumType(Plan, "api.v1.settings.Plan", [
  { no: 0, name: "PLAN_UNSPECIFIED" },
  { no: 1, name: "PLAN_FREE" },
  { no: 2, name: "PLAN_TEAM" },
  { no: 3, name: "PLAN_ENTERPRISE" },
]);

/**
 * Platform wide settings.
 *
 * @generated from message api.v1.settings.Settings
 */
export class Settings extends Message<Settings> {
  /**
   * @generated from field: repeated model.NotificationNotifier notification_notifiers = 1;
   */
  notificationNotifiers: NotificationNotifier[] = [];

  /**
   * @generated from field: model.GitStore git_store = 2;
   */
  gitStore?: GitStore;

  constructor(data?: PartialMessage<Settings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Settings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notification_notifiers", kind: "message", T: NotificationNotifier, repeated: true },
    { no: 2, name: "git_store", kind: "message", T: GitStore },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Settings {
    return new Settings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJsonString(jsonString, options);
  }

  static equals(a: Settings | PlainMessage<Settings> | undefined, b: Settings | PlainMessage<Settings> | undefined): boolean {
    return proto3.util.equals(Settings, a, b);
  }
}

/**
 * Update message for platform settings.
 *
 * @generated from message api.v1.settings.Update
 */
export class Update extends Message<Update> {
  /**
   * @generated from oneof api.v1.settings.Update.field
   */
  field: {
    /**
     * Set the notification notifiers.
     *
     * @generated from field: api.v1.settings.Update.SetNotificationNotifiers set_notification_notifiers = 1;
     */
    value: Update_SetNotificationNotifiers;
    case: "setNotificationNotifiers";
  } | {
    /**
     * Set the git store.
     *
     * @generated from field: model.GitStore set_git_store = 2;
     */
    value: GitStore;
    case: "setGitStore";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Update>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Update";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set_notification_notifiers", kind: "message", T: Update_SetNotificationNotifiers, oneof: "field" },
    { no: 2, name: "set_git_store", kind: "message", T: GitStore, oneof: "field" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update {
    return new Update().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJsonString(jsonString, options);
  }

  static equals(a: Update | PlainMessage<Update> | undefined, b: Update | PlainMessage<Update> | undefined): boolean {
    return proto3.util.equals(Update, a, b);
  }
}

/**
 * @generated from message api.v1.settings.Update.SetNotificationNotifiers
 */
export class Update_SetNotificationNotifiers extends Message<Update_SetNotificationNotifiers> {
  /**
   * @generated from field: repeated model.NotificationNotifier notifiers = 1;
   */
  notifiers: NotificationNotifier[] = [];

  constructor(data?: PartialMessage<Update_SetNotificationNotifiers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.settings.Update.SetNotificationNotifiers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notifiers", kind: "message", T: NotificationNotifier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update_SetNotificationNotifiers {
    return new Update_SetNotificationNotifiers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update_SetNotificationNotifiers {
    return new Update_SetNotificationNotifiers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update_SetNotificationNotifiers {
    return new Update_SetNotificationNotifiers().fromJsonString(jsonString, options);
  }

  static equals(a: Update_SetNotificationNotifiers | PlainMessage<Update_SetNotificationNotifiers> | undefined, b: Update_SetNotificationNotifiers | PlainMessage<Update_SetNotificationNotifiers> | undefined): boolean {
    return proto3.util.equals(Update_SetNotificationNotifiers, a, b);
  }
}

