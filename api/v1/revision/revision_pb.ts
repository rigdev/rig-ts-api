// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/revision/revision.proto (package api.v1.revision, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Capsule as Capsule$1, CapsuleSet as CapsuleSet$1, Environment as Environment$1, Project as Project$1 } from "../../../platform/v1/generated_pb.js";
import { ObjectMetadata } from "../../../model/object_pb.js";
import { Change } from "../capsule/change_pb.js";

/**
 * @generated from message api.v1.revision.CapsuleSet
 */
export class CapsuleSet extends Message<CapsuleSet> {
  /**
   * @generated from field: platform.v1.CapsuleSet spec = 1;
   */
  spec?: CapsuleSet$1;

  /**
   * @generated from field: model.ObjectMetadata metadata = 2;
   */
  metadata?: ObjectMetadata;

  constructor(data?: PartialMessage<CapsuleSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.revision.CapsuleSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: CapsuleSet$1 },
    { no: 2, name: "metadata", kind: "message", T: ObjectMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleSet {
    return new CapsuleSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleSet {
    return new CapsuleSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleSet {
    return new CapsuleSet().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleSet | PlainMessage<CapsuleSet> | undefined, b: CapsuleSet | PlainMessage<CapsuleSet> | undefined): boolean {
    return proto3.util.equals(CapsuleSet, a, b);
  }
}

/**
 * @generated from message api.v1.revision.Capsule
 */
export class Capsule extends Message<Capsule> {
  /**
   * @generated from field: platform.v1.Capsule spec = 1;
   */
  spec?: Capsule$1;

  /**
   * @generated from field: model.ObjectMetadata metadata = 2;
   */
  metadata?: ObjectMetadata;

  /**
   * @generated from field: repeated api.v1.capsule.Change changes = 3;
   */
  changes: Change[] = [];

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<Capsule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.revision.Capsule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Capsule$1 },
    { no: 2, name: "metadata", kind: "message", T: ObjectMetadata },
    { no: 3, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Capsule {
    return new Capsule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Capsule {
    return new Capsule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Capsule {
    return new Capsule().fromJsonString(jsonString, options);
  }

  static equals(a: Capsule | PlainMessage<Capsule> | undefined, b: Capsule | PlainMessage<Capsule> | undefined): boolean {
    return proto3.util.equals(Capsule, a, b);
  }
}

/**
 * @generated from message api.v1.revision.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: platform.v1.Project spec = 1;
   */
  spec?: Project$1;

  /**
   * @generated from field: model.ObjectMetadata metadata = 2;
   */
  metadata?: ObjectMetadata;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.revision.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Project$1 },
    { no: 2, name: "metadata", kind: "message", T: ObjectMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message api.v1.revision.Environment
 */
export class Environment extends Message<Environment> {
  /**
   * @generated from field: platform.v1.Environment spec = 1;
   */
  spec?: Environment$1;

  /**
   * @generated from field: model.ObjectMetadata metadata = 2;
   */
  metadata?: ObjectMetadata;

  constructor(data?: PartialMessage<Environment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.revision.Environment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Environment$1 },
    { no: 2, name: "metadata", kind: "message", T: ObjectMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Environment {
    return new Environment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJsonString(jsonString, options);
  }

  static equals(a: Environment | PlainMessage<Environment> | undefined, b: Environment | PlainMessage<Environment> | undefined): boolean {
    return proto3.util.equals(Environment, a, b);
  }
}

