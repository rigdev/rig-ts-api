// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/metrics/metrics.proto (package api.v1.metrics, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.metrics.Metric
 */
export class Metric extends Message<Metric> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: double value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<Metric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.metrics.Metric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metric {
    return new Metric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJsonString(jsonString, options);
  }

  static equals(a: Metric | PlainMessage<Metric> | undefined, b: Metric | PlainMessage<Metric> | undefined): boolean {
    return proto3.util.equals(Metric, a, b);
  }
}

/**
 * @generated from message api.v1.metrics.MetricFull
 */
export class MetricFull extends Message<MetricFull> {
  /**
   * @generated from field: api.v1.metrics.Metric metric = 1;
   */
  metric?: Metric;

  /**
   * @generated from field: api.v1.metrics.Tags tags = 2;
   */
  tags?: Tags;

  constructor(data?: PartialMessage<MetricFull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.metrics.MetricFull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metric", kind: "message", T: Metric },
    { no: 2, name: "tags", kind: "message", T: Tags },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricFull {
    return new MetricFull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricFull {
    return new MetricFull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricFull {
    return new MetricFull().fromJsonString(jsonString, options);
  }

  static equals(a: MetricFull | PlainMessage<MetricFull> | undefined, b: MetricFull | PlainMessage<MetricFull> | undefined): boolean {
    return proto3.util.equals(MetricFull, a, b);
  }
}

/**
 * @generated from message api.v1.metrics.Tags
 */
export class Tags extends Message<Tags> {
  /**
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * @generated from field: string environment = 2;
   */
  environment = "";

  /**
   * @generated from field: string capsule = 3;
   */
  capsule = "";

  /**
   * @generated from field: string metric_name = 4;
   */
  metricName = "";

  constructor(data?: PartialMessage<Tags>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.metrics.Tags";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "capsule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metric_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tags {
    return new Tags().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tags {
    return new Tags().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tags {
    return new Tags().fromJsonString(jsonString, options);
  }

  static equals(a: Tags | PlainMessage<Tags> | undefined, b: Tags | PlainMessage<Tags> | undefined): boolean {
    return proto3.util.equals(Tags, a, b);
  }
}

/**
 * @generated from message api.v1.metrics.Keys
 */
export class Keys extends Message<Keys> {
  /**
   * @generated from field: bool project = 1;
   */
  project = false;

  /**
   * @generated from field: bool environment = 2;
   */
  environment = false;

  /**
   * @generated from field: bool capsule = 3;
   */
  capsule = false;

  /**
   * @generated from field: bool metric_name = 4;
   */
  metricName = false;

  /**
   * @generated from field: bool all = 5;
   */
  all = false;

  constructor(data?: PartialMessage<Keys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.metrics.Keys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "environment", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "capsule", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "metric_name", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Keys {
    return new Keys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Keys {
    return new Keys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Keys {
    return new Keys().fromJsonString(jsonString, options);
  }

  static equals(a: Keys | PlainMessage<Keys> | undefined, b: Keys | PlainMessage<Keys> | undefined): boolean {
    return proto3.util.equals(Keys, a, b);
  }
}

