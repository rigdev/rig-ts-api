// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/capsule/pipeline/status.proto (package api.v1.capsule.pipeline, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum api.v1.capsule.pipeline.State
 */
export enum State {
  /**
   * The state is unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The pipeline has started.
   *
   * @generated from enum value: STATE_RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * The pipeline is aborted.
   *
   * @generated from enum value: STATE_ABORTED = 2;
   */
  ABORTED = 2,

  /**
   * The pipeline is completed.
   *
   * @generated from enum value: STATE_COMPLETED = 3;
   */
  COMPLETED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(State)
proto3.util.setEnumType(State, "api.v1.capsule.pipeline.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_RUNNING" },
  { no: 2, name: "STATE_ABORTED" },
  { no: 3, name: "STATE_COMPLETED" },
]);

/**
 * @generated from enum api.v1.capsule.pipeline.PhaseState
 */
export enum PhaseState {
  /**
   * The state is unspecified.
   *
   * @generated from enum value: PHASE_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The phase is not ready for promotion
   *
   * @generated from enum value: PHASE_STATE_NOT_READY = 1;
   */
  NOT_READY = 1,

  /**
   * The phase is ready for promotion
   *
   * @generated from enum value: PHASE_STATE_READY = 2;
   */
  READY = 2,

  /**
   * The phase is promoted
   *
   * @generated from enum value: PHASE_STATE_PROMOTED = 3;
   */
  PROMOTED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PhaseState)
proto3.util.setEnumType(PhaseState, "api.v1.capsule.pipeline.PhaseState", [
  { no: 0, name: "PHASE_STATE_UNSPECIFIED" },
  { no: 1, name: "PHASE_STATE_NOT_READY" },
  { no: 2, name: "PHASE_STATE_READY" },
  { no: 3, name: "PHASE_STATE_PROMOTED" },
]);

/**
 * @generated from message api.v1.capsule.pipeline.Status
 */
export class Status extends Message<Status> {
  /**
   * The name of the pipeline.
   *
   * @generated from field: string pipeline_name = 1;
   */
  pipelineName = "";

  /**
   * The capsule that is executing the pipeline.
   *
   * @generated from field: string capsule_id = 2;
   */
  capsuleId = "";

  /**
   * The ID of the pipeline execution
   *
   * @generated from field: uint64 execution_id = 3;
   */
  executionId = protoInt64.zero;

  /**
   * The overall state of the pipeline execution.
   *
   * @generated from field: api.v1.capsule.pipeline.State state = 4;
   */
  state = State.UNSPECIFIED;

  /**
   * The statuses of the phases in the pipeline.
   *
   * @generated from field: repeated api.v1.capsule.pipeline.PhaseStatus phase_statuses = 5;
   */
  phaseStatuses: PhaseStatus[] = [];

  /**
   * When the pipeline was started.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 6;
   */
  startedAt?: Timestamp;

  /**
   * When the pipeline was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  /**
   * current phase
   *
   * @generated from field: uint32 current_phase = 8;
   */
  currentPhase = 0;

  constructor(data?: PartialMessage<Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.pipeline.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "execution_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 5, name: "phase_statuses", kind: "message", T: PhaseStatus, repeated: true },
    { no: 6, name: "started_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
    { no: 8, name: "current_phase", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Status {
    return new Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJsonString(jsonString, options);
  }

  static equals(a: Status | PlainMessage<Status> | undefined, b: Status | PlainMessage<Status> | undefined): boolean {
    return proto3.util.equals(Status, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.pipeline.PhaseStatus
 */
export class PhaseStatus extends Message<PhaseStatus> {
  /**
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  /**
   * @generated from field: api.v1.capsule.pipeline.PhaseState state = 2;
   */
  state = PhaseState.UNSPECIFIED;

  /**
   * @generated from field: uint64 rollout_id = 3;
   */
  rolloutId = protoInt64.zero;

  /**
   * @generated from field: repeated api.v1.capsule.pipeline.PhaseMessage messages = 4;
   */
  messages: PhaseMessage[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 5;
   */
  startedAt?: Timestamp;

  constructor(data?: PartialMessage<PhaseStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.pipeline.PhaseStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(PhaseState) },
    { no: 3, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "messages", kind: "message", T: PhaseMessage, repeated: true },
    { no: 5, name: "started_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhaseStatus {
    return new PhaseStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhaseStatus {
    return new PhaseStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhaseStatus {
    return new PhaseStatus().fromJsonString(jsonString, options);
  }

  static equals(a: PhaseStatus | PlainMessage<PhaseStatus> | undefined, b: PhaseStatus | PlainMessage<PhaseStatus> | undefined): boolean {
    return proto3.util.equals(PhaseStatus, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.pipeline.PhaseMessage
 */
export class PhaseMessage extends Message<PhaseMessage> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<PhaseMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.pipeline.PhaseMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhaseMessage {
    return new PhaseMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhaseMessage {
    return new PhaseMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhaseMessage {
    return new PhaseMessage().fromJsonString(jsonString, options);
  }

  static equals(a: PhaseMessage | PlainMessage<PhaseMessage> | undefined, b: PhaseMessage | PlainMessage<PhaseMessage> | undefined): boolean {
    return proto3.util.equals(PhaseMessage, a, b);
  }
}

