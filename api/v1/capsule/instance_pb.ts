// @generated by protoc-gen-es v1.7.1 with parameter "target=ts"
// @generated from file api/v1/capsule/instance.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum api.v1.capsule.State
 */
export enum State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATE_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: STATE_SUCCEEDED = 3;
   */
  SUCCEEDED = 3,

  /**
   * @generated from enum value: STATE_FAILED = 4;
   */
  FAILED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(State)
proto3.util.setEnumType(State, "api.v1.capsule.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_PENDING" },
  { no: 2, name: "STATE_RUNNING" },
  { no: 3, name: "STATE_SUCCEEDED" },
  { no: 4, name: "STATE_FAILED" },
]);

/**
 * @generated from message api.v1.capsule.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string build_id = 2;
   */
  buildId = "";

  /**
   * @generated from field: api.v1.capsule.State state = 3;
   */
  state = State.UNSPECIFIED;

  /**
   * @generated from field: uint32 restart_count = 4;
   */
  restartCount = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 6;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp finished_at = 7;
   */
  finishedAt?: Timestamp;

  /**
   * @generated from field: string message = 8;
   */
  message = "";

  /**
   * @generated from field: uint64 rollout_id = 9;
   */
  rolloutId = protoInt64.zero;

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 4, name: "restart_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "started_at", kind: "message", T: Timestamp },
    { no: 7, name: "finished_at", kind: "message", T: Timestamp },
    { no: 8, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceStatus
 */
export class InstanceStatus extends Message<InstanceStatus> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusData data = 3;
   */
  data?: InstanceStatusData;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusStages stages = 4;
   */
  stages?: InstanceStatusStages;

  constructor(data?: PartialMessage<InstanceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "data", kind: "message", T: InstanceStatusData },
    { no: 4, name: "stages", kind: "message", T: InstanceStatusStages },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatus {
    return new InstanceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatus {
    return new InstanceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatus {
    return new InstanceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatus | PlainMessage<InstanceStatus> | undefined, b: InstanceStatus | PlainMessage<InstanceStatus> | undefined): boolean {
    return proto3.util.equals(InstanceStatus, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceStatusData
 */
export class InstanceStatusData extends Message<InstanceStatusData> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * @generated from field: string image_name = 3;
   */
  imageName = "";

  /**
   * @generated from field: string node = 4;
   */
  node = "";

  constructor(data?: PartialMessage<InstanceStatusData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "image_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusData {
    return new InstanceStatusData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusData {
    return new InstanceStatusData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusData {
    return new InstanceStatusData().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusData | PlainMessage<InstanceStatusData> | undefined, b: InstanceStatusData | PlainMessage<InstanceStatusData> | undefined): boolean {
    return proto3.util.equals(InstanceStatusData, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceStatusStages
 */
export class InstanceStatusStages extends Message<InstanceStatusStages> {
  /**
   * @generated from field: api.v1.capsule.InstanceStatusScheduling schedule = 1;
   */
  schedule?: InstanceStatusScheduling;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusPreparing preparing = 2;
   */
  preparing?: InstanceStatusPreparing;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusRunning running = 3;
   */
  running?: InstanceStatusRunning;

  constructor(data?: PartialMessage<InstanceStatusStages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusStages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: InstanceStatusScheduling },
    { no: 2, name: "preparing", kind: "message", T: InstanceStatusPreparing },
    { no: 3, name: "running", kind: "message", T: InstanceStatusRunning },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusStages {
    return new InstanceStatusStages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusStages {
    return new InstanceStatusStages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusStages {
    return new InstanceStatusStages().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusStages | PlainMessage<InstanceStatusStages> | undefined, b: InstanceStatusStages | PlainMessage<InstanceStatusStages> | undefined): boolean {
    return proto3.util.equals(InstanceStatusStages, a, b);
  }
}

/**
 * ====================== SCHEDULING ====================
 *
 * @generated from message api.v1.capsule.InstanceStatusScheduling
 */
export class InstanceStatusScheduling extends Message<InstanceStatusScheduling> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusSchedulingStages stages = 3;
   */
  stages?: InstanceStatusSchedulingStages;

  constructor(data?: PartialMessage<InstanceStatusScheduling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusScheduling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: InstanceStatusSchedulingStages },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusScheduling {
    return new InstanceStatusScheduling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusScheduling {
    return new InstanceStatusScheduling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusScheduling {
    return new InstanceStatusScheduling().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusScheduling | PlainMessage<InstanceStatusScheduling> | undefined, b: InstanceStatusScheduling | PlainMessage<InstanceStatusScheduling> | undefined): boolean {
    return proto3.util.equals(InstanceStatusScheduling, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceStatusSchedulingStages
 */
export class InstanceStatusSchedulingStages extends Message<InstanceStatusSchedulingStages> {
  /**
   * @generated from field: api.v1.capsule.CurrentlyUnscheduleable currently_unscheduleable = 1;
   */
  currentlyUnscheduleable?: CurrentlyUnscheduleable;

  /**
   * @generated from field: api.v1.capsule.DoneScheduling done = 2;
   */
  done?: DoneScheduling;

  constructor(data?: PartialMessage<InstanceStatusSchedulingStages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusSchedulingStages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currently_unscheduleable", kind: "message", T: CurrentlyUnscheduleable },
    { no: 2, name: "done", kind: "message", T: DoneScheduling },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusSchedulingStages {
    return new InstanceStatusSchedulingStages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusSchedulingStages {
    return new InstanceStatusSchedulingStages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusSchedulingStages {
    return new InstanceStatusSchedulingStages().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusSchedulingStages | PlainMessage<InstanceStatusSchedulingStages> | undefined, b: InstanceStatusSchedulingStages | PlainMessage<InstanceStatusSchedulingStages> | undefined): boolean {
    return proto3.util.equals(InstanceStatusSchedulingStages, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CurrentlyUnscheduleable
 */
export class CurrentlyUnscheduleable extends Message<CurrentlyUnscheduleable> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<CurrentlyUnscheduleable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CurrentlyUnscheduleable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentlyUnscheduleable {
    return new CurrentlyUnscheduleable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentlyUnscheduleable {
    return new CurrentlyUnscheduleable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentlyUnscheduleable {
    return new CurrentlyUnscheduleable().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentlyUnscheduleable | PlainMessage<CurrentlyUnscheduleable> | undefined, b: CurrentlyUnscheduleable | PlainMessage<CurrentlyUnscheduleable> | undefined): boolean {
    return proto3.util.equals(CurrentlyUnscheduleable, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DoneScheduling
 */
export class DoneScheduling extends Message<DoneScheduling> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<DoneScheduling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DoneScheduling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoneScheduling {
    return new DoneScheduling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoneScheduling {
    return new DoneScheduling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoneScheduling {
    return new DoneScheduling().fromJsonString(jsonString, options);
  }

  static equals(a: DoneScheduling | PlainMessage<DoneScheduling> | undefined, b: DoneScheduling | PlainMessage<DoneScheduling> | undefined): boolean {
    return proto3.util.equals(DoneScheduling, a, b);
  }
}

/**
 * ======================= PREPARING =====================
 *
 * @generated from message api.v1.capsule.InstanceStatusPreparing
 */
export class InstanceStatusPreparing extends Message<InstanceStatusPreparing> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusPreparingStages stages = 3;
   */
  stages?: InstanceStatusPreparingStages;

  constructor(data?: PartialMessage<InstanceStatusPreparing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusPreparing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: InstanceStatusPreparingStages },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusPreparing {
    return new InstanceStatusPreparing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusPreparing {
    return new InstanceStatusPreparing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusPreparing {
    return new InstanceStatusPreparing().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusPreparing | PlainMessage<InstanceStatusPreparing> | undefined, b: InstanceStatusPreparing | PlainMessage<InstanceStatusPreparing> | undefined): boolean {
    return proto3.util.equals(InstanceStatusPreparing, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceStatusPreparingStages
 */
export class InstanceStatusPreparingStages extends Message<InstanceStatusPreparingStages> {
  /**
   * @generated from field: api.v1.capsule.ImagePulling pulling = 1;
   */
  pulling?: ImagePulling;

  constructor(data?: PartialMessage<InstanceStatusPreparingStages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusPreparingStages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pulling", kind: "message", T: ImagePulling },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusPreparingStages {
    return new InstanceStatusPreparingStages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusPreparingStages {
    return new InstanceStatusPreparingStages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusPreparingStages {
    return new InstanceStatusPreparingStages().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusPreparingStages | PlainMessage<InstanceStatusPreparingStages> | undefined, b: InstanceStatusPreparingStages | PlainMessage<InstanceStatusPreparingStages> | undefined): boolean {
    return proto3.util.equals(InstanceStatusPreparingStages, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ImagePulling
 */
export class ImagePulling extends Message<ImagePulling> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  /**
   * @generated from field: api.v1.capsule.ImagePullingStages stages = 3;
   */
  stages?: ImagePullingStages;

  constructor(data?: PartialMessage<ImagePulling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ImagePulling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: ImagePullingStages },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImagePulling {
    return new ImagePulling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImagePulling {
    return new ImagePulling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImagePulling {
    return new ImagePulling().fromJsonString(jsonString, options);
  }

  static equals(a: ImagePulling | PlainMessage<ImagePulling> | undefined, b: ImagePulling | PlainMessage<ImagePulling> | undefined): boolean {
    return proto3.util.equals(ImagePulling, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ImagePullingStages
 */
export class ImagePullingStages extends Message<ImagePullingStages> {
  /**
   * @generated from field: api.v1.capsule.ImagePullingPulling pulling = 1;
   */
  pulling?: ImagePullingPulling;

  /**
   * @generated from field: api.v1.capsule.ImagePullingError error = 2;
   */
  error?: ImagePullingError;

  /**
   * @generated from field: api.v1.capsule.ImagePullingBackOff back_off = 3;
   */
  backOff?: ImagePullingBackOff;

  /**
   * @generated from field: api.v1.capsule.ImagePullingDone done = 4;
   */
  done?: ImagePullingDone;

  constructor(data?: PartialMessage<ImagePullingStages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ImagePullingStages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pulling", kind: "message", T: ImagePullingPulling },
    { no: 2, name: "error", kind: "message", T: ImagePullingError },
    { no: 3, name: "back_off", kind: "message", T: ImagePullingBackOff },
    { no: 4, name: "done", kind: "message", T: ImagePullingDone },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImagePullingStages {
    return new ImagePullingStages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImagePullingStages {
    return new ImagePullingStages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImagePullingStages {
    return new ImagePullingStages().fromJsonString(jsonString, options);
  }

  static equals(a: ImagePullingStages | PlainMessage<ImagePullingStages> | undefined, b: ImagePullingStages | PlainMessage<ImagePullingStages> | undefined): boolean {
    return proto3.util.equals(ImagePullingStages, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ImagePullingPulling
 */
export class ImagePullingPulling extends Message<ImagePullingPulling> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<ImagePullingPulling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ImagePullingPulling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImagePullingPulling {
    return new ImagePullingPulling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImagePullingPulling {
    return new ImagePullingPulling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImagePullingPulling {
    return new ImagePullingPulling().fromJsonString(jsonString, options);
  }

  static equals(a: ImagePullingPulling | PlainMessage<ImagePullingPulling> | undefined, b: ImagePullingPulling | PlainMessage<ImagePullingPulling> | undefined): boolean {
    return proto3.util.equals(ImagePullingPulling, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ImagePullingError
 */
export class ImagePullingError extends Message<ImagePullingError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<ImagePullingError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ImagePullingError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImagePullingError {
    return new ImagePullingError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImagePullingError {
    return new ImagePullingError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImagePullingError {
    return new ImagePullingError().fromJsonString(jsonString, options);
  }

  static equals(a: ImagePullingError | PlainMessage<ImagePullingError> | undefined, b: ImagePullingError | PlainMessage<ImagePullingError> | undefined): boolean {
    return proto3.util.equals(ImagePullingError, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ImagePullingBackOff
 */
export class ImagePullingBackOff extends Message<ImagePullingBackOff> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<ImagePullingBackOff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ImagePullingBackOff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImagePullingBackOff {
    return new ImagePullingBackOff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImagePullingBackOff {
    return new ImagePullingBackOff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImagePullingBackOff {
    return new ImagePullingBackOff().fromJsonString(jsonString, options);
  }

  static equals(a: ImagePullingBackOff | PlainMessage<ImagePullingBackOff> | undefined, b: ImagePullingBackOff | PlainMessage<ImagePullingBackOff> | undefined): boolean {
    return proto3.util.equals(ImagePullingBackOff, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ImagePullingDone
 */
export class ImagePullingDone extends Message<ImagePullingDone> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<ImagePullingDone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ImagePullingDone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImagePullingDone {
    return new ImagePullingDone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImagePullingDone {
    return new ImagePullingDone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImagePullingDone {
    return new ImagePullingDone().fromJsonString(jsonString, options);
  }

  static equals(a: ImagePullingDone | PlainMessage<ImagePullingDone> | undefined, b: ImagePullingDone | PlainMessage<ImagePullingDone> | undefined): boolean {
    return proto3.util.equals(ImagePullingDone, a, b);
  }
}

/**
 * ======================== RUNNING ======================
 *
 * @generated from message api.v1.capsule.InstanceStatusRunning
 */
export class InstanceStatusRunning extends Message<InstanceStatusRunning> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusRunningStages stages = 3;
   */
  stages?: InstanceStatusRunningStages;

  /**
   * @generated from field: api.v1.capsule.InstanceStatusRunningData data = 4;
   */
  data?: InstanceStatusRunningData;

  constructor(data?: PartialMessage<InstanceStatusRunning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusRunning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: InstanceStatusRunningStages },
    { no: 4, name: "data", kind: "message", T: InstanceStatusRunningData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusRunning {
    return new InstanceStatusRunning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusRunning {
    return new InstanceStatusRunning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusRunning {
    return new InstanceStatusRunning().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusRunning | PlainMessage<InstanceStatusRunning> | undefined, b: InstanceStatusRunning | PlainMessage<InstanceStatusRunning> | undefined): boolean {
    return proto3.util.equals(InstanceStatusRunning, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceStatusRunningData
 */
export class InstanceStatusRunningData extends Message<InstanceStatusRunningData> {
  /**
   * @generated from field: uint32 restarts = 1;
   */
  restarts = 0;

  constructor(data?: PartialMessage<InstanceStatusRunningData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusRunningData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "restarts", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusRunningData {
    return new InstanceStatusRunningData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusRunningData {
    return new InstanceStatusRunningData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusRunningData {
    return new InstanceStatusRunningData().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusRunningData | PlainMessage<InstanceStatusRunningData> | undefined, b: InstanceStatusRunningData | PlainMessage<InstanceStatusRunningData> | undefined): boolean {
    return proto3.util.equals(InstanceStatusRunningData, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceStatusRunningStages
 */
export class InstanceStatusRunningStages extends Message<InstanceStatusRunningStages> {
  /**
   * @generated from field: api.v1.capsule.CrashLoopBackoff crash_loop_backoff = 1;
   */
  crashLoopBackoff?: CrashLoopBackoff;

  /**
   * @generated from field: api.v1.capsule.Ready ready = 2;
   */
  ready?: Ready;

  /**
   * @generated from field: api.v1.capsule.Running running = 3;
   */
  running?: Running;

  constructor(data?: PartialMessage<InstanceStatusRunningStages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceStatusRunningStages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "crash_loop_backoff", kind: "message", T: CrashLoopBackoff },
    { no: 2, name: "ready", kind: "message", T: Ready },
    { no: 3, name: "running", kind: "message", T: Running },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceStatusRunningStages {
    return new InstanceStatusRunningStages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceStatusRunningStages {
    return new InstanceStatusRunningStages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceStatusRunningStages {
    return new InstanceStatusRunningStages().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceStatusRunningStages | PlainMessage<InstanceStatusRunningStages> | undefined, b: InstanceStatusRunningStages | PlainMessage<InstanceStatusRunningStages> | undefined): boolean {
    return proto3.util.equals(InstanceStatusRunningStages, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CrashLoopBackoff
 */
export class CrashLoopBackoff extends Message<CrashLoopBackoff> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  /**
   * @generated from field: api.v1.capsule.CrashLoopBackoffData data = 3;
   */
  data?: CrashLoopBackoffData;

  constructor(data?: PartialMessage<CrashLoopBackoff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CrashLoopBackoff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "data", kind: "message", T: CrashLoopBackoffData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CrashLoopBackoff {
    return new CrashLoopBackoff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CrashLoopBackoff {
    return new CrashLoopBackoff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CrashLoopBackoff {
    return new CrashLoopBackoff().fromJsonString(jsonString, options);
  }

  static equals(a: CrashLoopBackoff | PlainMessage<CrashLoopBackoff> | undefined, b: CrashLoopBackoff | PlainMessage<CrashLoopBackoff> | undefined): boolean {
    return proto3.util.equals(CrashLoopBackoff, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CrashLoopBackoffData
 */
export class CrashLoopBackoffData extends Message<CrashLoopBackoffData> {
  /**
   * @generated from field: api.v1.capsule.ContainerStateTerminated termination = 1;
   */
  termination?: ContainerStateTerminated;

  constructor(data?: PartialMessage<CrashLoopBackoffData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CrashLoopBackoffData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "termination", kind: "message", T: ContainerStateTerminated },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CrashLoopBackoffData {
    return new CrashLoopBackoffData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CrashLoopBackoffData {
    return new CrashLoopBackoffData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CrashLoopBackoffData {
    return new CrashLoopBackoffData().fromJsonString(jsonString, options);
  }

  static equals(a: CrashLoopBackoffData | PlainMessage<CrashLoopBackoffData> | undefined, b: CrashLoopBackoffData | PlainMessage<CrashLoopBackoffData> | undefined): boolean {
    return proto3.util.equals(CrashLoopBackoffData, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Running
 */
export class Running extends Message<Running> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<Running>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Running";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Running {
    return new Running().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Running {
    return new Running().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Running {
    return new Running().fromJsonString(jsonString, options);
  }

  static equals(a: Running | PlainMessage<Running> | undefined, b: Running | PlainMessage<Running> | undefined): boolean {
    return proto3.util.equals(Running, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Ready
 */
export class Ready extends Message<Ready> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  /**
   * @generated from field: api.v1.capsule.ReadyStages stages = 3;
   */
  stages?: ReadyStages;

  constructor(data?: PartialMessage<Ready>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Ready";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: ReadyStages },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ready {
    return new Ready().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ready {
    return new Ready().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ready {
    return new Ready().fromJsonString(jsonString, options);
  }

  static equals(a: Ready | PlainMessage<Ready> | undefined, b: Ready | PlainMessage<Ready> | undefined): boolean {
    return proto3.util.equals(Ready, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ReadyStages
 */
export class ReadyStages extends Message<ReadyStages> {
  /**
   * @generated from field: api.v1.capsule.NotReady not_ready = 1;
   */
  notReady?: NotReady;

  /**
   * @generated from field: api.v1.capsule.InstanceReady ready = 2;
   */
  ready?: InstanceReady;

  constructor(data?: PartialMessage<ReadyStages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ReadyStages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "not_ready", kind: "message", T: NotReady },
    { no: 2, name: "ready", kind: "message", T: InstanceReady },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadyStages {
    return new ReadyStages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadyStages {
    return new ReadyStages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadyStages {
    return new ReadyStages().fromJsonString(jsonString, options);
  }

  static equals(a: ReadyStages | PlainMessage<ReadyStages> | undefined, b: ReadyStages | PlainMessage<ReadyStages> | undefined): boolean {
    return proto3.util.equals(ReadyStages, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.NotReady
 */
export class NotReady extends Message<NotReady> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<NotReady>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.NotReady";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotReady {
    return new NotReady().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotReady {
    return new NotReady().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotReady {
    return new NotReady().fromJsonString(jsonString, options);
  }

  static equals(a: NotReady | PlainMessage<NotReady> | undefined, b: NotReady | PlainMessage<NotReady> | undefined): boolean {
    return proto3.util.equals(NotReady, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceReady
 */
export class InstanceReady extends Message<InstanceReady> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: api.v1.capsule.StatusTimestamps timestamps = 2;
   */
  timestamps?: StatusTimestamps;

  constructor(data?: PartialMessage<InstanceReady>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceReady";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceReady {
    return new InstanceReady().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceReady {
    return new InstanceReady().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceReady {
    return new InstanceReady().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceReady | PlainMessage<InstanceReady> | undefined, b: InstanceReady | PlainMessage<InstanceReady> | undefined): boolean {
    return proto3.util.equals(InstanceReady, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ContainerStateTerminated
 */
export class ContainerStateTerminated extends Message<ContainerStateTerminated> {
  /**
   * Exit status from the last termination of the container
   *
   * @generated from field: int32 exit_code = 1;
   */
  exitCode = 0;

  /**
   * Signal from the last termination of the container
   * +optional
   *
   * @generated from field: int32 signal = 2;
   */
  signal = 0;

  /**
   * (brief) reason from the last termination of the container
   * +optional
   *
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * Message regarding the last termination of the container
   * +optional
   *
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * Time at which previous execution of the container started
   * +optional
   *
   * @generated from field: google.protobuf.Timestamp started_at = 5;
   */
  startedAt?: Timestamp;

  /**
   * Time at which the container last terminated
   * +optional
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 6;
   */
  finishedAt?: Timestamp;

  /**
   * Container's ID in the format 'type://container_id'
   * +optional
   *
   * @generated from field: string container_id = 7;
   */
  containerId = "";

  constructor(data?: PartialMessage<ContainerStateTerminated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ContainerStateTerminated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "signal", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "started_at", kind: "message", T: Timestamp },
    { no: 6, name: "finished_at", kind: "message", T: Timestamp },
    { no: 7, name: "container_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerStateTerminated {
    return new ContainerStateTerminated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerStateTerminated {
    return new ContainerStateTerminated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerStateTerminated {
    return new ContainerStateTerminated().fromJsonString(jsonString, options);
  }

  static equals(a: ContainerStateTerminated | PlainMessage<ContainerStateTerminated> | undefined, b: ContainerStateTerminated | PlainMessage<ContainerStateTerminated> | undefined): boolean {
    return proto3.util.equals(ContainerStateTerminated, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.StatusTimestamps
 */
export class StatusTimestamps extends Message<StatusTimestamps> {
  /**
   * @generated from field: google.protobuf.Timestamp entered = 1;
   */
  entered?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated = 2;
   */
  updated?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp exited = 3;
   */
  exited?: Timestamp;

  constructor(data?: PartialMessage<StatusTimestamps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.StatusTimestamps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entered", kind: "message", T: Timestamp },
    { no: 2, name: "updated", kind: "message", T: Timestamp },
    { no: 3, name: "exited", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusTimestamps {
    return new StatusTimestamps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusTimestamps {
    return new StatusTimestamps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusTimestamps {
    return new StatusTimestamps().fromJsonString(jsonString, options);
  }

  static equals(a: StatusTimestamps | PlainMessage<StatusTimestamps> | undefined, b: StatusTimestamps | PlainMessage<StatusTimestamps> | undefined): boolean {
    return proto3.util.equals(StatusTimestamps, a, b);
  }
}

