// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/capsule/revision.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Capsule, CapsuleSet } from "../../../platform/v1/generated_pb.js";
import { ProposalMetadata, RevisionMetadata } from "../../../model/revision_pb.js";
import { Change } from "./change_pb.js";

/**
 * @generated from message api.v1.capsule.SetRevision
 */
export class SetRevision extends Message<SetRevision> {
  /**
   * @generated from field: platform.v1.CapsuleSet spec = 1;
   */
  spec?: CapsuleSet;

  /**
   * @generated from field: model.RevisionMetadata metadata = 2;
   */
  metadata?: RevisionMetadata;

  constructor(data?: PartialMessage<SetRevision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.SetRevision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: CapsuleSet },
    { no: 2, name: "metadata", kind: "message", T: RevisionMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRevision {
    return new SetRevision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRevision {
    return new SetRevision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRevision {
    return new SetRevision().fromJsonString(jsonString, options);
  }

  static equals(a: SetRevision | PlainMessage<SetRevision> | undefined, b: SetRevision | PlainMessage<SetRevision> | undefined): boolean {
    return proto3.util.equals(SetRevision, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Revision
 */
export class Revision extends Message<Revision> {
  /**
   * @generated from field: platform.v1.Capsule spec = 1;
   */
  spec?: Capsule;

  /**
   * @generated from field: model.RevisionMetadata metadata = 2;
   */
  metadata?: RevisionMetadata;

  /**
   * @generated from field: repeated api.v1.capsule.Change changes = 3;
   */
  changes: Change[] = [];

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<Revision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Revision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Capsule },
    { no: 2, name: "metadata", kind: "message", T: RevisionMetadata },
    { no: 3, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Revision {
    return new Revision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Revision {
    return new Revision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Revision {
    return new Revision().fromJsonString(jsonString, options);
  }

  static equals(a: Revision | PlainMessage<Revision> | undefined, b: Revision | PlainMessage<Revision> | undefined): boolean {
    return proto3.util.equals(Revision, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Proposal
 */
export class Proposal extends Message<Proposal> {
  /**
   * @generated from field: platform.v1.Capsule spec = 1;
   */
  spec?: Capsule;

  /**
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * @generated from field: model.ProposalMetadata metadata = 3;
   */
  metadata?: ProposalMetadata;

  constructor(data?: PartialMessage<Proposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Proposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Capsule },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "metadata", kind: "message", T: ProposalMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proposal {
    return new Proposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proposal {
    return new Proposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proposal {
    return new Proposal().fromJsonString(jsonString, options);
  }

  static equals(a: Proposal | PlainMessage<Proposal> | undefined, b: Proposal | PlainMessage<Proposal> | undefined): boolean {
    return proto3.util.equals(Proposal, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.SetProposal
 */
export class SetProposal extends Message<SetProposal> {
  /**
   * @generated from field: platform.v1.CapsuleSet spec = 1;
   */
  spec?: CapsuleSet;

  /**
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * @generated from field: model.ProposalMetadata metadata = 3;
   */
  metadata?: ProposalMetadata;

  constructor(data?: PartialMessage<SetProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.SetProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: CapsuleSet },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "metadata", kind: "message", T: ProposalMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetProposal {
    return new SetProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetProposal {
    return new SetProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetProposal {
    return new SetProposal().fromJsonString(jsonString, options);
  }

  static equals(a: SetProposal | PlainMessage<SetProposal> | undefined, b: SetProposal | PlainMessage<SetProposal> | undefined): boolean {
    return proto3.util.equals(SetProposal, a, b);
  }
}

