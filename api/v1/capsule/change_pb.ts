// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/change.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CronJob } from "./job_pb.js";

/**
 * @generated from message api.v1.capsule.Change
 */
export class Change extends Message<Change> {
  /**
   * @generated from oneof api.v1.capsule.Change.field
   */
  field: {
    /**
     * @generated from field: uint32 replicas = 1;
     */
    value: number;
    case: "replicas";
  } | {
    /**
     * @generated from field: string build_id = 2;
     */
    value: string;
    case: "buildId";
  } | {
    /**
     * @generated from field: api.v1.capsule.Network network = 3;
     */
    value: Network;
    case: "network";
  } | {
    /**
     * @generated from field: api.v1.capsule.ContainerSettings container_settings = 4;
     */
    value: ContainerSettings;
    case: "containerSettings";
  } | {
    /**
     * @generated from field: bool auto_add_rig_service_accounts = 5;
     */
    value: boolean;
    case: "autoAddRigServiceAccounts";
  } | {
    /**
     * @generated from field: api.v1.capsule.Change.ConfigFile set_config_file = 6;
     */
    value: Change_ConfigFile;
    case: "setConfigFile";
  } | {
    /**
     * @generated from field: string remove_config_file = 7;
     */
    value: string;
    case: "removeConfigFile";
  } | {
    /**
     * @generated from field: api.v1.capsule.HorizontalScale horizontal_scale = 8;
     */
    value: HorizontalScale;
    case: "horizontalScale";
  } | {
    /**
     * @generated from field: api.v1.capsule.Change.Rollback rollback = 9;
     */
    value: Change_Rollback;
    case: "rollback";
  } | {
    /**
     * @generated from field: api.v1.capsule.Change.CronJobs cron_jobs = 10;
     */
    value: Change_CronJobs;
    case: "cronJobs";
  } | {
    /**
     * @generated from field: api.v1.capsule.Change.EnvironmentVariable set_environment_variable = 11;
     */
    value: Change_EnvironmentVariable;
    case: "setEnvironmentVariable";
  } | {
    /**
     * @generated from field: string remove_environment_variable = 12;
     */
    value: string;
    case: "removeEnvironmentVariable";
  } | {
    /**
     * @generated from field: api.v1.capsule.EnvironmentSource set_environment_source = 13;
     */
    value: EnvironmentSource;
    case: "setEnvironmentSource";
  } | {
    /**
     * @generated from field: api.v1.capsule.EnvironmentSource remove_environment_source = 14;
     */
    value: EnvironmentSource;
    case: "removeEnvironmentSource";
  } | {
    /**
     * @generated from field: api.v1.capsule.Change.CommandArguments command_arguments = 15;
     */
    value: Change_CommandArguments;
    case: "commandArguments";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "field" },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "network", kind: "message", T: Network, oneof: "field" },
    { no: 4, name: "container_settings", kind: "message", T: ContainerSettings, oneof: "field" },
    { no: 5, name: "auto_add_rig_service_accounts", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 6, name: "set_config_file", kind: "message", T: Change_ConfigFile, oneof: "field" },
    { no: 7, name: "remove_config_file", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 8, name: "horizontal_scale", kind: "message", T: HorizontalScale, oneof: "field" },
    { no: 9, name: "rollback", kind: "message", T: Change_Rollback, oneof: "field" },
    { no: 10, name: "cron_jobs", kind: "message", T: Change_CronJobs, oneof: "field" },
    { no: 11, name: "set_environment_variable", kind: "message", T: Change_EnvironmentVariable, oneof: "field" },
    { no: 12, name: "remove_environment_variable", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 13, name: "set_environment_source", kind: "message", T: EnvironmentSource, oneof: "field" },
    { no: 14, name: "remove_environment_source", kind: "message", T: EnvironmentSource, oneof: "field" },
    { no: 15, name: "command_arguments", kind: "message", T: Change_CommandArguments, oneof: "field" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Change.ConfigFile
 */
export class Change_ConfigFile extends Message<Change_ConfigFile> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  /**
   * @generated from field: bool is_secret = 3;
   */
  isSecret = false;

  constructor(data?: PartialMessage<Change_ConfigFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Change.ConfigFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "is_secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_ConfigFile {
    return new Change_ConfigFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_ConfigFile {
    return new Change_ConfigFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_ConfigFile {
    return new Change_ConfigFile().fromJsonString(jsonString, options);
  }

  static equals(a: Change_ConfigFile | PlainMessage<Change_ConfigFile> | undefined, b: Change_ConfigFile | PlainMessage<Change_ConfigFile> | undefined): boolean {
    return proto3.util.equals(Change_ConfigFile, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Change.Rollback
 */
export class Change_Rollback extends Message<Change_Rollback> {
  /**
   * @generated from field: uint64 rollback_id = 1;
   */
  rollbackId = protoInt64.zero;

  constructor(data?: PartialMessage<Change_Rollback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Change.Rollback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollback_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_Rollback {
    return new Change_Rollback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_Rollback {
    return new Change_Rollback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_Rollback {
    return new Change_Rollback().fromJsonString(jsonString, options);
  }

  static equals(a: Change_Rollback | PlainMessage<Change_Rollback> | undefined, b: Change_Rollback | PlainMessage<Change_Rollback> | undefined): boolean {
    return proto3.util.equals(Change_Rollback, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Change.CronJobs
 */
export class Change_CronJobs extends Message<Change_CronJobs> {
  /**
   * @generated from field: repeated api.v1.capsule.CronJob jobs = 1;
   */
  jobs: CronJob[] = [];

  constructor(data?: PartialMessage<Change_CronJobs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Change.CronJobs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jobs", kind: "message", T: CronJob, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_CronJobs {
    return new Change_CronJobs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_CronJobs {
    return new Change_CronJobs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_CronJobs {
    return new Change_CronJobs().fromJsonString(jsonString, options);
  }

  static equals(a: Change_CronJobs | PlainMessage<Change_CronJobs> | undefined, b: Change_CronJobs | PlainMessage<Change_CronJobs> | undefined): boolean {
    return proto3.util.equals(Change_CronJobs, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Change.EnvironmentVariable
 */
export class Change_EnvironmentVariable extends Message<Change_EnvironmentVariable> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Change_EnvironmentVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Change.EnvironmentVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_EnvironmentVariable {
    return new Change_EnvironmentVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_EnvironmentVariable {
    return new Change_EnvironmentVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_EnvironmentVariable {
    return new Change_EnvironmentVariable().fromJsonString(jsonString, options);
  }

  static equals(a: Change_EnvironmentVariable | PlainMessage<Change_EnvironmentVariable> | undefined, b: Change_EnvironmentVariable | PlainMessage<Change_EnvironmentVariable> | undefined): boolean {
    return proto3.util.equals(Change_EnvironmentVariable, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Change.CommandArguments
 */
export class Change_CommandArguments extends Message<Change_CommandArguments> {
  /**
   * @generated from field: string command = 2;
   */
  command = "";

  /**
   * @generated from field: repeated string args = 3;
   */
  args: string[] = [];

  constructor(data?: PartialMessage<Change_CommandArguments>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Change.CommandArguments";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change_CommandArguments {
    return new Change_CommandArguments().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change_CommandArguments {
    return new Change_CommandArguments().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change_CommandArguments {
    return new Change_CommandArguments().fromJsonString(jsonString, options);
  }

  static equals(a: Change_CommandArguments | PlainMessage<Change_CommandArguments> | undefined, b: Change_CommandArguments | PlainMessage<Change_CommandArguments> | undefined): boolean {
    return proto3.util.equals(Change_CommandArguments, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ContainerSettings
 */
export class ContainerSettings extends Message<ContainerSettings> {
  /**
   * @generated from field: map<string, string> environment_variables = 1;
   */
  environmentVariables: { [key: string]: string } = {};

  /**
   * @generated from field: string command = 2;
   */
  command = "";

  /**
   * @generated from field: repeated string args = 3;
   */
  args: string[] = [];

  /**
   * @generated from field: api.v1.capsule.Resources resources = 4;
   */
  resources?: Resources;

  /**
   * @generated from field: repeated api.v1.capsule.EnvironmentSource environment_sources = 5;
   */
  environmentSources: EnvironmentSource[] = [];

  constructor(data?: PartialMessage<ContainerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ContainerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "resources", kind: "message", T: Resources },
    { no: 5, name: "environment_sources", kind: "message", T: EnvironmentSource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerSettings {
    return new ContainerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerSettings {
    return new ContainerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerSettings {
    return new ContainerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: ContainerSettings | PlainMessage<ContainerSettings> | undefined, b: ContainerSettings | PlainMessage<ContainerSettings> | undefined): boolean {
    return proto3.util.equals(ContainerSettings, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Resources
 */
export class Resources extends Message<Resources> {
  /**
   * @generated from field: api.v1.capsule.ResourceList requests = 1;
   */
  requests?: ResourceList;

  /**
   * @generated from field: api.v1.capsule.ResourceList limits = 2;
   */
  limits?: ResourceList;

  /**
   * @generated from field: api.v1.capsule.GpuLimits gpu_limits = 3;
   */
  gpuLimits?: GpuLimits;

  constructor(data?: PartialMessage<Resources>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Resources";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: ResourceList },
    { no: 2, name: "limits", kind: "message", T: ResourceList },
    { no: 3, name: "gpu_limits", kind: "message", T: GpuLimits },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resources {
    return new Resources().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJsonString(jsonString, options);
  }

  static equals(a: Resources | PlainMessage<Resources> | undefined, b: Resources | PlainMessage<Resources> | undefined): boolean {
    return proto3.util.equals(Resources, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ResourceList
 */
export class ResourceList extends Message<ResourceList> {
  /**
   * Unit: milli-CPUs
   *
   * @generated from field: uint32 cpu_millis = 1;
   */
  cpuMillis = 0;

  /**
   * Unit: Bytes
   *
   * @generated from field: uint64 memory_bytes = 2;
   */
  memoryBytes = protoInt64.zero;

  constructor(data?: PartialMessage<ResourceList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ResourceList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu_millis", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "memory_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceList {
    return new ResourceList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceList {
    return new ResourceList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceList {
    return new ResourceList().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceList | PlainMessage<ResourceList> | undefined, b: ResourceList | PlainMessage<ResourceList> | undefined): boolean {
    return proto3.util.equals(ResourceList, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GpuLimits
 */
export class GpuLimits extends Message<GpuLimits> {
  /**
   * gpu resource type - fx. nvidia.com/gpu
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * number of gpus
   *
   * @generated from field: uint32 count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<GpuLimits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GpuLimits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GpuLimits {
    return new GpuLimits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GpuLimits {
    return new GpuLimits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GpuLimits {
    return new GpuLimits().fromJsonString(jsonString, options);
  }

  static equals(a: GpuLimits | PlainMessage<GpuLimits> | undefined, b: GpuLimits | PlainMessage<GpuLimits> | undefined): boolean {
    return proto3.util.equals(GpuLimits, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.EnvironmentSource
 */
export class EnvironmentSource extends Message<EnvironmentSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: api.v1.capsule.EnvironmentSource.Kind kind = 2;
   */
  kind = EnvironmentSource_Kind.UNSPECIFIED;

  constructor(data?: PartialMessage<EnvironmentSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.EnvironmentSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(EnvironmentSource_Kind) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentSource {
    return new EnvironmentSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentSource {
    return new EnvironmentSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentSource {
    return new EnvironmentSource().fromJsonString(jsonString, options);
  }

  static equals(a: EnvironmentSource | PlainMessage<EnvironmentSource> | undefined, b: EnvironmentSource | PlainMessage<EnvironmentSource> | undefined): boolean {
    return proto3.util.equals(EnvironmentSource, a, b);
  }
}

/**
 * @generated from enum api.v1.capsule.EnvironmentSource.Kind
 */
export enum EnvironmentSource_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KIND_CONFIG_MAP = 1;
   */
  CONFIG_MAP = 1,

  /**
   * @generated from enum value: KIND_SECRET = 2;
   */
  SECRET = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EnvironmentSource_Kind)
proto3.util.setEnumType(EnvironmentSource_Kind, "api.v1.capsule.EnvironmentSource.Kind", [
  { no: 0, name: "KIND_UNSPECIFIED" },
  { no: 1, name: "KIND_CONFIG_MAP" },
  { no: 2, name: "KIND_SECRET" },
]);

/**
 * @generated from message api.v1.capsule.Network
 */
export class Network extends Message<Network> {
  /**
   * @generated from field: repeated api.v1.capsule.Interface interfaces = 1;
   */
  interfaces: Interface[] = [];

  constructor(data?: PartialMessage<Network>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Network";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interfaces", kind: "message", T: Interface, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Network {
    return new Network().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Network {
    return new Network().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Network {
    return new Network().fromJsonString(jsonString, options);
  }

  static equals(a: Network | PlainMessage<Network> | undefined, b: Network | PlainMessage<Network> | undefined): boolean {
    return proto3.util.equals(Network, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Interface
 */
export class Interface extends Message<Interface> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: api.v1.capsule.PublicInterface public = 4;
   */
  public?: PublicInterface;

  /**
   * @generated from field: api.v1.capsule.InterfaceProbe liveness = 7;
   */
  liveness?: InterfaceProbe;

  /**
   * @generated from field: api.v1.capsule.InterfaceProbe readiness = 8;
   */
  readiness?: InterfaceProbe;

  constructor(data?: PartialMessage<Interface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Interface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public", kind: "message", T: PublicInterface },
    { no: 7, name: "liveness", kind: "message", T: InterfaceProbe },
    { no: 8, name: "readiness", kind: "message", T: InterfaceProbe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Interface {
    return new Interface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Interface {
    return new Interface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Interface {
    return new Interface().fromJsonString(jsonString, options);
  }

  static equals(a: Interface | PlainMessage<Interface> | undefined, b: Interface | PlainMessage<Interface> | undefined): boolean {
    return proto3.util.equals(Interface, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InterfaceProbe
 */
export class InterfaceProbe extends Message<InterfaceProbe> {
  /**
   * @generated from oneof api.v1.capsule.InterfaceProbe.kind
   */
  kind: {
    /**
     * @generated from field: api.v1.capsule.InterfaceProbe.HTTP http = 1;
     */
    value: InterfaceProbe_HTTP;
    case: "http";
  } | {
    /**
     * @generated from field: api.v1.capsule.InterfaceProbe.TCP tcp = 2;
     */
    value: InterfaceProbe_TCP;
    case: "tcp";
  } | {
    /**
     * @generated from field: api.v1.capsule.InterfaceProbe.GRPC grpc = 3;
     */
    value: InterfaceProbe_GRPC;
    case: "grpc";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<InterfaceProbe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InterfaceProbe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "http", kind: "message", T: InterfaceProbe_HTTP, oneof: "kind" },
    { no: 2, name: "tcp", kind: "message", T: InterfaceProbe_TCP, oneof: "kind" },
    { no: 3, name: "grpc", kind: "message", T: InterfaceProbe_GRPC, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceProbe {
    return new InterfaceProbe().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceProbe | PlainMessage<InterfaceProbe> | undefined, b: InterfaceProbe | PlainMessage<InterfaceProbe> | undefined): boolean {
    return proto3.util.equals(InterfaceProbe, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InterfaceProbe.HTTP
 */
export class InterfaceProbe_HTTP extends Message<InterfaceProbe_HTTP> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<InterfaceProbe_HTTP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InterfaceProbe.HTTP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceProbe_HTTP {
    return new InterfaceProbe_HTTP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceProbe_HTTP {
    return new InterfaceProbe_HTTP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceProbe_HTTP {
    return new InterfaceProbe_HTTP().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceProbe_HTTP | PlainMessage<InterfaceProbe_HTTP> | undefined, b: InterfaceProbe_HTTP | PlainMessage<InterfaceProbe_HTTP> | undefined): boolean {
    return proto3.util.equals(InterfaceProbe_HTTP, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InterfaceProbe.TCP
 */
export class InterfaceProbe_TCP extends Message<InterfaceProbe_TCP> {
  constructor(data?: PartialMessage<InterfaceProbe_TCP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InterfaceProbe.TCP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceProbe_TCP {
    return new InterfaceProbe_TCP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceProbe_TCP {
    return new InterfaceProbe_TCP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceProbe_TCP {
    return new InterfaceProbe_TCP().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceProbe_TCP | PlainMessage<InterfaceProbe_TCP> | undefined, b: InterfaceProbe_TCP | PlainMessage<InterfaceProbe_TCP> | undefined): boolean {
    return proto3.util.equals(InterfaceProbe_TCP, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InterfaceProbe.GRPC
 */
export class InterfaceProbe_GRPC extends Message<InterfaceProbe_GRPC> {
  /**
   * @generated from field: string service = 1;
   */
  service = "";

  constructor(data?: PartialMessage<InterfaceProbe_GRPC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InterfaceProbe.GRPC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterfaceProbe_GRPC {
    return new InterfaceProbe_GRPC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterfaceProbe_GRPC {
    return new InterfaceProbe_GRPC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterfaceProbe_GRPC {
    return new InterfaceProbe_GRPC().fromJsonString(jsonString, options);
  }

  static equals(a: InterfaceProbe_GRPC | PlainMessage<InterfaceProbe_GRPC> | undefined, b: InterfaceProbe_GRPC | PlainMessage<InterfaceProbe_GRPC> | undefined): boolean {
    return proto3.util.equals(InterfaceProbe_GRPC, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.PublicInterface
 */
export class PublicInterface extends Message<PublicInterface> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: api.v1.capsule.RoutingMethod method = 2;
   */
  method?: RoutingMethod;

  constructor(data?: PartialMessage<PublicInterface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.PublicInterface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "method", kind: "message", T: RoutingMethod },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicInterface {
    return new PublicInterface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicInterface {
    return new PublicInterface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicInterface {
    return new PublicInterface().fromJsonString(jsonString, options);
  }

  static equals(a: PublicInterface | PlainMessage<PublicInterface> | undefined, b: PublicInterface | PlainMessage<PublicInterface> | undefined): boolean {
    return proto3.util.equals(PublicInterface, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.RoutingMethod
 */
export class RoutingMethod extends Message<RoutingMethod> {
  /**
   * @generated from oneof api.v1.capsule.RoutingMethod.kind
   */
  kind: {
    /**
     * @generated from field: api.v1.capsule.RoutingMethod.LoadBalancer load_balancer = 1;
     */
    value: RoutingMethod_LoadBalancer;
    case: "loadBalancer";
  } | {
    /**
     * @generated from field: api.v1.capsule.RoutingMethod.Ingress ingress = 2;
     */
    value: RoutingMethod_Ingress;
    case: "ingress";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RoutingMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RoutingMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "load_balancer", kind: "message", T: RoutingMethod_LoadBalancer, oneof: "kind" },
    { no: 2, name: "ingress", kind: "message", T: RoutingMethod_Ingress, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoutingMethod {
    return new RoutingMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoutingMethod {
    return new RoutingMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoutingMethod {
    return new RoutingMethod().fromJsonString(jsonString, options);
  }

  static equals(a: RoutingMethod | PlainMessage<RoutingMethod> | undefined, b: RoutingMethod | PlainMessage<RoutingMethod> | undefined): boolean {
    return proto3.util.equals(RoutingMethod, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.RoutingMethod.LoadBalancer
 */
export class RoutingMethod_LoadBalancer extends Message<RoutingMethod_LoadBalancer> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: uint32 node_port = 2;
   */
  nodePort = 0;

  constructor(data?: PartialMessage<RoutingMethod_LoadBalancer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RoutingMethod.LoadBalancer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "node_port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoutingMethod_LoadBalancer {
    return new RoutingMethod_LoadBalancer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoutingMethod_LoadBalancer {
    return new RoutingMethod_LoadBalancer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoutingMethod_LoadBalancer {
    return new RoutingMethod_LoadBalancer().fromJsonString(jsonString, options);
  }

  static equals(a: RoutingMethod_LoadBalancer | PlainMessage<RoutingMethod_LoadBalancer> | undefined, b: RoutingMethod_LoadBalancer | PlainMessage<RoutingMethod_LoadBalancer> | undefined): boolean {
    return proto3.util.equals(RoutingMethod_LoadBalancer, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.RoutingMethod.Ingress
 */
export class RoutingMethod_Ingress extends Message<RoutingMethod_Ingress> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: bool tls = 2;
   */
  tls = false;

  /**
   * @generated from field: repeated string paths = 3;
   */
  paths: string[] = [];

  constructor(data?: PartialMessage<RoutingMethod_Ingress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RoutingMethod.Ingress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tls", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoutingMethod_Ingress {
    return new RoutingMethod_Ingress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoutingMethod_Ingress {
    return new RoutingMethod_Ingress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoutingMethod_Ingress {
    return new RoutingMethod_Ingress().fromJsonString(jsonString, options);
  }

  static equals(a: RoutingMethod_Ingress | PlainMessage<RoutingMethod_Ingress> | undefined, b: RoutingMethod_Ingress | PlainMessage<RoutingMethod_Ingress> | undefined): boolean {
    return proto3.util.equals(RoutingMethod_Ingress, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.HorizontalScale
 */
export class HorizontalScale extends Message<HorizontalScale> {
  /**
   * @generated from field: uint32 max_replicas = 1;
   */
  maxReplicas = 0;

  /**
   * @generated from field: uint32 min_replicas = 2;
   */
  minReplicas = 0;

  /**
   * @generated from field: api.v1.capsule.CPUTarget cpu_target = 3;
   */
  cpuTarget?: CPUTarget;

  /**
   * @generated from field: repeated api.v1.capsule.CustomMetric custom_metrics = 4;
   */
  customMetrics: CustomMetric[] = [];

  constructor(data?: PartialMessage<HorizontalScale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.HorizontalScale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "cpu_target", kind: "message", T: CPUTarget },
    { no: 4, name: "custom_metrics", kind: "message", T: CustomMetric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorizontalScale {
    return new HorizontalScale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorizontalScale {
    return new HorizontalScale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorizontalScale {
    return new HorizontalScale().fromJsonString(jsonString, options);
  }

  static equals(a: HorizontalScale | PlainMessage<HorizontalScale> | undefined, b: HorizontalScale | PlainMessage<HorizontalScale> | undefined): boolean {
    return proto3.util.equals(HorizontalScale, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CPUTarget
 */
export class CPUTarget extends Message<CPUTarget> {
  /**
   * @generated from field: uint32 average_utilization_percentage = 1;
   */
  averageUtilizationPercentage = 0;

  constructor(data?: PartialMessage<CPUTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CPUTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "average_utilization_percentage", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CPUTarget {
    return new CPUTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CPUTarget {
    return new CPUTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CPUTarget {
    return new CPUTarget().fromJsonString(jsonString, options);
  }

  static equals(a: CPUTarget | PlainMessage<CPUTarget> | undefined, b: CPUTarget | PlainMessage<CPUTarget> | undefined): boolean {
    return proto3.util.equals(CPUTarget, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CustomMetric
 */
export class CustomMetric extends Message<CustomMetric> {
  /**
   * @generated from oneof api.v1.capsule.CustomMetric.metric
   */
  metric: {
    /**
     * @generated from field: api.v1.capsule.InstanceMetric instance = 1;
     */
    value: InstanceMetric;
    case: "instance";
  } | {
    /**
     * @generated from field: api.v1.capsule.ObjectMetric object = 2;
     */
    value: ObjectMetric;
    case: "object";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CustomMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CustomMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: InstanceMetric, oneof: "metric" },
    { no: 2, name: "object", kind: "message", T: ObjectMetric, oneof: "metric" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomMetric {
    return new CustomMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomMetric {
    return new CustomMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomMetric {
    return new CustomMetric().fromJsonString(jsonString, options);
  }

  static equals(a: CustomMetric | PlainMessage<CustomMetric> | undefined, b: CustomMetric | PlainMessage<CustomMetric> | undefined): boolean {
    return proto3.util.equals(CustomMetric, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.InstanceMetric
 */
export class InstanceMetric extends Message<InstanceMetric> {
  /**
   * @generated from field: string metric_name = 1;
   */
  metricName = "";

  /**
   * @generated from field: map<string, string> match_labels = 2;
   */
  matchLabels: { [key: string]: string } = {};

  /**
   * @generated from field: string average_value = 3;
   */
  averageValue = "";

  constructor(data?: PartialMessage<InstanceMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.InstanceMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metric_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "average_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceMetric {
    return new InstanceMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceMetric {
    return new InstanceMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceMetric {
    return new InstanceMetric().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceMetric | PlainMessage<InstanceMetric> | undefined, b: InstanceMetric | PlainMessage<InstanceMetric> | undefined): boolean {
    return proto3.util.equals(InstanceMetric, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ObjectMetric
 */
export class ObjectMetric extends Message<ObjectMetric> {
  /**
   * @generated from field: string metric_name = 1;
   */
  metricName = "";

  /**
   * @generated from field: map<string, string> match_labels = 2;
   */
  matchLabels: { [key: string]: string } = {};

  /**
   * @generated from field: string average_value = 3;
   */
  averageValue = "";

  /**
   * @generated from field: string value = 4;
   */
  value = "";

  /**
   * @generated from field: api.v1.capsule.ObjectReference object_reference = 5;
   */
  objectReference?: ObjectReference;

  constructor(data?: PartialMessage<ObjectMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ObjectMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metric_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "average_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "object_reference", kind: "message", T: ObjectReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectMetric {
    return new ObjectMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectMetric {
    return new ObjectMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectMetric {
    return new ObjectMetric().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectMetric | PlainMessage<ObjectMetric> | undefined, b: ObjectMetric | PlainMessage<ObjectMetric> | undefined): boolean {
    return proto3.util.equals(ObjectMetric, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ObjectReference
 */
export class ObjectReference extends Message<ObjectReference> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string api_version = 3;
   */
  apiVersion = "";

  constructor(data?: PartialMessage<ObjectReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ObjectReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectReference {
    return new ObjectReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectReference {
    return new ObjectReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectReference {
    return new ObjectReference().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectReference | PlainMessage<ObjectReference> | undefined, b: ObjectReference | PlainMessage<ObjectReference> | undefined): boolean {
    return proto3.util.equals(ObjectReference, a, b);
  }
}

