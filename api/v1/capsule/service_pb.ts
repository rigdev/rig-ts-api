// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/capsule/service.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Pagination } from "../../../model/common_pb.js";
import { Rollout } from "./rollout_pb.js";
import { Status } from "./instance/status_pb.js";
import { Status as Status$1 } from "./status_pb.js";
import { Capsule, Update } from "./capsule_pb.js";
import { Proposal, Revision, SetProposal, SetRevision } from "./revision_pb.js";
import { Log } from "./log_pb.js";
import { Change } from "./change_pb.js";
import { Fingerprint, Fingerprints } from "../../../model/revision_pb.js";
import { FieldChange } from "./field_pb.js";
import { Instance } from "./instance_pb.js";
import { Event } from "./event_pb.js";
import { InstanceMetrics, Metric } from "../../../model/metrics_pb.js";
import { JobExecution, JobState } from "./job_pb.js";
import { GitStore } from "../../../model/git_pb.js";

/**
 * @generated from message api.v1.capsule.WatchRolloutsRequest
 */
export class WatchRolloutsRequest extends Message<WatchRolloutsRequest> {
  /**
   * The capsule to list rollouts for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * The environment to list rollouts for.
   *
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * If given only the rollout with this ID will be watched.
   *
   * @generated from field: uint64 rollout_id = 4;
   */
  rolloutId = protoInt64.zero;

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 5;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<WatchRolloutsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.WatchRolloutsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchRolloutsRequest {
    return new WatchRolloutsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchRolloutsRequest {
    return new WatchRolloutsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchRolloutsRequest {
    return new WatchRolloutsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchRolloutsRequest | PlainMessage<WatchRolloutsRequest> | undefined, b: WatchRolloutsRequest | PlainMessage<WatchRolloutsRequest> | undefined): boolean {
    return proto3.util.equals(WatchRolloutsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.WatchRolloutsResponse
 */
export class WatchRolloutsResponse extends Message<WatchRolloutsResponse> {
  /**
   * @generated from field: api.v1.capsule.Rollout updated = 1;
   */
  updated?: Rollout;

  constructor(data?: PartialMessage<WatchRolloutsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.WatchRolloutsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated", kind: "message", T: Rollout },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchRolloutsResponse {
    return new WatchRolloutsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchRolloutsResponse {
    return new WatchRolloutsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchRolloutsResponse {
    return new WatchRolloutsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchRolloutsResponse | PlainMessage<WatchRolloutsResponse> | undefined, b: WatchRolloutsResponse | PlainMessage<WatchRolloutsResponse> | undefined): boolean {
    return proto3.util.equals(WatchRolloutsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.WatchInstanceStatusesRequest
 */
export class WatchInstanceStatusesRequest extends Message<WatchInstanceStatusesRequest> {
  /**
   * The capsule to get the instance statuses from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule is.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * The environment to get the instance statuses from.
   *
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * If given, only the instance with this ID will be watched.
   *
   * @generated from field: string instance_id = 4;
   */
  instanceId = "";

  /**
   * if true, deleted instances will be included in the response.
   *
   * @generated from field: bool include_deleted = 5;
   */
  includeDeleted = false;

  /**
   * if true, existing instances will be excluded from the response.
   *
   * @generated from field: bool exclude_existing = 6;
   */
  excludeExisting = false;

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 7;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<WatchInstanceStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.WatchInstanceStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "exclude_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchInstanceStatusesRequest {
    return new WatchInstanceStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchInstanceStatusesRequest {
    return new WatchInstanceStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchInstanceStatusesRequest {
    return new WatchInstanceStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchInstanceStatusesRequest | PlainMessage<WatchInstanceStatusesRequest> | undefined, b: WatchInstanceStatusesRequest | PlainMessage<WatchInstanceStatusesRequest> | undefined): boolean {
    return proto3.util.equals(WatchInstanceStatusesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.WatchInstanceStatusesResponse
 */
export class WatchInstanceStatusesResponse extends Message<WatchInstanceStatusesResponse> {
  /**
   * @generated from oneof api.v1.capsule.WatchInstanceStatusesResponse.response
   */
  response: {
    /**
     * @generated from field: api.v1.capsule.instance.Status updated = 1;
     */
    value: Status;
    case: "updated";
  } | {
    /**
     * @generated from field: string deleted = 2;
     */
    value: string;
    case: "deleted";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WatchInstanceStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.WatchInstanceStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated", kind: "message", T: Status, oneof: "response" },
    { no: 2, name: "deleted", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchInstanceStatusesResponse {
    return new WatchInstanceStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchInstanceStatusesResponse {
    return new WatchInstanceStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchInstanceStatusesResponse {
    return new WatchInstanceStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchInstanceStatusesResponse | PlainMessage<WatchInstanceStatusesResponse> | undefined, b: WatchInstanceStatusesResponse | PlainMessage<WatchInstanceStatusesResponse> | undefined): boolean {
    return proto3.util.equals(WatchInstanceStatusesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.WatchStatusRequest
 */
export class WatchStatusRequest extends Message<WatchStatusRequest> {
  /**
   * The capsule to watch the status of.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * The environment to watch the status of.
   *
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  constructor(data?: PartialMessage<WatchStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.WatchStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchStatusRequest {
    return new WatchStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchStatusRequest {
    return new WatchStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchStatusRequest {
    return new WatchStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchStatusRequest | PlainMessage<WatchStatusRequest> | undefined, b: WatchStatusRequest | PlainMessage<WatchStatusRequest> | undefined): boolean {
    return proto3.util.equals(WatchStatusRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.WatchStatusResponse
 */
export class WatchStatusResponse extends Message<WatchStatusResponse> {
  /**
   * @generated from field: api.v1.capsule.Status status = 1;
   */
  status?: Status$1;

  constructor(data?: PartialMessage<WatchStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.WatchStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchStatusResponse {
    return new WatchStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchStatusResponse {
    return new WatchStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchStatusResponse {
    return new WatchStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchStatusResponse | PlainMessage<WatchStatusResponse> | undefined, b: WatchStatusResponse | PlainMessage<WatchStatusResponse> | undefined): boolean {
    return proto3.util.equals(WatchStatusResponse, a, b);
  }
}

/**
 * GetStatusRequest is a request to start streaming the capsule status
 *
 * @generated from message api.v1.capsule.GetStatusRequest
 */
export class GetStatusRequest extends Message<GetStatusRequest> {
  /**
   * The capsule to get the status from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * The environment to get the status from.
   *
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatusRequest {
    return new GetStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatusRequest {
    return new GetStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatusRequest {
    return new GetStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatusRequest | PlainMessage<GetStatusRequest> | undefined, b: GetStatusRequest | PlainMessage<GetStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetStatusRequest, a, b);
  }
}

/**
 * GetCapsuleStatusResponse
 *
 * @generated from message api.v1.capsule.GetStatusResponse
 */
export class GetStatusResponse extends Message<GetStatusResponse> {
  /**
   * The capsule status
   *
   * @generated from field: api.v1.capsule.Status status = 1;
   */
  status?: Status$1;

  constructor(data?: PartialMessage<GetStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatusResponse {
    return new GetStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatusResponse {
    return new GetStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatusResponse {
    return new GetStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatusResponse | PlainMessage<GetStatusResponse> | undefined, b: GetStatusResponse | PlainMessage<GetStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetStatusResponse, a, b);
  }
}

/**
 * StreamData for Execute RPC.
 *
 * @generated from message api.v1.capsule.StreamData
 */
export class StreamData extends Message<StreamData> {
  /**
   * Stream data.
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * If the stream is closed.
   *
   * @generated from field: bool closed = 2;
   */
  closed = false;

  constructor(data?: PartialMessage<StreamData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.StreamData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamData {
    return new StreamData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamData {
    return new StreamData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamData {
    return new StreamData().fromJsonString(jsonString, options);
  }

  static equals(a: StreamData | PlainMessage<StreamData> | undefined, b: StreamData | PlainMessage<StreamData> | undefined): boolean {
    return proto3.util.equals(StreamData, a, b);
  }
}

/**
 * Execute request. This can either be a request to start a request, a terminal
 * resize msg or a stream data msg.
 *
 * @generated from message api.v1.capsule.ExecuteRequest
 */
export class ExecuteRequest extends Message<ExecuteRequest> {
  /**
   * @generated from oneof api.v1.capsule.ExecuteRequest.request
   */
  request: {
    /**
     * Start request.
     *
     * @generated from field: api.v1.capsule.ExecuteRequest.Start start = 1;
     */
    value: ExecuteRequest_Start;
    case: "start";
  } | {
    /**
     * Stream stdin request
     *
     * @generated from field: api.v1.capsule.StreamData stdin = 2;
     */
    value: StreamData;
    case: "stdin";
  } | {
    /**
     * Resize request
     *
     * @generated from field: api.v1.capsule.ExecuteRequest.Resize resize = 3;
     */
    value: ExecuteRequest_Resize;
    case: "resize";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The project ID.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * The environment ID.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ExecuteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: ExecuteRequest_Start, oneof: "request" },
    { no: 2, name: "stdin", kind: "message", T: StreamData, oneof: "request" },
    { no: 3, name: "resize", kind: "message", T: ExecuteRequest_Resize, oneof: "request" },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined, b: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest, a, b);
  }
}

/**
 * Exec start request
 *
 * @generated from message api.v1.capsule.ExecuteRequest.Start
 */
export class ExecuteRequest_Start extends Message<ExecuteRequest_Start> {
  /**
   * The capsule to execute in.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance to execute in.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The command to execute.
   *
   * @generated from field: string command = 3;
   */
  command = "";

  /**
   * The arguments to the command.
   *
   * @generated from field: repeated string arguments = 4;
   */
  arguments: string[] = [];

  /**
   * The initial terminal size.
   *
   * @generated from field: api.v1.capsule.ExecuteRequest.Resize tty = 5;
   */
  tty?: ExecuteRequest_Resize;

  /**
   * If the command is interactive.
   *
   * @generated from field: bool interactive = 6;
   */
  interactive = false;

  constructor(data?: PartialMessage<ExecuteRequest_Start>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest.Start";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "arguments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tty", kind: "message", T: ExecuteRequest_Resize },
    { no: 6, name: "interactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Start | PlainMessage<ExecuteRequest_Start> | undefined, b: ExecuteRequest_Start | PlainMessage<ExecuteRequest_Start> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Start, a, b);
  }
}

/**
 * Terminal resize request.
 *
 * @generated from message api.v1.capsule.ExecuteRequest.Resize
 */
export class ExecuteRequest_Resize extends Message<ExecuteRequest_Resize> {
  /**
   * The new terminal height.
   *
   * @generated from field: uint32 height = 1;
   */
  height = 0;

  /**
   * The new terminal width.
   *
   * @generated from field: uint32 width = 2;
   */
  width = 0;

  constructor(data?: PartialMessage<ExecuteRequest_Resize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest.Resize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Resize | PlainMessage<ExecuteRequest_Resize> | undefined, b: ExecuteRequest_Resize | PlainMessage<ExecuteRequest_Resize> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Resize, a, b);
  }
}

/**
 * Execute response.
 *
 * @generated from message api.v1.capsule.ExecuteResponse
 */
export class ExecuteResponse extends Message<ExecuteResponse> {
  /**
   * @generated from oneof api.v1.capsule.ExecuteResponse.response
   */
  response: {
    /**
     * Stdout of the execute.
     *
     * @generated from field: api.v1.capsule.StreamData stdout = 1;
     */
    value: StreamData;
    case: "stdout";
  } | {
    /**
     * Stderr in case of an error.
     *
     * @generated from field: api.v1.capsule.StreamData stderr = 2;
     */
    value: StreamData;
    case: "stderr";
  } | {
    /**
     * Exit code of the execute.
     *
     * @generated from field: int32 exit_code = 3;
     */
    value: number;
    case: "exitCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "message", T: StreamData, oneof: "response" },
    { no: 2, name: "stderr", kind: "message", T: StreamData, oneof: "response" },
    { no: 3, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined, b: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.PortForwardRequest
 */
export class PortForwardRequest extends Message<PortForwardRequest> {
  /**
   * @generated from oneof api.v1.capsule.PortForwardRequest.request
   */
  request: {
    /**
     * @generated from field: api.v1.capsule.PortForwardRequest.Start start = 1;
     */
    value: PortForwardRequest_Start;
    case: "start";
  } | {
    /**
     * @generated from field: bytes data = 2;
     */
    value: Uint8Array;
    case: "data";
  } | {
    /**
     * @generated from field: api.v1.capsule.PortForwardRequest.Close close = 3;
     */
    value: PortForwardRequest_Close;
    case: "close";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PortForwardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.PortForwardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: PortForwardRequest_Start, oneof: "request" },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "request" },
    { no: 3, name: "close", kind: "message", T: PortForwardRequest_Close, oneof: "request" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortForwardRequest {
    return new PortForwardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortForwardRequest {
    return new PortForwardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortForwardRequest {
    return new PortForwardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PortForwardRequest | PlainMessage<PortForwardRequest> | undefined, b: PortForwardRequest | PlainMessage<PortForwardRequest> | undefined): boolean {
    return proto3.util.equals(PortForwardRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.PortForwardRequest.Start
 */
export class PortForwardRequest_Start extends Message<PortForwardRequest_Start> {
  /**
   * The project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The environment ID.
   *
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string capsule_id = 3;
   */
  capsuleId = "";

  /**
   * @generated from field: string instance_id = 4;
   */
  instanceId = "";

  /**
   * @generated from field: uint32 port = 5;
   */
  port = 0;

  constructor(data?: PartialMessage<PortForwardRequest_Start>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.PortForwardRequest.Start";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortForwardRequest_Start {
    return new PortForwardRequest_Start().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortForwardRequest_Start {
    return new PortForwardRequest_Start().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortForwardRequest_Start {
    return new PortForwardRequest_Start().fromJsonString(jsonString, options);
  }

  static equals(a: PortForwardRequest_Start | PlainMessage<PortForwardRequest_Start> | undefined, b: PortForwardRequest_Start | PlainMessage<PortForwardRequest_Start> | undefined): boolean {
    return proto3.util.equals(PortForwardRequest_Start, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.PortForwardRequest.Close
 */
export class PortForwardRequest_Close extends Message<PortForwardRequest_Close> {
  constructor(data?: PartialMessage<PortForwardRequest_Close>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.PortForwardRequest.Close";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortForwardRequest_Close {
    return new PortForwardRequest_Close().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortForwardRequest_Close {
    return new PortForwardRequest_Close().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortForwardRequest_Close {
    return new PortForwardRequest_Close().fromJsonString(jsonString, options);
  }

  static equals(a: PortForwardRequest_Close | PlainMessage<PortForwardRequest_Close> | undefined, b: PortForwardRequest_Close | PlainMessage<PortForwardRequest_Close> | undefined): boolean {
    return proto3.util.equals(PortForwardRequest_Close, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.PortForwardResponse
 */
export class PortForwardResponse extends Message<PortForwardResponse> {
  /**
   * @generated from oneof api.v1.capsule.PortForwardResponse.response
   */
  response: {
    /**
     * @generated from field: bytes data = 1;
     */
    value: Uint8Array;
    case: "data";
  } | {
    /**
     * @generated from field: api.v1.capsule.PortForwardResponse.Close close = 2;
     */
    value: PortForwardResponse_Close;
    case: "close";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PortForwardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.PortForwardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "response" },
    { no: 2, name: "close", kind: "message", T: PortForwardResponse_Close, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortForwardResponse {
    return new PortForwardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortForwardResponse {
    return new PortForwardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortForwardResponse {
    return new PortForwardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PortForwardResponse | PlainMessage<PortForwardResponse> | undefined, b: PortForwardResponse | PlainMessage<PortForwardResponse> | undefined): boolean {
    return proto3.util.equals(PortForwardResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.PortForwardResponse.Close
 */
export class PortForwardResponse_Close extends Message<PortForwardResponse_Close> {
  constructor(data?: PartialMessage<PortForwardResponse_Close>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.PortForwardResponse.Close";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortForwardResponse_Close {
    return new PortForwardResponse_Close().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortForwardResponse_Close {
    return new PortForwardResponse_Close().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortForwardResponse_Close {
    return new PortForwardResponse_Close().fromJsonString(jsonString, options);
  }

  static equals(a: PortForwardResponse_Close | PlainMessage<PortForwardResponse_Close> | undefined, b: PortForwardResponse_Close | PlainMessage<PortForwardResponse_Close> | undefined): boolean {
    return proto3.util.equals(PortForwardResponse_Close, a, b);
  }
}

/**
 * Create capsule request.
 *
 * @generated from message api.v1.capsule.CreateRequest
 */
export class CreateRequest extends Message<CreateRequest> {
  /**
   * The name of the capsule. This property must be unique for a project and
   * cannot be changed after creation. Resources created in associating with the
   * capsule will use this name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Deprecated field: The initial properties of the capsule.
   *
   * @generated from field: repeated api.v1.capsule.Update initializers = 2;
   */
  initializers: Update[] = [];

  /**
   * The project to create the capsule in.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<CreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initializers", kind: "message", T: Update, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRequest {
    return new CreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRequest | PlainMessage<CreateRequest> | undefined, b: CreateRequest | PlainMessage<CreateRequest> | undefined): boolean {
    return proto3.util.equals(CreateRequest, a, b);
  }
}

/**
 * Create capsule response.
 *
 * @generated from message api.v1.capsule.CreateResponse
 */
export class CreateResponse extends Message<CreateResponse> {
  /**
   * ID of the capsule. This is the same as the name.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  constructor(data?: PartialMessage<CreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResponse {
    return new CreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResponse | PlainMessage<CreateResponse> | undefined, b: CreateResponse | PlainMessage<CreateResponse> | undefined): boolean {
    return proto3.util.equals(CreateResponse, a, b);
  }
}

/**
 * Request to get a capsule.
 *
 * @generated from message api.v1.capsule.GetRequest
 */
export class GetRequest extends Message<GetRequest> {
  /**
   * Capsule to get.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Project in which the capsule is.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequest {
    return new GetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequest | PlainMessage<GetRequest> | undefined, b: GetRequest | PlainMessage<GetRequest> | undefined): boolean {
    return proto3.util.equals(GetRequest, a, b);
  }
}

/**
 * Response to get a capsule.
 *
 * @generated from message api.v1.capsule.GetResponse
 */
export class GetResponse extends Message<GetResponse> {
  /**
   * The capsule.
   *
   * @generated from field: api.v1.capsule.Capsule capsule = 1;
   */
  capsule?: Capsule;

  /**
   * @generated from field: api.v1.capsule.SetRevision revision = 2;
   */
  revision?: SetRevision;

  /**
   * @generated from field: map<string, api.v1.capsule.Revision> environment_revisions = 3;
   */
  environmentRevisions: { [key: string]: Revision } = {};

  constructor(data?: PartialMessage<GetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: Capsule },
    { no: 2, name: "revision", kind: "message", T: SetRevision },
    { no: 3, name: "environment_revisions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Revision} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResponse {
    return new GetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResponse | PlainMessage<GetResponse> | undefined, b: GetResponse | PlainMessage<GetResponse> | undefined): boolean {
    return proto3.util.equals(GetResponse, a, b);
  }
}

/**
 * Request to delete a capsule.
 *
 * @generated from message api.v1.capsule.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * The capsule to delete.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule is to be deleted.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * Empty delete response.
 *
 * @generated from message api.v1.capsule.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * Request to get instance logs from a capsule.
 *
 * @generated from message api.v1.capsule.LogsRequest
 */
export class LogsRequest extends Message<LogsRequest> {
  /**
   * The capsule to read logs from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance in the capsule to read logs from.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * If true, the request will stay open and stream new log messages.
   *
   * @generated from field: bool follow = 3;
   */
  follow = false;

  /**
   * If set, will not show logs older than since.
   *
   * @generated from field: google.protobuf.Duration since = 4;
   */
  since?: Duration;

  /**
   * The project in which the capsule is.
   *
   * @generated from field: string project_id = 5;
   */
  projectId = "";

  /**
   * Environment to get logs from.
   *
   * @generated from field: string environment_id = 6;
   */
  environmentId = "";

  /**
   * If true, include logs from previously terminated containers
   *
   * @generated from field: bool previous_containers = 7;
   */
  previousContainers = false;

  constructor(data?: PartialMessage<LogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.LogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "follow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "since", kind: "message", T: Duration },
    { no: 5, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "previous_containers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogsRequest {
    return new LogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogsRequest {
    return new LogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogsRequest {
    return new LogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LogsRequest | PlainMessage<LogsRequest> | undefined, b: LogsRequest | PlainMessage<LogsRequest> | undefined): boolean {
    return proto3.util.equals(LogsRequest, a, b);
  }
}

/**
 * The response of a capsule.Logs RPC
 *
 * @generated from message api.v1.capsule.LogsResponse
 */
export class LogsResponse extends Message<LogsResponse> {
  /**
   * The actual logs
   *
   * @generated from field: api.v1.capsule.Log log = 1;
   */
  log?: Log;

  constructor(data?: PartialMessage<LogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.LogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: Log },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogsResponse {
    return new LogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogsResponse {
    return new LogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogsResponse {
    return new LogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LogsResponse | PlainMessage<LogsResponse> | undefined, b: LogsResponse | PlainMessage<LogsResponse> | undefined): boolean {
    return proto3.util.equals(LogsResponse, a, b);
  }
}

/**
 * Deprecated update - This is now a no-op
 *
 * @generated from message api.v1.capsule.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * The capsule to update.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The updates to apply to the capsule.
   *
   * @generated from field: repeated api.v1.capsule.Update updates = 2;
   */
  updates: Update[] = [];

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: Update, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * Deprecated: Empty update response.
 *
 * @generated from message api.v1.capsule.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * List capsule request.
 *
 * @generated from message api.v1.capsule.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * Project in which to list capsules.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * List capsule response.
 *
 * @generated from message api.v1.capsule.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * The capsules.
   *
   * @generated from field: repeated api.v1.capsule.Capsule capsules = 1;
   */
  capsules: Capsule[] = [];

  /**
   * Total number of capsules in the project.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsules", kind: "message", T: Capsule, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * Deploy request. This will deploy a number of changes which results in a new
 * rollout.
 *
 * @generated from message api.v1.capsule.DeployRequest
 */
export class DeployRequest extends Message<DeployRequest> {
  /**
   * Capsule to deploy to.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Changes to include in the new rollout.
   *
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * Force deploy, aborting an existing rollout if ongoing.
   *
   * @generated from field: bool force = 3;
   */
  force = false;

  /**
   * Project in which the capsule lives.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * Environment in which to deploy.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  /**
   * Deploy message.
   *
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * if true, the deploy will not be executed, but the request will return the
   * rollout config.
   *
   * @generated from field: bool dry_run = 7;
   */
  dryRun = false;

  /**
   * If not zero, this will constrain the rollout only to be created if the
   * currently running rollout matches this identifier. If this check fails, the
   * request will return an `Aborted` error.
   *
   * @generated from field: uint64 current_rollout_id = 8;
   */
  currentRolloutId = protoInt64.zero;

  /**
   * If set, this will constrain the rollout only to be created if the current
   * latest capsule fingerprint matches the given.
   * Cannot be used together with `current_rollout_id`
   *
   * @generated from field: model.Fingerprint current_fingerprint = 10;
   */
  currentFingerprint?: Fingerprint;

  /**
   * By default, existing objects will be kept in favor of overriding them. To
   * force the override of resources, set this flag to true. An example of this
   * use-case is a migration step, where resource created by a previous
   * toolchain e.g. based on Helm charts, are to be replaced and instead be
   * created by the Rig operator.
   * While the override is irreversible, this flag is not "sticky" and must be
   * set by each deploy that should use this behavior.
   *
   * @generated from field: bool force_override = 9;
   */
  forceOverride = false;

  constructor(data?: PartialMessage<DeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "current_rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "current_fingerprint", kind: "message", T: Fingerprint },
    { no: 9, name: "force_override", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployRequest {
    return new DeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployRequest | PlainMessage<DeployRequest> | undefined, b: DeployRequest | PlainMessage<DeployRequest> | undefined): boolean {
    return proto3.util.equals(DeployRequest, a, b);
  }
}

/**
 * Deploy response.
 *
 * @generated from message api.v1.capsule.DeployResponse
 */
export class DeployResponse extends Message<DeployResponse> {
  /**
   * ID of the new rollout.
   *
   * @generated from field: uint64 rollout_id = 1;
   */
  rolloutId = protoInt64.zero;

  /**
   * The YAML of the resources that will be deployed.
   * Deprecated. Use `outcome` instead.
   *
   * @generated from field: map<string, string> resource_yaml = 2;
   */
  resourceYaml: { [key: string]: string } = {};

  /**
   * The rollout config.
   * api.v1.capsule.RolloutConfig rollout_config = 3;
   * The capsule revision created.
   *
   * @generated from field: api.v1.capsule.Revision revision = 4;
   */
  revision?: Revision;

  /**
   * The capsule set revision created if it's the first time deploying to the
   * environment.
   *
   * @generated from field: api.v1.capsule.SetRevision set_revision = 6;
   */
  setRevision?: SetRevision;

  /**
   * Breakdown of the changes that this deploy would make to the system.
   * Only populated if dry-run is used.
   *
   * @generated from field: api.v1.capsule.DeployOutcome outcome = 5;
   */
  outcome?: DeployOutcome;

  constructor(data?: PartialMessage<DeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "resource_yaml", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "revision", kind: "message", T: Revision },
    { no: 6, name: "set_revision", kind: "message", T: SetRevision },
    { no: 5, name: "outcome", kind: "message", T: DeployOutcome },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployResponse {
    return new DeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployResponse | PlainMessage<DeployResponse> | undefined, b: DeployResponse | PlainMessage<DeployResponse> | undefined): boolean {
    return proto3.util.equals(DeployResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeployOutcome
 */
export class DeployOutcome extends Message<DeployOutcome> {
  /**
   * The field-level changes that comes from applying this change.
   *
   * @generated from field: repeated api.v1.capsule.FieldChange field_changes = 1;
   */
  fieldChanges: FieldChange[] = [];

  /**
   * The Platform-level objects that are generated by the Deploy.
   *
   * @generated from field: repeated api.v1.capsule.DeployOutcome.PlatformObject platform_objects = 2;
   */
  platformObjects: DeployOutcome_PlatformObject[] = [];

  /**
   * The Kubernetes-level objects that are generated by the Deploy.
   * The objects are both the outcome of what the platform generated for
   * the Kubernetes cluster directly and what plugins are further adding.
   *
   * @generated from field: repeated api.v1.capsule.DeployOutcome.KubernetesObject kubernetes_objects = 3;
   */
  kubernetesObjects: DeployOutcome_KubernetesObject[] = [];

  /**
   * In case generation of kubernetes files failed, this field will
   * be populated with the error.
   *
   * @generated from field: string kubernetes_error = 4;
   */
  kubernetesError = "";

  constructor(data?: PartialMessage<DeployOutcome>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployOutcome";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_changes", kind: "message", T: FieldChange, repeated: true },
    { no: 2, name: "platform_objects", kind: "message", T: DeployOutcome_PlatformObject, repeated: true },
    { no: 3, name: "kubernetes_objects", kind: "message", T: DeployOutcome_KubernetesObject, repeated: true },
    { no: 4, name: "kubernetes_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployOutcome {
    return new DeployOutcome().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployOutcome {
    return new DeployOutcome().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployOutcome {
    return new DeployOutcome().fromJsonString(jsonString, options);
  }

  static equals(a: DeployOutcome | PlainMessage<DeployOutcome> | undefined, b: DeployOutcome | PlainMessage<DeployOutcome> | undefined): boolean {
    return proto3.util.equals(DeployOutcome, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeployOutcome.PlatformObject
 */
export class DeployOutcome_PlatformObject extends Message<DeployOutcome_PlatformObject> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string content_yaml = 2;
   */
  contentYaml = "";

  constructor(data?: PartialMessage<DeployOutcome_PlatformObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployOutcome.PlatformObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployOutcome_PlatformObject {
    return new DeployOutcome_PlatformObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployOutcome_PlatformObject {
    return new DeployOutcome_PlatformObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployOutcome_PlatformObject {
    return new DeployOutcome_PlatformObject().fromJsonString(jsonString, options);
  }

  static equals(a: DeployOutcome_PlatformObject | PlainMessage<DeployOutcome_PlatformObject> | undefined, b: DeployOutcome_PlatformObject | PlainMessage<DeployOutcome_PlatformObject> | undefined): boolean {
    return proto3.util.equals(DeployOutcome_PlatformObject, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeployOutcome.KubernetesObject
 */
export class DeployOutcome_KubernetesObject extends Message<DeployOutcome_KubernetesObject> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string content_yaml = 2;
   */
  contentYaml = "";

  constructor(data?: PartialMessage<DeployOutcome_KubernetesObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployOutcome.KubernetesObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployOutcome_KubernetesObject {
    return new DeployOutcome_KubernetesObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployOutcome_KubernetesObject {
    return new DeployOutcome_KubernetesObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployOutcome_KubernetesObject {
    return new DeployOutcome_KubernetesObject().fromJsonString(jsonString, options);
  }

  static equals(a: DeployOutcome_KubernetesObject | PlainMessage<DeployOutcome_KubernetesObject> | undefined, b: DeployOutcome_KubernetesObject | PlainMessage<DeployOutcome_KubernetesObject> | undefined): boolean {
    return proto3.util.equals(DeployOutcome_KubernetesObject, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeploySetRequest
 */
export class DeploySetRequest extends Message<DeploySetRequest> {
  /**
   * Capsule to deploy to.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Changes to include in the new rollout.
   *
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * Force deploy, aborting existing rollouts if ongoing.
   *
   * @generated from field: bool force = 3;
   */
  force = false;

  /**
   * Project in which the capsule lives.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * Deploy message.
   *
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * if true, the deploy will not be executed, but the request will return the
   * rollout config.
   *
   * @generated from field: bool dry_run = 7;
   */
  dryRun = false;

  /**
   * If present, maps from environment to expected current rollout within that
   * environment. This will constrain the rollout only to be created if the
   * currently running rollout matches this identifier. If this check fails, the
   * request will return an `Aborted` error.
   *
   * @generated from field: map<string, uint64> current_rollout_ids = 8;
   */
  currentRolloutIds: { [key: string]: bigint } = {};

  /**
   * If set, this will constrain the rollout only to be created if the current
   * latest capsuleset fingerprint matches the given.
   *
   * @generated from field: model.Fingerprint current_fingerprint = 9;
   */
  currentFingerprint?: Fingerprint;

  /**
   * If set, this will constrain the rollout only to be created if the current
   * latest capsule fingerprint for each environment in the map matches the ones
   * in the map. Cannot be used together with `current_rollout_ids`
   *
   * @generated from field: map<string, model.Fingerprint> current_environment_fingerprints = 10;
   */
  currentEnvironmentFingerprints: { [key: string]: Fingerprint } = {};

  constructor(data?: PartialMessage<DeploySetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeploySetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "current_rollout_ids", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 4 /* ScalarType.UINT64 */} },
    { no: 9, name: "current_fingerprint", kind: "message", T: Fingerprint },
    { no: 10, name: "current_environment_fingerprints", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Fingerprint} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploySetRequest {
    return new DeploySetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploySetRequest {
    return new DeploySetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploySetRequest {
    return new DeploySetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeploySetRequest | PlainMessage<DeploySetRequest> | undefined, b: DeploySetRequest | PlainMessage<DeploySetRequest> | undefined): boolean {
    return proto3.util.equals(DeploySetRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeploySetOutcome
 */
export class DeploySetOutcome extends Message<DeploySetOutcome> {
  /**
   * The field-level changes that comes from applying this change.
   *
   * @generated from field: repeated api.v1.capsule.FieldChange field_changes = 1;
   */
  fieldChanges: FieldChange[] = [];

  /**
   * @generated from field: map<string, api.v1.capsule.DeployOutcome> environments = 2;
   */
  environments: { [key: string]: DeployOutcome } = {};

  constructor(data?: PartialMessage<DeploySetOutcome>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeploySetOutcome";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_changes", kind: "message", T: FieldChange, repeated: true },
    { no: 2, name: "environments", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DeployOutcome} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploySetOutcome {
    return new DeploySetOutcome().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploySetOutcome {
    return new DeploySetOutcome().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploySetOutcome {
    return new DeploySetOutcome().fromJsonString(jsonString, options);
  }

  static equals(a: DeploySetOutcome | PlainMessage<DeploySetOutcome> | undefined, b: DeploySetOutcome | PlainMessage<DeploySetOutcome> | undefined): boolean {
    return proto3.util.equals(DeploySetOutcome, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeploySetResponse
 */
export class DeploySetResponse extends Message<DeploySetResponse> {
  /**
   * The capsule revision created.
   *
   * @generated from field: api.v1.capsule.SetRevision revision = 1;
   */
  revision?: SetRevision;

  /**
   * Breakdown of the changes that this deploy would make to the system.
   * Only populated if dry-run is used.
   *
   * @generated from field: api.v1.capsule.DeploySetOutcome outcome = 2;
   */
  outcome?: DeploySetOutcome;

  /**
   * The environments which currently have rollouts. These will receive a
   * rollout as result of the SetDeploy
   *
   * @generated from field: repeated string ActiveEnvironments = 3;
   */
  ActiveEnvironments: string[] = [];

  constructor(data?: PartialMessage<DeploySetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeploySetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revision", kind: "message", T: SetRevision },
    { no: 2, name: "outcome", kind: "message", T: DeploySetOutcome },
    { no: 3, name: "ActiveEnvironments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploySetResponse {
    return new DeploySetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploySetResponse {
    return new DeploySetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploySetResponse {
    return new DeploySetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeploySetResponse | PlainMessage<DeploySetResponse> | undefined, b: DeploySetResponse | PlainMessage<DeploySetResponse> | undefined): boolean {
    return proto3.util.equals(DeploySetResponse, a, b);
  }
}

/**
 * Deploy request. This will deploy a number of changes which results in a new
 * rollout.
 *
 * @generated from message api.v1.capsule.ProposeRolloutRequest
 */
export class ProposeRolloutRequest extends Message<ProposeRolloutRequest> {
  /**
   * Capsule to deploy to.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Changes to include in the new rollout.
   *
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * Project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * Environment in which to deploy.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * Deploy message.
   *
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * By default, existing objects will be kept in favor of overriding them. To
   * force the override of resources, set this flag to true. An example of this
   * use-case is a migration step, where resource created by a previous
   * toolchain e.g. based on Helm charts, are to be replaced and instead be
   * created by the Rig operator.
   * While the override is irreversible, this flag is not "sticky" and must be
   * set by each deploy that should use this behavior.
   *
   * @generated from field: bool force_override = 6;
   */
  forceOverride = false;

  /**
   * @generated from field: string branch_name = 7;
   */
  branchName = "";

  constructor(data?: PartialMessage<ProposeRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ProposeRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "force_override", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposeRolloutRequest {
    return new ProposeRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposeRolloutRequest {
    return new ProposeRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposeRolloutRequest {
    return new ProposeRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProposeRolloutRequest | PlainMessage<ProposeRolloutRequest> | undefined, b: ProposeRolloutRequest | PlainMessage<ProposeRolloutRequest> | undefined): boolean {
    return proto3.util.equals(ProposeRolloutRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ProposeRolloutResponse
 */
export class ProposeRolloutResponse extends Message<ProposeRolloutResponse> {
  /**
   * @generated from field: api.v1.capsule.Proposal proposal = 1;
   */
  proposal?: Proposal;

  /**
   * Breakdown of the changes that this deploy would make to the system.
   *
   * @generated from field: api.v1.capsule.DeployOutcome outcome = 2;
   */
  outcome?: DeployOutcome;

  constructor(data?: PartialMessage<ProposeRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ProposeRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
    { no: 2, name: "outcome", kind: "message", T: DeployOutcome },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposeRolloutResponse {
    return new ProposeRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposeRolloutResponse {
    return new ProposeRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposeRolloutResponse {
    return new ProposeRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProposeRolloutResponse | PlainMessage<ProposeRolloutResponse> | undefined, b: ProposeRolloutResponse | PlainMessage<ProposeRolloutResponse> | undefined): boolean {
    return proto3.util.equals(ProposeRolloutResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ProposeSetRolloutRequest
 */
export class ProposeSetRolloutRequest extends Message<ProposeSetRolloutRequest> {
  /**
   * Capsule to deploy to.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Changes to include in the new rollout.
   *
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * Project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * Deploy message.
   *
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * By default, existing objects will be kept in favor of overriding them. To
   * force the override of resources, set this flag to true. An example of this
   * use-case is a migration step, where resource created by a previous
   * toolchain e.g. based on Helm charts, are to be replaced and instead be
   * created by the Rig operator.
   * While the override is irreversible, this flag is not "sticky" and must be
   * set by each deploy that should use this behavior.
   *
   * @generated from field: bool force_override = 5;
   */
  forceOverride = false;

  /**
   * @generated from field: string branch_name = 6;
   */
  branchName = "";

  constructor(data?: PartialMessage<ProposeSetRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ProposeSetRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "force_override", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposeSetRolloutRequest {
    return new ProposeSetRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposeSetRolloutRequest {
    return new ProposeSetRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposeSetRolloutRequest {
    return new ProposeSetRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProposeSetRolloutRequest | PlainMessage<ProposeSetRolloutRequest> | undefined, b: ProposeSetRolloutRequest | PlainMessage<ProposeSetRolloutRequest> | undefined): boolean {
    return proto3.util.equals(ProposeSetRolloutRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ProposeSetRolloutResponse
 */
export class ProposeSetRolloutResponse extends Message<ProposeSetRolloutResponse> {
  /**
   * @generated from field: api.v1.capsule.SetProposal proposal = 1;
   */
  proposal?: SetProposal;

  /**
   * Breakdown of the changes that this deploy would make to the system.
   *
   * @generated from field: api.v1.capsule.DeploySetOutcome outcome = 2;
   */
  outcome?: DeploySetOutcome;

  constructor(data?: PartialMessage<ProposeSetRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ProposeSetRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: SetProposal },
    { no: 2, name: "outcome", kind: "message", T: DeploySetOutcome },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposeSetRolloutResponse {
    return new ProposeSetRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposeSetRolloutResponse {
    return new ProposeSetRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposeSetRolloutResponse {
    return new ProposeSetRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProposeSetRolloutResponse | PlainMessage<ProposeSetRolloutResponse> | undefined, b: ProposeSetRolloutResponse | PlainMessage<ProposeSetRolloutResponse> | undefined): boolean {
    return proto3.util.equals(ProposeSetRolloutResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListProposalsRequest
 */
export class ListProposalsRequest extends Message<ListProposalsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string capsule_id = 3;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Pagination pagination = 4;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListProposalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListProposalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProposalsRequest {
    return new ListProposalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProposalsRequest {
    return new ListProposalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProposalsRequest {
    return new ListProposalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProposalsRequest | PlainMessage<ListProposalsRequest> | undefined, b: ListProposalsRequest | PlainMessage<ListProposalsRequest> | undefined): boolean {
    return proto3.util.equals(ListProposalsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListProposalsResponse
 */
export class ListProposalsResponse extends Message<ListProposalsResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.Proposal proposals = 1;
   */
  proposals: Proposal[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListProposalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListProposalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposals", kind: "message", T: Proposal, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProposalsResponse {
    return new ListProposalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProposalsResponse {
    return new ListProposalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProposalsResponse {
    return new ListProposalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProposalsResponse | PlainMessage<ListProposalsResponse> | undefined, b: ListProposalsResponse | PlainMessage<ListProposalsResponse> | undefined): boolean {
    return proto3.util.equals(ListProposalsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListSetProposalsRequest
 */
export class ListSetProposalsRequest extends Message<ListSetProposalsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string capsule_id = 2;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListSetProposalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListSetProposalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSetProposalsRequest {
    return new ListSetProposalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSetProposalsRequest {
    return new ListSetProposalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSetProposalsRequest {
    return new ListSetProposalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSetProposalsRequest | PlainMessage<ListSetProposalsRequest> | undefined, b: ListSetProposalsRequest | PlainMessage<ListSetProposalsRequest> | undefined): boolean {
    return proto3.util.equals(ListSetProposalsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListSetProposalsResponse
 */
export class ListSetProposalsResponse extends Message<ListSetProposalsResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.SetProposal proposals = 1;
   */
  proposals: SetProposal[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListSetProposalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListSetProposalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposals", kind: "message", T: SetProposal, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSetProposalsResponse {
    return new ListSetProposalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSetProposalsResponse {
    return new ListSetProposalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSetProposalsResponse {
    return new ListSetProposalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSetProposalsResponse | PlainMessage<ListSetProposalsResponse> | undefined, b: ListSetProposalsResponse | PlainMessage<ListSetProposalsResponse> | undefined): boolean {
    return proto3.util.equals(ListSetProposalsResponse, a, b);
  }
}

/**
 * List instances request.
 *
 * @generated from message api.v1.capsule.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * Capsule to list instances from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * Project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * Environment to list instances from.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * if true, deleted instances will be included in the response.
   *
   * @generated from field: bool include_deleted = 5;
   */
  includeDeleted = false;

  /**
   * if true, existing instances will be excluded from the response.
   *
   * @generated from field: bool exclude_existing = 6;
   */
  excludeExisting = false;

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "exclude_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * List instances response.
 *
 * @generated from message api.v1.capsule.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * The instances.
   *
   * @generated from field: repeated api.v1.capsule.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * Total number of instances in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * Get status of an instance.
 *
 * @generated from message api.v1.capsule.GetInstanceStatusRequest
 */
export class GetInstanceStatusRequest extends Message<GetInstanceStatusRequest> {
  /**
   * The capsule to get the instance status from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance to get.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to get the instance from.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetInstanceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetInstanceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceStatusRequest | PlainMessage<GetInstanceStatusRequest> | undefined, b: GetInstanceStatusRequest | PlainMessage<GetInstanceStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceStatusRequest, a, b);
  }
}

/**
 * Get instance status response.
 *
 * @generated from message api.v1.capsule.GetInstanceStatusResponse
 */
export class GetInstanceStatusResponse extends Message<GetInstanceStatusResponse> {
  /**
   * The instance status.
   *
   * @generated from field: api.v1.capsule.instance.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetInstanceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetInstanceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceStatusResponse | PlainMessage<GetInstanceStatusResponse> | undefined, b: GetInstanceStatusResponse | PlainMessage<GetInstanceStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceStatusResponse, a, b);
  }
}

/**
 * List multiple instance statuses
 *
 * @generated from message api.v1.capsule.ListInstanceStatusesRequest
 */
export class ListInstanceStatusesRequest extends Message<ListInstanceStatusesRequest> {
  /**
   * The capsule to get the instance statuses from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule is.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to get the instance statuses from.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * if true, deleted instances will be included in the response.
   *
   * @generated from field: bool include_deleted = 5;
   */
  includeDeleted = false;

  /**
   * if true, existing instances will be excluded from the response.
   *
   * @generated from field: bool exclude_existing = 6;
   */
  excludeExisting = false;

  constructor(data?: PartialMessage<ListInstanceStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstanceStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "exclude_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceStatusesRequest | PlainMessage<ListInstanceStatusesRequest> | undefined, b: ListInstanceStatusesRequest | PlainMessage<ListInstanceStatusesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstanceStatusesRequest, a, b);
  }
}

/**
 * Response for listing multiple instance statuses
 *
 * @generated from message api.v1.capsule.ListInstanceStatusesResponse
 */
export class ListInstanceStatusesResponse extends Message<ListInstanceStatusesResponse> {
  /**
   * The instance statuses.
   *
   * @generated from field: repeated api.v1.capsule.instance.Status instances = 1;
   */
  instances: Status[] = [];

  /**
   * Total number of instances in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListInstanceStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstanceStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Status, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceStatusesResponse | PlainMessage<ListInstanceStatusesResponse> | undefined, b: ListInstanceStatusesResponse | PlainMessage<ListInstanceStatusesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstanceStatusesResponse, a, b);
  }
}

/**
 * RestartInstanceRequest restarts a single instance.
 *
 * @generated from message api.v1.capsule.RestartInstanceRequest
 */
export class RestartInstanceRequest extends Message<RestartInstanceRequest> {
  /**
   * The capsule to restart the instance in.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance to restart.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to restart the instance in.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  constructor(data?: PartialMessage<RestartInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RestartInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RestartInstanceRequest | PlainMessage<RestartInstanceRequest> | undefined, b: RestartInstanceRequest | PlainMessage<RestartInstanceRequest> | undefined): boolean {
    return proto3.util.equals(RestartInstanceRequest, a, b);
  }
}

/**
 * RestartInstanceResponse is an empty response.
 *
 * @generated from message api.v1.capsule.RestartInstanceResponse
 */
export class RestartInstanceResponse extends Message<RestartInstanceResponse> {
  constructor(data?: PartialMessage<RestartInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RestartInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RestartInstanceResponse | PlainMessage<RestartInstanceResponse> | undefined, b: RestartInstanceResponse | PlainMessage<RestartInstanceResponse> | undefined): boolean {
    return proto3.util.equals(RestartInstanceResponse, a, b);
  }
}

/**
 * ListRolloutsRequest lists rollouts for a capsule.
 *
 * @generated from message api.v1.capsule.ListRolloutsRequest
 */
export class ListRolloutsRequest extends Message<ListRolloutsRequest> {
  /**
   * The capsule to list rollouts for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to list rollouts for.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ListRolloutsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRolloutsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolloutsRequest | PlainMessage<ListRolloutsRequest> | undefined, b: ListRolloutsRequest | PlainMessage<ListRolloutsRequest> | undefined): boolean {
    return proto3.util.equals(ListRolloutsRequest, a, b);
  }
}

/**
 * ListRolloutsResponse lists rollouts for a capsule and an environment.
 *
 * @generated from message api.v1.capsule.ListRolloutsResponse
 */
export class ListRolloutsResponse extends Message<ListRolloutsResponse> {
  /**
   * The rollouts.
   *
   * @generated from field: repeated api.v1.capsule.Rollout rollouts = 1;
   */
  rollouts: Rollout[] = [];

  /**
   * Total number of rollouts in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListRolloutsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRolloutsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollouts", kind: "message", T: Rollout, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolloutsResponse | PlainMessage<ListRolloutsResponse> | undefined, b: ListRolloutsResponse | PlainMessage<ListRolloutsResponse> | undefined): boolean {
    return proto3.util.equals(ListRolloutsResponse, a, b);
  }
}

/**
 * GetRolloutRequest gets a single rollout.
 *
 * @generated from message api.v1.capsule.GetRolloutRequest
 */
export class GetRolloutRequest extends Message<GetRolloutRequest> {
  /**
   * The capsule to get the rollout from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The rollout to get.
   *
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutRequest | PlainMessage<GetRolloutRequest> | undefined, b: GetRolloutRequest | PlainMessage<GetRolloutRequest> | undefined): boolean {
    return proto3.util.equals(GetRolloutRequest, a, b);
  }
}

/**
 * GetRolloutResponse returns a single rollout for a capsule and an environment
 * in a project.
 *
 * @generated from message api.v1.capsule.GetRolloutResponse
 */
export class GetRolloutResponse extends Message<GetRolloutResponse> {
  /**
   * The rollout.
   *
   * @generated from field: api.v1.capsule.Rollout rollout = 1;
   */
  rollout?: Rollout;

  constructor(data?: PartialMessage<GetRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollout", kind: "message", T: Rollout },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutResponse | PlainMessage<GetRolloutResponse> | undefined, b: GetRolloutResponse | PlainMessage<GetRolloutResponse> | undefined): boolean {
    return proto3.util.equals(GetRolloutResponse, a, b);
  }
}

/**
 * AbortRolloutRequest aborts a rollout.
 *
 * @generated from message api.v1.capsule.AbortRolloutRequest
 */
export class AbortRolloutRequest extends Message<AbortRolloutRequest> {
  /**
   * The capsule to abort the rollout in.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The rollout to abort.
   *
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<AbortRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.AbortRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AbortRolloutRequest | PlainMessage<AbortRolloutRequest> | undefined, b: AbortRolloutRequest | PlainMessage<AbortRolloutRequest> | undefined): boolean {
    return proto3.util.equals(AbortRolloutRequest, a, b);
  }
}

/**
 * AbortRolloutResponse is an empty response.
 *
 * @generated from message api.v1.capsule.AbortRolloutResponse
 */
export class AbortRolloutResponse extends Message<AbortRolloutResponse> {
  constructor(data?: PartialMessage<AbortRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.AbortRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AbortRolloutResponse | PlainMessage<AbortRolloutResponse> | undefined, b: AbortRolloutResponse | PlainMessage<AbortRolloutResponse> | undefined): boolean {
    return proto3.util.equals(AbortRolloutResponse, a, b);
  }
}

/**
 * StopRolloutRequest aborts a rollout.
 *
 * @generated from message api.v1.capsule.StopRolloutRequest
 */
export class StopRolloutRequest extends Message<StopRolloutRequest> {
  /**
   * The capsule of the aborting rollout.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The rollout to stop.
   *
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<StopRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.StopRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopRolloutRequest {
    return new StopRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopRolloutRequest {
    return new StopRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopRolloutRequest {
    return new StopRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopRolloutRequest | PlainMessage<StopRolloutRequest> | undefined, b: StopRolloutRequest | PlainMessage<StopRolloutRequest> | undefined): boolean {
    return proto3.util.equals(StopRolloutRequest, a, b);
  }
}

/**
 * StopRolloutResponse is an empty response.
 *
 * @generated from message api.v1.capsule.StopRolloutResponse
 */
export class StopRolloutResponse extends Message<StopRolloutResponse> {
  constructor(data?: PartialMessage<StopRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.StopRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopRolloutResponse {
    return new StopRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopRolloutResponse {
    return new StopRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopRolloutResponse {
    return new StopRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopRolloutResponse | PlainMessage<StopRolloutResponse> | undefined, b: StopRolloutResponse | PlainMessage<StopRolloutResponse> | undefined): boolean {
    return proto3.util.equals(StopRolloutResponse, a, b);
  }
}

/**
 * ListEvents request for listing rollout events for a given rollout in a
 * capsule and environment.
 *
 * @generated from message api.v1.capsule.ListEventsRequest
 */
export class ListEventsRequest extends Message<ListEventsRequest> {
  /**
   * The capsule to list events for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The rollout to list events for.
   *
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 3;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * The environment to list events for.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ListEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined, b: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined): boolean {
    return proto3.util.equals(ListEventsRequest, a, b);
  }
}

/**
 * Response to List Events
 *
 * @generated from message api.v1.capsule.ListEventsResponse
 */
export class ListEventsResponse extends Message<ListEventsResponse> {
  /**
   * The events for a rollout in a capsule and environment for a given project.
   *
   * @generated from field: repeated api.v1.capsule.Event events = 1;
   */
  events: Event[] = [];

  /**
   * Total number of events in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined, b: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined): boolean {
    return proto3.util.equals(ListEventsResponse, a, b);
  }
}

/**
 * Request for getting metrics for a capsule and optionally a single instance.
 *
 * @generated from message api.v1.capsule.CapsuleMetricsRequest
 */
export class CapsuleMetricsRequest extends Message<CapsuleMetricsRequest> {
  /**
   * The capsule to get metrics for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * If set, only returns metrics for the given instance_id.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * The environment to get metrics for.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  /**
   * Return metrics generated after 'since'
   *
   * @generated from field: google.protobuf.Timestamp since = 6;
   */
  since?: Timestamp;

  constructor(data?: PartialMessage<CapsuleMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CapsuleMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "since", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleMetricsRequest | PlainMessage<CapsuleMetricsRequest> | undefined, b: CapsuleMetricsRequest | PlainMessage<CapsuleMetricsRequest> | undefined): boolean {
    return proto3.util.equals(CapsuleMetricsRequest, a, b);
  }
}

/**
 * Response to getting capsule metrics.
 *
 * @generated from message api.v1.capsule.CapsuleMetricsResponse
 */
export class CapsuleMetricsResponse extends Message<CapsuleMetricsResponse> {
  /**
   * Metrics
   *
   * @generated from field: repeated model.InstanceMetrics instance_metrics = 1;
   */
  instanceMetrics: InstanceMetrics[] = [];

  constructor(data?: PartialMessage<CapsuleMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CapsuleMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_metrics", kind: "message", T: InstanceMetrics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleMetricsResponse | PlainMessage<CapsuleMetricsResponse> | undefined, b: CapsuleMetricsResponse | PlainMessage<CapsuleMetricsResponse> | undefined): boolean {
    return proto3.util.equals(CapsuleMetricsResponse, a, b);
  }
}

/**
 * Request for getting custom metrics for a capsule in an environment.
 *
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsRequest
 */
export class GetCustomInstanceMetricsRequest extends Message<GetCustomInstanceMetricsRequest> {
  /**
   * The capsule to get metrics for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * The environment to get metrics for.
   *
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetCustomInstanceMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetCustomInstanceMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomInstanceMetricsRequest | PlainMessage<GetCustomInstanceMetricsRequest> | undefined, b: GetCustomInstanceMetricsRequest | PlainMessage<GetCustomInstanceMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetCustomInstanceMetricsRequest, a, b);
  }
}

/**
 * Response to getting custom metrics for a capsule in an environment.
 *
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsResponse
 */
export class GetCustomInstanceMetricsResponse extends Message<GetCustomInstanceMetricsResponse> {
  /**
   * Custom Metrics.
   *
   * @generated from field: repeated model.Metric metrics = 1;
   */
  metrics: Metric[] = [];

  constructor(data?: PartialMessage<GetCustomInstanceMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetCustomInstanceMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metrics", kind: "message", T: Metric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomInstanceMetricsResponse | PlainMessage<GetCustomInstanceMetricsResponse> | undefined, b: GetCustomInstanceMetricsResponse | PlainMessage<GetCustomInstanceMetricsResponse> | undefined): boolean {
    return proto3.util.equals(GetCustomInstanceMetricsResponse, a, b);
  }
}

/**
 * Request for getting job executions from cron jobs.
 *
 * @generated from message api.v1.capsule.GetJobExecutionsRequest
 */
export class GetJobExecutionsRequest extends Message<GetJobExecutionsRequest> {
  /**
   * The capsule to get job executions for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The name of the job to get executions for.
   *
   * @generated from field: string job_name = 2;
   */
  jobName = "";

  /**
   * Filtering executions by job state.
   *
   * @generated from field: repeated api.v1.capsule.JobState states = 4;
   */
  states: JobState[] = [];

  /**
   * Filtering executions created before this timestamp.
   *
   * @generated from field: google.protobuf.Timestamp created_from = 5;
   */
  createdFrom?: Timestamp;

  /**
   * Filtering executions created after this timestamp.
   *
   * @generated from field: google.protobuf.Timestamp created_to = 6;
   */
  createdTo?: Timestamp;

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 7;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 8;
   */
  projectId = "";

  /**
   * The environment to get job executions for.
   *
   * @generated from field: string environment_id = 9;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetJobExecutionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetJobExecutionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "states", kind: "enum", T: proto3.getEnumType(JobState), repeated: true },
    { no: 5, name: "created_from", kind: "message", T: Timestamp },
    { no: 6, name: "created_to", kind: "message", T: Timestamp },
    { no: 7, name: "pagination", kind: "message", T: Pagination },
    { no: 8, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJobExecutionsRequest {
    return new GetJobExecutionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJobExecutionsRequest {
    return new GetJobExecutionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJobExecutionsRequest {
    return new GetJobExecutionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetJobExecutionsRequest | PlainMessage<GetJobExecutionsRequest> | undefined, b: GetJobExecutionsRequest | PlainMessage<GetJobExecutionsRequest> | undefined): boolean {
    return proto3.util.equals(GetJobExecutionsRequest, a, b);
  }
}

/**
 * Response to getting job executions.
 *
 * @generated from message api.v1.capsule.GetJobExecutionsResponse
 */
export class GetJobExecutionsResponse extends Message<GetJobExecutionsResponse> {
  /**
   * Job executions.
   *
   * @generated from field: repeated api.v1.capsule.JobExecution job_executions = 1;
   */
  jobExecutions: JobExecution[] = [];

  /**
   * Total number of executions ignorring pagination.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<GetJobExecutionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetJobExecutionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_executions", kind: "message", T: JobExecution, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJobExecutionsResponse {
    return new GetJobExecutionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJobExecutionsResponse {
    return new GetJobExecutionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJobExecutionsResponse {
    return new GetJobExecutionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetJobExecutionsResponse | PlainMessage<GetJobExecutionsResponse> | undefined, b: GetJobExecutionsResponse | PlainMessage<GetJobExecutionsResponse> | undefined): boolean {
    return proto3.util.equals(GetJobExecutionsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRevisionRequest
 */
export class GetRevisionRequest extends Message<GetRevisionRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string capsule_id = 3;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Fingerprint fingerprint = 4;
   */
  fingerprint?: Fingerprint;

  constructor(data?: PartialMessage<GetRevisionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRevisionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fingerprint", kind: "message", T: Fingerprint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRevisionRequest {
    return new GetRevisionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRevisionRequest {
    return new GetRevisionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRevisionRequest {
    return new GetRevisionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRevisionRequest | PlainMessage<GetRevisionRequest> | undefined, b: GetRevisionRequest | PlainMessage<GetRevisionRequest> | undefined): boolean {
    return proto3.util.equals(GetRevisionRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRevisionResponse
 */
export class GetRevisionResponse extends Message<GetRevisionResponse> {
  /**
   * @generated from field: api.v1.capsule.Revision revision = 1;
   */
  revision?: Revision;

  constructor(data?: PartialMessage<GetRevisionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRevisionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revision", kind: "message", T: Revision },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRevisionResponse {
    return new GetRevisionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRevisionResponse {
    return new GetRevisionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRevisionResponse {
    return new GetRevisionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRevisionResponse | PlainMessage<GetRevisionResponse> | undefined, b: GetRevisionResponse | PlainMessage<GetRevisionResponse> | undefined): boolean {
    return proto3.util.equals(GetRevisionResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRolloutOfRevisionsRequest
 */
export class GetRolloutOfRevisionsRequest extends Message<GetRolloutOfRevisionsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string capsule_id = 3;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Fingerprints fingerprints = 4;
   */
  fingerprints?: Fingerprints;

  constructor(data?: PartialMessage<GetRolloutOfRevisionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutOfRevisionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fingerprints", kind: "message", T: Fingerprints },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutOfRevisionsRequest {
    return new GetRolloutOfRevisionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutOfRevisionsRequest {
    return new GetRolloutOfRevisionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutOfRevisionsRequest {
    return new GetRolloutOfRevisionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutOfRevisionsRequest | PlainMessage<GetRolloutOfRevisionsRequest> | undefined, b: GetRolloutOfRevisionsRequest | PlainMessage<GetRolloutOfRevisionsRequest> | undefined): boolean {
    return proto3.util.equals(GetRolloutOfRevisionsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRolloutOfRevisionsResponse
 */
export class GetRolloutOfRevisionsResponse extends Message<GetRolloutOfRevisionsResponse> {
  /**
   * @generated from oneof api.v1.capsule.GetRolloutOfRevisionsResponse.kind
   */
  kind: {
    /**
     * @generated from field: api.v1.capsule.GetRolloutOfRevisionsResponse.NoRollout no_rollout = 4;
     */
    value: GetRolloutOfRevisionsResponse_NoRollout;
    case: "noRollout";
  } | {
    /**
     * @generated from field: api.v1.capsule.Rollout rollout = 5;
     */
    value: Rollout;
    case: "rollout";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetRolloutOfRevisionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutOfRevisionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "no_rollout", kind: "message", T: GetRolloutOfRevisionsResponse_NoRollout, oneof: "kind" },
    { no: 5, name: "rollout", kind: "message", T: Rollout, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutOfRevisionsResponse {
    return new GetRolloutOfRevisionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutOfRevisionsResponse {
    return new GetRolloutOfRevisionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutOfRevisionsResponse {
    return new GetRolloutOfRevisionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutOfRevisionsResponse | PlainMessage<GetRolloutOfRevisionsResponse> | undefined, b: GetRolloutOfRevisionsResponse | PlainMessage<GetRolloutOfRevisionsResponse> | undefined): boolean {
    return proto3.util.equals(GetRolloutOfRevisionsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRolloutOfRevisionsResponse.NoRollout
 */
export class GetRolloutOfRevisionsResponse_NoRollout extends Message<GetRolloutOfRevisionsResponse_NoRollout> {
  /**
   * Indicates no rollout with a project revision at least as new as the one
   * given.
   *
   * @generated from field: bool project = 1;
   */
  project = false;

  /**
   * Indicates no rollout with an environment revision at least as new as the
   * one given.
   *
   * @generated from field: bool environment = 2;
   */
  environment = false;

  /**
   * Indicates no rollout with a capsule set revision at least as new as the
   * one given.
   *
   * @generated from field: bool capsule_set = 3;
   */
  capsuleSet = false;

  /**
   * Indicates no rollout with a capsule revision at least as new as the one
   * given.
   *
   * @generated from field: bool capsule = 4;
   */
  capsule = false;

  constructor(data?: PartialMessage<GetRolloutOfRevisionsResponse_NoRollout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutOfRevisionsResponse.NoRollout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "environment", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "capsule_set", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "capsule", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutOfRevisionsResponse_NoRollout {
    return new GetRolloutOfRevisionsResponse_NoRollout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutOfRevisionsResponse_NoRollout {
    return new GetRolloutOfRevisionsResponse_NoRollout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutOfRevisionsResponse_NoRollout {
    return new GetRolloutOfRevisionsResponse_NoRollout().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutOfRevisionsResponse_NoRollout | PlainMessage<GetRolloutOfRevisionsResponse_NoRollout> | undefined, b: GetRolloutOfRevisionsResponse_NoRollout | PlainMessage<GetRolloutOfRevisionsResponse_NoRollout> | undefined): boolean {
    return proto3.util.equals(GetRolloutOfRevisionsResponse_NoRollout, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetEffectiveGitSettingsRequest
 */
export class GetEffectiveGitSettingsRequest extends Message<GetEffectiveGitSettingsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string capsule_id = 3;
   */
  capsuleId = "";

  constructor(data?: PartialMessage<GetEffectiveGitSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetEffectiveGitSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEffectiveGitSettingsRequest {
    return new GetEffectiveGitSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEffectiveGitSettingsRequest {
    return new GetEffectiveGitSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEffectiveGitSettingsRequest {
    return new GetEffectiveGitSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEffectiveGitSettingsRequest | PlainMessage<GetEffectiveGitSettingsRequest> | undefined, b: GetEffectiveGitSettingsRequest | PlainMessage<GetEffectiveGitSettingsRequest> | undefined): boolean {
    return proto3.util.equals(GetEffectiveGitSettingsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetEffectiveGitSettingsResponse
 */
export class GetEffectiveGitSettingsResponse extends Message<GetEffectiveGitSettingsResponse> {
  /**
   * @generated from field: model.GitStore git = 1;
   */
  git?: GitStore;

  /**
   * @generated from field: bool environment_enabled = 2;
   */
  environmentEnabled = false;

  constructor(data?: PartialMessage<GetEffectiveGitSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetEffectiveGitSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git", kind: "message", T: GitStore },
    { no: 2, name: "environment_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEffectiveGitSettingsResponse {
    return new GetEffectiveGitSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEffectiveGitSettingsResponse {
    return new GetEffectiveGitSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEffectiveGitSettingsResponse {
    return new GetEffectiveGitSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEffectiveGitSettingsResponse | PlainMessage<GetEffectiveGitSettingsResponse> | undefined, b: GetEffectiveGitSettingsResponse | PlainMessage<GetEffectiveGitSettingsResponse> | undefined): boolean {
    return proto3.util.equals(GetEffectiveGitSettingsResponse, a, b);
  }
}

