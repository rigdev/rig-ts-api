// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file api/v1/capsule/service.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Capsule, Update } from "./capsule_pb.js";
import { Log } from "./log_pb.js";
import { Pagination } from "../../../model/common_pb.js";
import { Build, Origin } from "./build_pb.js";
import { Change, Rollout } from "./rollout_pb.js";
import { Instance } from "./instance_pb.js";
import { Status } from "./instance/status_pb.js";
import { Event } from "./event_pb.js";
import { InstanceMetrics } from "./metrics_pb.js";

/**
 * @generated from message api.v1.capsule.StreamData
 */
export class StreamData extends Message<StreamData> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: bool closed = 2;
   */
  closed = false;

  constructor(data?: PartialMessage<StreamData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.StreamData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamData {
    return new StreamData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamData {
    return new StreamData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamData {
    return new StreamData().fromJsonString(jsonString, options);
  }

  static equals(a: StreamData | PlainMessage<StreamData> | undefined, b: StreamData | PlainMessage<StreamData> | undefined): boolean {
    return proto3.util.equals(StreamData, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ExecuteRequest
 */
export class ExecuteRequest extends Message<ExecuteRequest> {
  /**
   * @generated from oneof api.v1.capsule.ExecuteRequest.request
   */
  request: {
    /**
     * @generated from field: api.v1.capsule.ExecuteRequest.Start start = 1;
     */
    value: ExecuteRequest_Start;
    case: "start";
  } | {
    /**
     * @generated from field: api.v1.capsule.StreamData stdin = 2;
     */
    value: StreamData;
    case: "stdin";
  } | {
    /**
     * @generated from field: api.v1.capsule.ExecuteRequest.Resize resize = 3;
     */
    value: ExecuteRequest_Resize;
    case: "resize";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ExecuteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: ExecuteRequest_Start, oneof: "request" },
    { no: 2, name: "stdin", kind: "message", T: StreamData, oneof: "request" },
    { no: 3, name: "resize", kind: "message", T: ExecuteRequest_Resize, oneof: "request" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined, b: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ExecuteRequest.Start
 */
export class ExecuteRequest_Start extends Message<ExecuteRequest_Start> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * @generated from field: string command = 3;
   */
  command = "";

  /**
   * @generated from field: repeated string arguments = 4;
   */
  arguments: string[] = [];

  /**
   * @generated from field: api.v1.capsule.ExecuteRequest.Resize tty = 5;
   */
  tty?: ExecuteRequest_Resize;

  /**
   * @generated from field: bool interactive = 6;
   */
  interactive = false;

  constructor(data?: PartialMessage<ExecuteRequest_Start>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest.Start";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "arguments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tty", kind: "message", T: ExecuteRequest_Resize },
    { no: 6, name: "interactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Start | PlainMessage<ExecuteRequest_Start> | undefined, b: ExecuteRequest_Start | PlainMessage<ExecuteRequest_Start> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Start, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ExecuteRequest.Resize
 */
export class ExecuteRequest_Resize extends Message<ExecuteRequest_Resize> {
  /**
   * @generated from field: uint32 height = 1;
   */
  height = 0;

  /**
   * @generated from field: uint32 width = 2;
   */
  width = 0;

  constructor(data?: PartialMessage<ExecuteRequest_Resize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest.Resize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Resize | PlainMessage<ExecuteRequest_Resize> | undefined, b: ExecuteRequest_Resize | PlainMessage<ExecuteRequest_Resize> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Resize, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ExecuteResponse
 */
export class ExecuteResponse extends Message<ExecuteResponse> {
  /**
   * @generated from oneof api.v1.capsule.ExecuteResponse.response
   */
  response: {
    /**
     * @generated from field: api.v1.capsule.StreamData stdout = 1;
     */
    value: StreamData;
    case: "stdout";
  } | {
    /**
     * @generated from field: api.v1.capsule.StreamData stderr = 2;
     */
    value: StreamData;
    case: "stderr";
  } | {
    /**
     * @generated from field: int32 exit_code = 3;
     */
    value: number;
    case: "exitCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "message", T: StreamData, oneof: "response" },
    { no: 2, name: "stderr", kind: "message", T: StreamData, oneof: "response" },
    { no: 3, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined, b: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CreateRequest
 */
export class CreateRequest extends Message<CreateRequest> {
  /**
   * The name of the capsule. This property must be unique and cannot be changed
   * after creation.
   * Resources created in associating with the capsule will use this name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The initial properties of the capsule.
   *
   * @generated from field: repeated api.v1.capsule.Update initializers = 2;
   */
  initializers: Update[] = [];

  constructor(data?: PartialMessage<CreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initializers", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRequest {
    return new CreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRequest | PlainMessage<CreateRequest> | undefined, b: CreateRequest | PlainMessage<CreateRequest> | undefined): boolean {
    return proto3.util.equals(CreateRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CreateResponse
 */
export class CreateResponse extends Message<CreateResponse> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  constructor(data?: PartialMessage<CreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResponse {
    return new CreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResponse | PlainMessage<CreateResponse> | undefined, b: CreateResponse | PlainMessage<CreateResponse> | undefined): boolean {
    return proto3.util.equals(CreateResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRequest
 */
export class GetRequest extends Message<GetRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  constructor(data?: PartialMessage<GetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequest {
    return new GetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequest | PlainMessage<GetRequest> | undefined, b: GetRequest | PlainMessage<GetRequest> | undefined): boolean {
    return proto3.util.equals(GetRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetResponse
 */
export class GetResponse extends Message<GetResponse> {
  /**
   * @generated from field: api.v1.capsule.Capsule capsule = 1;
   */
  capsule?: Capsule;

  constructor(data?: PartialMessage<GetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: Capsule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResponse {
    return new GetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResponse | PlainMessage<GetResponse> | undefined, b: GetResponse | PlainMessage<GetResponse> | undefined): boolean {
    return proto3.util.equals(GetResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * The capsule to delete.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.LogsRequest
 */
export class LogsRequest extends Message<LogsRequest> {
  /**
   * The capsule to read logs from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance in the capsule to read logs from.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * If true, the request will stay open and stream new log messages.
   *
   * @generated from field: bool follow = 3;
   */
  follow = false;

  /**
   * If set, will not show logs older than since.
   *
   * @generated from field: google.protobuf.Duration since = 4;
   */
  since?: Duration;

  constructor(data?: PartialMessage<LogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.LogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "follow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "since", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogsRequest {
    return new LogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogsRequest {
    return new LogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogsRequest {
    return new LogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LogsRequest | PlainMessage<LogsRequest> | undefined, b: LogsRequest | PlainMessage<LogsRequest> | undefined): boolean {
    return proto3.util.equals(LogsRequest, a, b);
  }
}

/**
 * The response of a capsule.Logs RPC
 *
 * @generated from message api.v1.capsule.LogsResponse
 */
export class LogsResponse extends Message<LogsResponse> {
  /**
   * @generated from field: api.v1.capsule.Log log = 1;
   */
  log?: Log;

  constructor(data?: PartialMessage<LogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.LogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: Log },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogsResponse {
    return new LogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogsResponse {
    return new LogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogsResponse {
    return new LogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LogsResponse | PlainMessage<LogsResponse> | undefined, b: LogsResponse | PlainMessage<LogsResponse> | undefined): boolean {
    return proto3.util.equals(LogsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * The capsule to update.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The updates to apply to the capsule.
   *
   * @generated from field: repeated api.v1.capsule.Update updates = 2;
   */
  updates: Update[] = [];

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: Update, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * The capsules.
   *
   * @generated from field: repeated api.v1.capsule.Capsule capsules = 1;
   */
  capsules: Capsule[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsules", kind: "message", T: Capsule, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CreateBuildRequest
 */
export class CreateBuildRequest extends Message<CreateBuildRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: string image = 2;
   */
  image = "";

  /**
   * @generated from field: string digest = 3;
   */
  digest = "";

  /**
   * @generated from field: api.v1.capsule.Origin origin = 4;
   */
  origin?: Origin;

  /**
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: bool skip_image_check = 6;
   */
  skipImageCheck = false;

  constructor(data?: PartialMessage<CreateBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "origin", kind: "message", T: Origin },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "skip_image_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined, b: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined): boolean {
    return proto3.util.equals(CreateBuildRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CreateBuildResponse
 */
export class CreateBuildResponse extends Message<CreateBuildResponse> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * @generated from field: bool created_new_build = 2;
   */
  createdNewBuild = false;

  constructor(data?: PartialMessage<CreateBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_new_build", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildResponse {
    return new CreateBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildResponse {
    return new CreateBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBuildResponse {
    return new CreateBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBuildResponse | PlainMessage<CreateBuildResponse> | undefined, b: CreateBuildResponse | PlainMessage<CreateBuildResponse> | undefined): boolean {
    return proto3.util.equals(CreateBuildResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListBuildsRequest
 */
export class ListBuildsRequest extends Message<ListBuildsRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListBuildsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListBuildsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBuildsRequest | PlainMessage<ListBuildsRequest> | undefined, b: ListBuildsRequest | PlainMessage<ListBuildsRequest> | undefined): boolean {
    return proto3.util.equals(ListBuildsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListBuildsResponse
 */
export class ListBuildsResponse extends Message<ListBuildsResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.Build builds = 1;
   */
  builds: Build[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListBuildsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListBuildsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: Build, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBuildsResponse | PlainMessage<ListBuildsResponse> | undefined, b: ListBuildsResponse | PlainMessage<ListBuildsResponse> | undefined): boolean {
    return proto3.util.equals(ListBuildsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeleteBuildRequest
 */
export class DeleteBuildRequest extends Message<DeleteBuildRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: string build_id = 2;
   */
  buildId = "";

  constructor(data?: PartialMessage<DeleteBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBuildRequest {
    return new DeleteBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBuildRequest {
    return new DeleteBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBuildRequest {
    return new DeleteBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBuildRequest | PlainMessage<DeleteBuildRequest> | undefined, b: DeleteBuildRequest | PlainMessage<DeleteBuildRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBuildRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeleteBuildResponse
 */
export class DeleteBuildResponse extends Message<DeleteBuildResponse> {
  constructor(data?: PartialMessage<DeleteBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBuildResponse {
    return new DeleteBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBuildResponse {
    return new DeleteBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBuildResponse {
    return new DeleteBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBuildResponse | PlainMessage<DeleteBuildResponse> | undefined, b: DeleteBuildResponse | PlainMessage<DeleteBuildResponse> | undefined): boolean {
    return proto3.util.equals(DeleteBuildResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeployRequest
 */
export class DeployRequest extends Message<DeployRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Changes to include in the new rollout.
   *
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * Force deploy, aborting an existing rollout if ongoing.
   *
   * @generated from field: bool force = 3;
   */
  force = false;

  constructor(data?: PartialMessage<DeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployRequest {
    return new DeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployRequest | PlainMessage<DeployRequest> | undefined, b: DeployRequest | PlainMessage<DeployRequest> | undefined): boolean {
    return proto3.util.equals(DeployRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.DeployResponse
 */
export class DeployResponse extends Message<DeployResponse> {
  /**
   * @generated from field: uint64 rollout_id = 1;
   */
  rolloutId = protoInt64.zero;

  constructor(data?: PartialMessage<DeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployResponse {
    return new DeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployResponse | PlainMessage<DeployResponse> | undefined, b: DeployResponse | PlainMessage<DeployResponse> | undefined): boolean {
    return proto3.util.equals(DeployResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetInstanceStatusRequest
 */
export class GetInstanceStatusRequest extends Message<GetInstanceStatusRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetInstanceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetInstanceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceStatusRequest | PlainMessage<GetInstanceStatusRequest> | undefined, b: GetInstanceStatusRequest | PlainMessage<GetInstanceStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceStatusRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetInstanceStatusResponse
 */
export class GetInstanceStatusResponse extends Message<GetInstanceStatusResponse> {
  /**
   * @generated from field: api.v1.capsule.instance.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetInstanceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetInstanceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceStatusResponse | PlainMessage<GetInstanceStatusResponse> | undefined, b: GetInstanceStatusResponse | PlainMessage<GetInstanceStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceStatusResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListInstanceStatusesRequest
 */
export class ListInstanceStatusesRequest extends Message<ListInstanceStatusesRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListInstanceStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstanceStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceStatusesRequest | PlainMessage<ListInstanceStatusesRequest> | undefined, b: ListInstanceStatusesRequest | PlainMessage<ListInstanceStatusesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstanceStatusesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListInstanceStatusesResponse
 */
export class ListInstanceStatusesResponse extends Message<ListInstanceStatusesResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.instance.Status instances = 1;
   */
  instances: Status[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListInstanceStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstanceStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Status, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceStatusesResponse | PlainMessage<ListInstanceStatusesResponse> | undefined, b: ListInstanceStatusesResponse | PlainMessage<ListInstanceStatusesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstanceStatusesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.RestartInstanceRequest
 */
export class RestartInstanceRequest extends Message<RestartInstanceRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  constructor(data?: PartialMessage<RestartInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RestartInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RestartInstanceRequest | PlainMessage<RestartInstanceRequest> | undefined, b: RestartInstanceRequest | PlainMessage<RestartInstanceRequest> | undefined): boolean {
    return proto3.util.equals(RestartInstanceRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.RestartInstanceResponse
 */
export class RestartInstanceResponse extends Message<RestartInstanceResponse> {
  constructor(data?: PartialMessage<RestartInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RestartInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RestartInstanceResponse | PlainMessage<RestartInstanceResponse> | undefined, b: RestartInstanceResponse | PlainMessage<RestartInstanceResponse> | undefined): boolean {
    return proto3.util.equals(RestartInstanceResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListRolloutsRequest
 */
export class ListRolloutsRequest extends Message<ListRolloutsRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListRolloutsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRolloutsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolloutsRequest | PlainMessage<ListRolloutsRequest> | undefined, b: ListRolloutsRequest | PlainMessage<ListRolloutsRequest> | undefined): boolean {
    return proto3.util.equals(ListRolloutsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListRolloutsResponse
 */
export class ListRolloutsResponse extends Message<ListRolloutsResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.Rollout rollouts = 1;
   */
  rollouts: Rollout[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListRolloutsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRolloutsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollouts", kind: "message", T: Rollout, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolloutsResponse | PlainMessage<ListRolloutsResponse> | undefined, b: ListRolloutsResponse | PlainMessage<ListRolloutsResponse> | undefined): boolean {
    return proto3.util.equals(ListRolloutsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRolloutRequest
 */
export class GetRolloutRequest extends Message<GetRolloutRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  constructor(data?: PartialMessage<GetRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutRequest | PlainMessage<GetRolloutRequest> | undefined, b: GetRolloutRequest | PlainMessage<GetRolloutRequest> | undefined): boolean {
    return proto3.util.equals(GetRolloutRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetRolloutResponse
 */
export class GetRolloutResponse extends Message<GetRolloutResponse> {
  /**
   * @generated from field: api.v1.capsule.Rollout rollout = 1;
   */
  rollout?: Rollout;

  constructor(data?: PartialMessage<GetRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollout", kind: "message", T: Rollout },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutResponse | PlainMessage<GetRolloutResponse> | undefined, b: GetRolloutResponse | PlainMessage<GetRolloutResponse> | undefined): boolean {
    return proto3.util.equals(GetRolloutResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.AbortRolloutRequest
 */
export class AbortRolloutRequest extends Message<AbortRolloutRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  constructor(data?: PartialMessage<AbortRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.AbortRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AbortRolloutRequest | PlainMessage<AbortRolloutRequest> | undefined, b: AbortRolloutRequest | PlainMessage<AbortRolloutRequest> | undefined): boolean {
    return proto3.util.equals(AbortRolloutRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.AbortRolloutResponse
 */
export class AbortRolloutResponse extends Message<AbortRolloutResponse> {
  constructor(data?: PartialMessage<AbortRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.AbortRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AbortRolloutResponse | PlainMessage<AbortRolloutResponse> | undefined, b: AbortRolloutResponse | PlainMessage<AbortRolloutResponse> | undefined): boolean {
    return proto3.util.equals(AbortRolloutResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListEventsRequest
 */
export class ListEventsRequest extends Message<ListEventsRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * @generated from field: model.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined, b: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined): boolean {
    return proto3.util.equals(ListEventsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.ListEventsResponse
 */
export class ListEventsResponse extends Message<ListEventsResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.Event events = 1;
   */
  events: Event[] = [];

  /**
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined, b: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined): boolean {
    return proto3.util.equals(ListEventsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CapsuleMetricsRequest
 */
export class CapsuleMetricsRequest extends Message<CapsuleMetricsRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * If set, only returns metrics for the given instance_id.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * @generated from field: model.Pagination pagination = 3;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<CapsuleMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CapsuleMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleMetricsRequest | PlainMessage<CapsuleMetricsRequest> | undefined, b: CapsuleMetricsRequest | PlainMessage<CapsuleMetricsRequest> | undefined): boolean {
    return proto3.util.equals(CapsuleMetricsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.CapsuleMetricsResponse
 */
export class CapsuleMetricsResponse extends Message<CapsuleMetricsResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.InstanceMetrics instance_metrics = 1;
   */
  instanceMetrics: InstanceMetrics[] = [];

  constructor(data?: PartialMessage<CapsuleMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CapsuleMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_metrics", kind: "message", T: InstanceMetrics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleMetricsResponse | PlainMessage<CapsuleMetricsResponse> | undefined, b: CapsuleMetricsResponse | PlainMessage<CapsuleMetricsResponse> | undefined): boolean {
    return proto3.util.equals(CapsuleMetricsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsRequest
 */
export class GetCustomInstanceMetricsRequest extends Message<GetCustomInstanceMetricsRequest> {
  /**
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  constructor(data?: PartialMessage<GetCustomInstanceMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetCustomInstanceMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomInstanceMetricsRequest | PlainMessage<GetCustomInstanceMetricsRequest> | undefined, b: GetCustomInstanceMetricsRequest | PlainMessage<GetCustomInstanceMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetCustomInstanceMetricsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsResponse
 */
export class GetCustomInstanceMetricsResponse extends Message<GetCustomInstanceMetricsResponse> {
  /**
   * @generated from field: repeated api.v1.capsule.Metric metrics = 1;
   */
  metrics: Metric[] = [];

  constructor(data?: PartialMessage<GetCustomInstanceMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetCustomInstanceMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metrics", kind: "message", T: Metric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomInstanceMetricsResponse | PlainMessage<GetCustomInstanceMetricsResponse> | undefined, b: GetCustomInstanceMetricsResponse | PlainMessage<GetCustomInstanceMetricsResponse> | undefined): boolean {
    return proto3.util.equals(GetCustomInstanceMetricsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.capsule.Metric
 */
export class Metric extends Message<Metric> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: double latest_value = 2;
   */
  latestValue = 0;

  /**
   * @generated from field: google.protobuf.Timestamp latest_timestamp = 3;
   */
  latestTimestamp?: Timestamp;

  constructor(data?: PartialMessage<Metric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Metric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "latest_timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metric {
    return new Metric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJsonString(jsonString, options);
  }

  static equals(a: Metric | PlainMessage<Metric> | undefined, b: Metric | PlainMessage<Metric> | undefined): boolean {
    return proto3.util.equals(Metric, a, b);
  }
}

