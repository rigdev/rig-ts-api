// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file api/v1/capsule/service.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Capsule, Update } from "./capsule_pb.js";
import { Log } from "./log_pb.js";
import { Pagination } from "../../../model/common_pb.js";
import { Change } from "./change_pb.js";
import { Rollout, RolloutConfig } from "./rollout_pb.js";
import { Instance } from "./instance_pb.js";
import { Status } from "./instance/status_pb.js";
import { Event } from "./event_pb.js";
import { InstanceMetrics } from "./metrics_pb.js";
import { JobExecution, JobState } from "./job_pb.js";

/**
 * StreamData for Execute RPC.
 *
 * @generated from message api.v1.capsule.StreamData
 */
export class StreamData extends Message<StreamData> {
  /**
   * Stream data.
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * If the stream is closed.
   *
   * @generated from field: bool closed = 2;
   */
  closed = false;

  constructor(data?: PartialMessage<StreamData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.StreamData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamData {
    return new StreamData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamData {
    return new StreamData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamData {
    return new StreamData().fromJsonString(jsonString, options);
  }

  static equals(a: StreamData | PlainMessage<StreamData> | undefined, b: StreamData | PlainMessage<StreamData> | undefined): boolean {
    return proto3.util.equals(StreamData, a, b);
  }
}

/**
 * Execute request. This can either be a request to start a request, a terminal
 * resize msg or a stream data msg.
 *
 * @generated from message api.v1.capsule.ExecuteRequest
 */
export class ExecuteRequest extends Message<ExecuteRequest> {
  /**
   * @generated from oneof api.v1.capsule.ExecuteRequest.request
   */
  request: {
    /**
     * Start request.
     *
     * @generated from field: api.v1.capsule.ExecuteRequest.Start start = 1;
     */
    value: ExecuteRequest_Start;
    case: "start";
  } | {
    /**
     * Stream stdin request
     *
     * @generated from field: api.v1.capsule.StreamData stdin = 2;
     */
    value: StreamData;
    case: "stdin";
  } | {
    /**
     * Resize request
     *
     * @generated from field: api.v1.capsule.ExecuteRequest.Resize resize = 3;
     */
    value: ExecuteRequest_Resize;
    case: "resize";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The project ID.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * The environment ID.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ExecuteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: ExecuteRequest_Start, oneof: "request" },
    { no: 2, name: "stdin", kind: "message", T: StreamData, oneof: "request" },
    { no: 3, name: "resize", kind: "message", T: ExecuteRequest_Resize, oneof: "request" },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined, b: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest, a, b);
  }
}

/**
 * Exec start request
 *
 * @generated from message api.v1.capsule.ExecuteRequest.Start
 */
export class ExecuteRequest_Start extends Message<ExecuteRequest_Start> {
  /**
   * The capsule to execute in.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance to execute in.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The command to execute.
   *
   * @generated from field: string command = 3;
   */
  command = "";

  /**
   * The arguments to the command.
   *
   * @generated from field: repeated string arguments = 4;
   */
  arguments: string[] = [];

  /**
   * The initial terminal size.
   *
   * @generated from field: api.v1.capsule.ExecuteRequest.Resize tty = 5;
   */
  tty?: ExecuteRequest_Resize;

  /**
   * If the command is interactive.
   *
   * @generated from field: bool interactive = 6;
   */
  interactive = false;

  constructor(data?: PartialMessage<ExecuteRequest_Start>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest.Start";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "arguments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tty", kind: "message", T: ExecuteRequest_Resize },
    { no: 6, name: "interactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Start {
    return new ExecuteRequest_Start().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Start | PlainMessage<ExecuteRequest_Start> | undefined, b: ExecuteRequest_Start | PlainMessage<ExecuteRequest_Start> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Start, a, b);
  }
}

/**
 * Terminal resize request.
 *
 * @generated from message api.v1.capsule.ExecuteRequest.Resize
 */
export class ExecuteRequest_Resize extends Message<ExecuteRequest_Resize> {
  /**
   * The new terminal height.
   *
   * @generated from field: uint32 height = 1;
   */
  height = 0;

  /**
   * The new terminal width.
   *
   * @generated from field: uint32 width = 2;
   */
  width = 0;

  constructor(data?: PartialMessage<ExecuteRequest_Resize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteRequest.Resize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Resize {
    return new ExecuteRequest_Resize().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Resize | PlainMessage<ExecuteRequest_Resize> | undefined, b: ExecuteRequest_Resize | PlainMessage<ExecuteRequest_Resize> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Resize, a, b);
  }
}

/**
 * Execute response.
 *
 * @generated from message api.v1.capsule.ExecuteResponse
 */
export class ExecuteResponse extends Message<ExecuteResponse> {
  /**
   * @generated from oneof api.v1.capsule.ExecuteResponse.response
   */
  response: {
    /**
     * Stdout of the execute.
     *
     * @generated from field: api.v1.capsule.StreamData stdout = 1;
     */
    value: StreamData;
    case: "stdout";
  } | {
    /**
     * Stderr in case of an error.
     *
     * @generated from field: api.v1.capsule.StreamData stderr = 2;
     */
    value: StreamData;
    case: "stderr";
  } | {
    /**
     * Exit code of the execute.
     *
     * @generated from field: int32 exit_code = 3;
     */
    value: number;
    case: "exitCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "message", T: StreamData, oneof: "response" },
    { no: 2, name: "stderr", kind: "message", T: StreamData, oneof: "response" },
    { no: 3, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined, b: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteResponse, a, b);
  }
}

/**
 * Create capsule request.
 *
 * @generated from message api.v1.capsule.CreateRequest
 */
export class CreateRequest extends Message<CreateRequest> {
  /**
   * The name of the capsule. This property must be unique for a project and
   * cannot be changed after creation. Resources created in associating with the
   * capsule will use this name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Deprecated field: The initial properties of the capsule.
   *
   * @generated from field: repeated api.v1.capsule.Update initializers = 2;
   */
  initializers: Update[] = [];

  /**
   * The project to create the capsule in.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<CreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initializers", kind: "message", T: Update, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRequest {
    return new CreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRequest | PlainMessage<CreateRequest> | undefined, b: CreateRequest | PlainMessage<CreateRequest> | undefined): boolean {
    return proto3.util.equals(CreateRequest, a, b);
  }
}

/**
 * Create capsule response.
 *
 * @generated from message api.v1.capsule.CreateResponse
 */
export class CreateResponse extends Message<CreateResponse> {
  /**
   * ID of the capsule. This is the same as the name.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  constructor(data?: PartialMessage<CreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResponse {
    return new CreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResponse | PlainMessage<CreateResponse> | undefined, b: CreateResponse | PlainMessage<CreateResponse> | undefined): boolean {
    return proto3.util.equals(CreateResponse, a, b);
  }
}

/**
 * Request to get a capsule.
 *
 * @generated from message api.v1.capsule.GetRequest
 */
export class GetRequest extends Message<GetRequest> {
  /**
   * Capsule to get.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Project in which the capsule is.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequest {
    return new GetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequest {
    return new GetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRequest | PlainMessage<GetRequest> | undefined, b: GetRequest | PlainMessage<GetRequest> | undefined): boolean {
    return proto3.util.equals(GetRequest, a, b);
  }
}

/**
 * Response to get a capsule.
 *
 * @generated from message api.v1.capsule.GetResponse
 */
export class GetResponse extends Message<GetResponse> {
  /**
   * The capsule.
   *
   * @generated from field: api.v1.capsule.Capsule capsule = 1;
   */
  capsule?: Capsule;

  constructor(data?: PartialMessage<GetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: Capsule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResponse {
    return new GetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResponse {
    return new GetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResponse | PlainMessage<GetResponse> | undefined, b: GetResponse | PlainMessage<GetResponse> | undefined): boolean {
    return proto3.util.equals(GetResponse, a, b);
  }
}

/**
 * Request to delete a capsule.
 *
 * @generated from message api.v1.capsule.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * The capsule to delete.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule is to be deleted.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * Empty delete response.
 *
 * @generated from message api.v1.capsule.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * Request to get instance logs from a capsule.
 *
 * @generated from message api.v1.capsule.LogsRequest
 */
export class LogsRequest extends Message<LogsRequest> {
  /**
   * The capsule to read logs from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance in the capsule to read logs from.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * If true, the request will stay open and stream new log messages.
   *
   * @generated from field: bool follow = 3;
   */
  follow = false;

  /**
   * If set, will not show logs older than since.
   *
   * @generated from field: google.protobuf.Duration since = 4;
   */
  since?: Duration;

  /**
   * The project in which the capsule is.
   *
   * @generated from field: string project_id = 5;
   */
  projectId = "";

  /**
   * Environment to get logs from.
   *
   * @generated from field: string environment_id = 6;
   */
  environmentId = "";

  /**
   * If true, include logs from previously terminated containers
   *
   * @generated from field: bool previous_containers = 7;
   */
  previousContainers = false;

  constructor(data?: PartialMessage<LogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.LogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "follow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "since", kind: "message", T: Duration },
    { no: 5, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "previous_containers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogsRequest {
    return new LogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogsRequest {
    return new LogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogsRequest {
    return new LogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LogsRequest | PlainMessage<LogsRequest> | undefined, b: LogsRequest | PlainMessage<LogsRequest> | undefined): boolean {
    return proto3.util.equals(LogsRequest, a, b);
  }
}

/**
 * The response of a capsule.Logs RPC
 *
 * @generated from message api.v1.capsule.LogsResponse
 */
export class LogsResponse extends Message<LogsResponse> {
  /**
   * The actual logs
   *
   * @generated from field: api.v1.capsule.Log log = 1;
   */
  log?: Log;

  constructor(data?: PartialMessage<LogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.LogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: Log },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogsResponse {
    return new LogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogsResponse {
    return new LogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogsResponse {
    return new LogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LogsResponse | PlainMessage<LogsResponse> | undefined, b: LogsResponse | PlainMessage<LogsResponse> | undefined): boolean {
    return proto3.util.equals(LogsResponse, a, b);
  }
}

/**
 * Deprecated update - This is now a no-op
 *
 * @generated from message api.v1.capsule.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * The capsule to update.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The updates to apply to the capsule.
   *
   * @generated from field: repeated api.v1.capsule.Update updates = 2;
   */
  updates: Update[] = [];

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: Update, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * Deprecated: Empty update response.
 *
 * @generated from message api.v1.capsule.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * List capsule request.
 *
 * @generated from message api.v1.capsule.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * Project in which to list capsules.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * List capsule response.
 *
 * @generated from message api.v1.capsule.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * The capsules.
   *
   * @generated from field: repeated api.v1.capsule.Capsule capsules = 1;
   */
  capsules: Capsule[] = [];

  /**
   * Total number of capsules in the project.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsules", kind: "message", T: Capsule, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * Deploy request. This will deploy a number of changes which results in a new
 * rollout.
 *
 * @generated from message api.v1.capsule.DeployRequest
 */
export class DeployRequest extends Message<DeployRequest> {
  /**
   * Capsule to deploy to.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Changes to include in the new rollout.
   *
   * @generated from field: repeated api.v1.capsule.Change changes = 2;
   */
  changes: Change[] = [];

  /**
   * Force deploy, aborting an existing rollout if ongoing.
   *
   * @generated from field: bool force = 3;
   */
  force = false;

  /**
   * Project in which the capsule lives.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * Environment in which to deploy.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  /**
   * Deploy message.
   *
   * @generated from field: string message = 6;
   */
  message = "";

  /**
   * if true, the deploy will not be executed, but the request will return the
   * rollout config.
   *
   * @generated from field: bool dry_run = 7;
   */
  dryRun = false;

  /**
   * If not zero, this will constrain the rollout only to be created if the
   * currently running rollout matches this identifier. If this check fails, the
   * request will return an `Aborted` error.
   *
   * @generated from field: uint64 current_rollout_id = 8;
   */
  currentRolloutId = protoInt64.zero;

  constructor(data?: PartialMessage<DeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "current_rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployRequest {
    return new DeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployRequest | PlainMessage<DeployRequest> | undefined, b: DeployRequest | PlainMessage<DeployRequest> | undefined): boolean {
    return proto3.util.equals(DeployRequest, a, b);
  }
}

/**
 * Deploy response.
 *
 * @generated from message api.v1.capsule.DeployResponse
 */
export class DeployResponse extends Message<DeployResponse> {
  /**
   * ID of the new rollout.
   *
   * @generated from field: uint64 rollout_id = 1;
   */
  rolloutId = protoInt64.zero;

  /**
   * The YAML of the resources that will be deployed.
   *
   * @generated from field: map<string, string> resource_yaml = 2;
   */
  resourceYaml: { [key: string]: string } = {};

  /**
   * The rollout config.
   *
   * @generated from field: api.v1.capsule.RolloutConfig rollout_config = 3;
   */
  rolloutConfig?: RolloutConfig;

  constructor(data?: PartialMessage<DeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.DeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "resource_yaml", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "rollout_config", kind: "message", T: RolloutConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployResponse {
    return new DeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployResponse | PlainMessage<DeployResponse> | undefined, b: DeployResponse | PlainMessage<DeployResponse> | undefined): boolean {
    return proto3.util.equals(DeployResponse, a, b);
  }
}

/**
 * List instances request.
 *
 * @generated from message api.v1.capsule.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * Capsule to list instances from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * Project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * Environment to list instances from.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * if true, deleted instances will be included in the response.
   *
   * @generated from field: bool include_deleted = 5;
   */
  includeDeleted = false;

  /**
   * if true, existing instances will be excluded from the response.
   *
   * @generated from field: bool exclude_existing = 6;
   */
  excludeExisting = false;

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "exclude_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * List instances response.
 *
 * @generated from message api.v1.capsule.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * The instances.
   *
   * @generated from field: repeated api.v1.capsule.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * Total number of instances in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * Get status of an instance.
 *
 * @generated from message api.v1.capsule.GetInstanceStatusRequest
 */
export class GetInstanceStatusRequest extends Message<GetInstanceStatusRequest> {
  /**
   * The capsule to get the instance status from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance to get.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to get the instance from.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetInstanceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetInstanceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceStatusRequest {
    return new GetInstanceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceStatusRequest | PlainMessage<GetInstanceStatusRequest> | undefined, b: GetInstanceStatusRequest | PlainMessage<GetInstanceStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceStatusRequest, a, b);
  }
}

/**
 * Get instance status response.
 *
 * @generated from message api.v1.capsule.GetInstanceStatusResponse
 */
export class GetInstanceStatusResponse extends Message<GetInstanceStatusResponse> {
  /**
   * The instance status.
   *
   * @generated from field: api.v1.capsule.instance.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<GetInstanceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetInstanceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceStatusResponse {
    return new GetInstanceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceStatusResponse | PlainMessage<GetInstanceStatusResponse> | undefined, b: GetInstanceStatusResponse | PlainMessage<GetInstanceStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceStatusResponse, a, b);
  }
}

/**
 * List multiple instance statuses
 *
 * @generated from message api.v1.capsule.ListInstanceStatusesRequest
 */
export class ListInstanceStatusesRequest extends Message<ListInstanceStatusesRequest> {
  /**
   * The capsule to get the instance statuses from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule is.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to get the instance statuses from.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * if true, deleted instances will be included in the response.
   *
   * @generated from field: bool include_deleted = 5;
   */
  includeDeleted = false;

  /**
   * if true, existing instances will be excluded from the response.
   *
   * @generated from field: bool exclude_existing = 6;
   */
  excludeExisting = false;

  constructor(data?: PartialMessage<ListInstanceStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstanceStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "exclude_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceStatusesRequest {
    return new ListInstanceStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceStatusesRequest | PlainMessage<ListInstanceStatusesRequest> | undefined, b: ListInstanceStatusesRequest | PlainMessage<ListInstanceStatusesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstanceStatusesRequest, a, b);
  }
}

/**
 * Response for listing multiple instance statuses
 *
 * @generated from message api.v1.capsule.ListInstanceStatusesResponse
 */
export class ListInstanceStatusesResponse extends Message<ListInstanceStatusesResponse> {
  /**
   * The instance statuses.
   *
   * @generated from field: repeated api.v1.capsule.instance.Status instances = 1;
   */
  instances: Status[] = [];

  /**
   * Total number of instances in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListInstanceStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListInstanceStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Status, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceStatusesResponse {
    return new ListInstanceStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceStatusesResponse | PlainMessage<ListInstanceStatusesResponse> | undefined, b: ListInstanceStatusesResponse | PlainMessage<ListInstanceStatusesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstanceStatusesResponse, a, b);
  }
}

/**
 * RestartInstanceRequest restarts a single instance.
 *
 * @generated from message api.v1.capsule.RestartInstanceRequest
 */
export class RestartInstanceRequest extends Message<RestartInstanceRequest> {
  /**
   * The capsule to restart the instance in.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The instance to restart.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to restart the instance in.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  constructor(data?: PartialMessage<RestartInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RestartInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartInstanceRequest {
    return new RestartInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RestartInstanceRequest | PlainMessage<RestartInstanceRequest> | undefined, b: RestartInstanceRequest | PlainMessage<RestartInstanceRequest> | undefined): boolean {
    return proto3.util.equals(RestartInstanceRequest, a, b);
  }
}

/**
 * RestartInstanceResponse is an empty response.
 *
 * @generated from message api.v1.capsule.RestartInstanceResponse
 */
export class RestartInstanceResponse extends Message<RestartInstanceResponse> {
  constructor(data?: PartialMessage<RestartInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.RestartInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartInstanceResponse {
    return new RestartInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RestartInstanceResponse | PlainMessage<RestartInstanceResponse> | undefined, b: RestartInstanceResponse | PlainMessage<RestartInstanceResponse> | undefined): boolean {
    return proto3.util.equals(RestartInstanceResponse, a, b);
  }
}

/**
 * ListRolloutsRequest lists rollouts for a capsule.
 *
 * @generated from message api.v1.capsule.ListRolloutsRequest
 */
export class ListRolloutsRequest extends Message<ListRolloutsRequest> {
  /**
   * The capsule to list rollouts for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment to list rollouts for.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ListRolloutsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRolloutsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolloutsRequest {
    return new ListRolloutsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolloutsRequest | PlainMessage<ListRolloutsRequest> | undefined, b: ListRolloutsRequest | PlainMessage<ListRolloutsRequest> | undefined): boolean {
    return proto3.util.equals(ListRolloutsRequest, a, b);
  }
}

/**
 * ListRolloutsResponse lists rollouts for a capsule and an environment.
 *
 * @generated from message api.v1.capsule.ListRolloutsResponse
 */
export class ListRolloutsResponse extends Message<ListRolloutsResponse> {
  /**
   * The rollouts.
   *
   * @generated from field: repeated api.v1.capsule.Rollout rollouts = 1;
   */
  rollouts: Rollout[] = [];

  /**
   * Total number of rollouts in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListRolloutsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListRolloutsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollouts", kind: "message", T: Rollout, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolloutsResponse {
    return new ListRolloutsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolloutsResponse | PlainMessage<ListRolloutsResponse> | undefined, b: ListRolloutsResponse | PlainMessage<ListRolloutsResponse> | undefined): boolean {
    return proto3.util.equals(ListRolloutsResponse, a, b);
  }
}

/**
 * GetRolloutRequest gets a single rollout.
 *
 * @generated from message api.v1.capsule.GetRolloutRequest
 */
export class GetRolloutRequest extends Message<GetRolloutRequest> {
  /**
   * The capsule to get the rollout from.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The rollout to get.
   *
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutRequest {
    return new GetRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutRequest | PlainMessage<GetRolloutRequest> | undefined, b: GetRolloutRequest | PlainMessage<GetRolloutRequest> | undefined): boolean {
    return proto3.util.equals(GetRolloutRequest, a, b);
  }
}

/**
 * GetRolloutResponse returns a single rollout for a capsule and an environment
 * in a project.
 *
 * @generated from message api.v1.capsule.GetRolloutResponse
 */
export class GetRolloutResponse extends Message<GetRolloutResponse> {
  /**
   * The rollout.
   *
   * @generated from field: api.v1.capsule.Rollout rollout = 1;
   */
  rollout?: Rollout;

  constructor(data?: PartialMessage<GetRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollout", kind: "message", T: Rollout },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRolloutResponse {
    return new GetRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRolloutResponse | PlainMessage<GetRolloutResponse> | undefined, b: GetRolloutResponse | PlainMessage<GetRolloutResponse> | undefined): boolean {
    return proto3.util.equals(GetRolloutResponse, a, b);
  }
}

/**
 * AbortRolloutRequest aborts a rollout.
 *
 * @generated from message api.v1.capsule.AbortRolloutRequest
 */
export class AbortRolloutRequest extends Message<AbortRolloutRequest> {
  /**
   * The capsule to abort the rollout in.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The rollout to abort.
   *
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The environment the rollout is in.
   *
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  constructor(data?: PartialMessage<AbortRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.AbortRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortRolloutRequest {
    return new AbortRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AbortRolloutRequest | PlainMessage<AbortRolloutRequest> | undefined, b: AbortRolloutRequest | PlainMessage<AbortRolloutRequest> | undefined): boolean {
    return proto3.util.equals(AbortRolloutRequest, a, b);
  }
}

/**
 * AbortRolloutResponse is an empty response.
 *
 * @generated from message api.v1.capsule.AbortRolloutResponse
 */
export class AbortRolloutResponse extends Message<AbortRolloutResponse> {
  constructor(data?: PartialMessage<AbortRolloutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.AbortRolloutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortRolloutResponse {
    return new AbortRolloutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AbortRolloutResponse | PlainMessage<AbortRolloutResponse> | undefined, b: AbortRolloutResponse | PlainMessage<AbortRolloutResponse> | undefined): boolean {
    return proto3.util.equals(AbortRolloutResponse, a, b);
  }
}

/**
 * ListEvents request for listing rollout events for a given rollout in a
 * capsule and environment.
 *
 * @generated from message api.v1.capsule.ListEventsRequest
 */
export class ListEventsRequest extends Message<ListEventsRequest> {
  /**
   * The capsule to list events for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The rollout to list events for.
   *
   * @generated from field: uint64 rollout_id = 2;
   */
  rolloutId = protoInt64.zero;

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 3;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * The environment to list events for.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ListEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: Pagination },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined, b: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined): boolean {
    return proto3.util.equals(ListEventsRequest, a, b);
  }
}

/**
 * Response to List Events
 *
 * @generated from message api.v1.capsule.ListEventsResponse
 */
export class ListEventsResponse extends Message<ListEventsResponse> {
  /**
   * The events for a rollout in a capsule and environment for a given project.
   *
   * @generated from field: repeated api.v1.capsule.Event events = 1;
   */
  events: Event[] = [];

  /**
   * Total number of events in the capsule for the given environment.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<ListEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.ListEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined, b: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined): boolean {
    return proto3.util.equals(ListEventsResponse, a, b);
  }
}

/**
 * Request for getting metrics for a capsule and optionally a single instance.
 *
 * @generated from message api.v1.capsule.CapsuleMetricsRequest
 */
export class CapsuleMetricsRequest extends Message<CapsuleMetricsRequest> {
  /**
   * The capsule to get metrics for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * If set, only returns metrics for the given instance_id.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * The environment to get metrics for.
   *
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  /**
   * Return metrics generated after 'since'
   *
   * @generated from field: google.protobuf.Timestamp since = 6;
   */
  since?: Timestamp;

  constructor(data?: PartialMessage<CapsuleMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CapsuleMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "since", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleMetricsRequest {
    return new CapsuleMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleMetricsRequest | PlainMessage<CapsuleMetricsRequest> | undefined, b: CapsuleMetricsRequest | PlainMessage<CapsuleMetricsRequest> | undefined): boolean {
    return proto3.util.equals(CapsuleMetricsRequest, a, b);
  }
}

/**
 * Response to getting capsule metrics.
 *
 * @generated from message api.v1.capsule.CapsuleMetricsResponse
 */
export class CapsuleMetricsResponse extends Message<CapsuleMetricsResponse> {
  /**
   * Metrics
   *
   * @generated from field: repeated api.v1.capsule.InstanceMetrics instance_metrics = 1;
   */
  instanceMetrics: InstanceMetrics[] = [];

  constructor(data?: PartialMessage<CapsuleMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.CapsuleMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_metrics", kind: "message", T: InstanceMetrics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapsuleMetricsResponse {
    return new CapsuleMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CapsuleMetricsResponse | PlainMessage<CapsuleMetricsResponse> | undefined, b: CapsuleMetricsResponse | PlainMessage<CapsuleMetricsResponse> | undefined): boolean {
    return proto3.util.equals(CapsuleMetricsResponse, a, b);
  }
}

/**
 * Request for getting custom metrics for a capsule in an environment.
 *
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsRequest
 */
export class GetCustomInstanceMetricsRequest extends Message<GetCustomInstanceMetricsRequest> {
  /**
   * The capsule to get metrics for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * The environment to get metrics for.
   *
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetCustomInstanceMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetCustomInstanceMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsRequest {
    return new GetCustomInstanceMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomInstanceMetricsRequest | PlainMessage<GetCustomInstanceMetricsRequest> | undefined, b: GetCustomInstanceMetricsRequest | PlainMessage<GetCustomInstanceMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetCustomInstanceMetricsRequest, a, b);
  }
}

/**
 * Response to getting custom metrics for a capsule in an environment.
 *
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsResponse
 */
export class GetCustomInstanceMetricsResponse extends Message<GetCustomInstanceMetricsResponse> {
  /**
   * Custom Metrics.
   *
   * @generated from field: repeated api.v1.capsule.Metric metrics = 1;
   */
  metrics: Metric[] = [];

  constructor(data?: PartialMessage<GetCustomInstanceMetricsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetCustomInstanceMetricsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metrics", kind: "message", T: Metric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomInstanceMetricsResponse {
    return new GetCustomInstanceMetricsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomInstanceMetricsResponse | PlainMessage<GetCustomInstanceMetricsResponse> | undefined, b: GetCustomInstanceMetricsResponse | PlainMessage<GetCustomInstanceMetricsResponse> | undefined): boolean {
    return proto3.util.equals(GetCustomInstanceMetricsResponse, a, b);
  }
}

/**
 * Custom metrics
 *
 * @generated from message api.v1.capsule.Metric
 */
export class Metric extends Message<Metric> {
  /**
   * Name of the metric.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Latest value of the metric.
   *
   * @generated from field: double latest_value = 2;
   */
  latestValue = 0;

  /**
   * Timestamp of the latest value.
   *
   * @generated from field: google.protobuf.Timestamp latest_timestamp = 3;
   */
  latestTimestamp?: Timestamp;

  constructor(data?: PartialMessage<Metric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.Metric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "latest_timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metric {
    return new Metric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJsonString(jsonString, options);
  }

  static equals(a: Metric | PlainMessage<Metric> | undefined, b: Metric | PlainMessage<Metric> | undefined): boolean {
    return proto3.util.equals(Metric, a, b);
  }
}

/**
 * Request for getting job executions from cron jobs.
 *
 * @generated from message api.v1.capsule.GetJobExecutionsRequest
 */
export class GetJobExecutionsRequest extends Message<GetJobExecutionsRequest> {
  /**
   * The capsule to get job executions for.
   *
   * @generated from field: string capsule_id = 1;
   */
  capsuleId = "";

  /**
   * The name of the job to get executions for.
   *
   * @generated from field: string job_name = 2;
   */
  jobName = "";

  /**
   * Filtering executions by job state.
   *
   * @generated from field: repeated api.v1.capsule.JobState states = 4;
   */
  states: JobState[] = [];

  /**
   * Filtering executions created before this timestamp.
   *
   * @generated from field: google.protobuf.Timestamp created_from = 5;
   */
  createdFrom?: Timestamp;

  /**
   * Filtering executions created after this timestamp.
   *
   * @generated from field: google.protobuf.Timestamp created_to = 6;
   */
  createdTo?: Timestamp;

  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 7;
   */
  pagination?: Pagination;

  /**
   * The project in which the capsule lives.
   *
   * @generated from field: string project_id = 8;
   */
  projectId = "";

  /**
   * The environment to get job executions for.
   *
   * @generated from field: string environment_id = 9;
   */
  environmentId = "";

  constructor(data?: PartialMessage<GetJobExecutionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetJobExecutionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "states", kind: "enum", T: proto3.getEnumType(JobState), repeated: true },
    { no: 5, name: "created_from", kind: "message", T: Timestamp },
    { no: 6, name: "created_to", kind: "message", T: Timestamp },
    { no: 7, name: "pagination", kind: "message", T: Pagination },
    { no: 8, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJobExecutionsRequest {
    return new GetJobExecutionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJobExecutionsRequest {
    return new GetJobExecutionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJobExecutionsRequest {
    return new GetJobExecutionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetJobExecutionsRequest | PlainMessage<GetJobExecutionsRequest> | undefined, b: GetJobExecutionsRequest | PlainMessage<GetJobExecutionsRequest> | undefined): boolean {
    return proto3.util.equals(GetJobExecutionsRequest, a, b);
  }
}

/**
 * Response to getting job executions.
 *
 * @generated from message api.v1.capsule.GetJobExecutionsResponse
 */
export class GetJobExecutionsResponse extends Message<GetJobExecutionsResponse> {
  /**
   * Job executions.
   *
   * @generated from field: repeated api.v1.capsule.JobExecution job_executions = 1;
   */
  jobExecutions: JobExecution[] = [];

  /**
   * Total number of executions ignorring pagination.
   *
   * @generated from field: uint64 total = 2;
   */
  total = protoInt64.zero;

  constructor(data?: PartialMessage<GetJobExecutionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.capsule.GetJobExecutionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_executions", kind: "message", T: JobExecution, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJobExecutionsResponse {
    return new GetJobExecutionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJobExecutionsResponse {
    return new GetJobExecutionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJobExecutionsResponse {
    return new GetJobExecutionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetJobExecutionsResponse | PlainMessage<GetJobExecutionsResponse> | undefined, b: GetJobExecutionsResponse | PlainMessage<GetJobExecutionsResponse> | undefined): boolean {
    return proto3.util.equals(GetJobExecutionsResponse, a, b);
  }
}

