// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/tunnel/service.proto (package api.v1.tunnel, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.tunnel.TunnelRequest
 */
export class TunnelRequest extends Message<TunnelRequest> {
  /**
   * @generated from field: api.v1.tunnel.TunnelMessage message = 1;
   */
  message?: TunnelMessage;

  constructor(data?: PartialMessage<TunnelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.tunnel.TunnelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: TunnelMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TunnelRequest {
    return new TunnelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TunnelRequest {
    return new TunnelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TunnelRequest {
    return new TunnelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TunnelRequest | PlainMessage<TunnelRequest> | undefined, b: TunnelRequest | PlainMessage<TunnelRequest> | undefined): boolean {
    return proto3.util.equals(TunnelRequest, a, b);
  }
}

/**
 * @generated from message api.v1.tunnel.TunnelResponse
 */
export class TunnelResponse extends Message<TunnelResponse> {
  /**
   * @generated from field: api.v1.tunnel.TunnelMessage message = 1;
   */
  message?: TunnelMessage;

  constructor(data?: PartialMessage<TunnelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.tunnel.TunnelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: TunnelMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TunnelResponse {
    return new TunnelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TunnelResponse {
    return new TunnelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TunnelResponse {
    return new TunnelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TunnelResponse | PlainMessage<TunnelResponse> | undefined, b: TunnelResponse | PlainMessage<TunnelResponse> | undefined): boolean {
    return proto3.util.equals(TunnelResponse, a, b);
  }
}

/**
 * @generated from message api.v1.tunnel.TunnelMessage
 */
export class TunnelMessage extends Message<TunnelMessage> {
  /**
   * @generated from oneof api.v1.tunnel.TunnelMessage.message
   */
  message: {
    /**
     * @generated from field: api.v1.tunnel.TunnelInfo new_tunnel = 1;
     */
    value: TunnelInfo;
    case: "newTunnel";
  } | {
    /**
     * @generated from field: api.v1.tunnel.TunnelData data = 2;
     */
    value: TunnelData;
    case: "data";
  } | {
    /**
     * @generated from field: api.v1.tunnel.TunnelClose close = 3;
     */
    value: TunnelClose;
    case: "close";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TunnelMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.tunnel.TunnelMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_tunnel", kind: "message", T: TunnelInfo, oneof: "message" },
    { no: 2, name: "data", kind: "message", T: TunnelData, oneof: "message" },
    { no: 3, name: "close", kind: "message", T: TunnelClose, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TunnelMessage {
    return new TunnelMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TunnelMessage {
    return new TunnelMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TunnelMessage {
    return new TunnelMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TunnelMessage | PlainMessage<TunnelMessage> | undefined, b: TunnelMessage | PlainMessage<TunnelMessage> | undefined): boolean {
    return proto3.util.equals(TunnelMessage, a, b);
  }
}

/**
 * @generated from message api.v1.tunnel.TunnelInfo
 */
export class TunnelInfo extends Message<TunnelInfo> {
  /**
   * @generated from field: uint64 tunnel_id = 1;
   */
  tunnelId = protoInt64.zero;

  /**
   * @generated from field: uint32 port = 2;
   */
  port = 0;

  constructor(data?: PartialMessage<TunnelInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.tunnel.TunnelInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tunnel_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TunnelInfo {
    return new TunnelInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TunnelInfo {
    return new TunnelInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TunnelInfo {
    return new TunnelInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TunnelInfo | PlainMessage<TunnelInfo> | undefined, b: TunnelInfo | PlainMessage<TunnelInfo> | undefined): boolean {
    return proto3.util.equals(TunnelInfo, a, b);
  }
}

/**
 * @generated from message api.v1.tunnel.TunnelData
 */
export class TunnelData extends Message<TunnelData> {
  /**
   * @generated from field: uint64 tunnel_id = 1;
   */
  tunnelId = protoInt64.zero;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<TunnelData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.tunnel.TunnelData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tunnel_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TunnelData {
    return new TunnelData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TunnelData {
    return new TunnelData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TunnelData {
    return new TunnelData().fromJsonString(jsonString, options);
  }

  static equals(a: TunnelData | PlainMessage<TunnelData> | undefined, b: TunnelData | PlainMessage<TunnelData> | undefined): boolean {
    return proto3.util.equals(TunnelData, a, b);
  }
}

/**
 * @generated from message api.v1.tunnel.TunnelClose
 */
export class TunnelClose extends Message<TunnelClose> {
  /**
   * @generated from field: uint64 tunnel_id = 1;
   */
  tunnelId = protoInt64.zero;

  /**
   * @generated from field: uint32 code = 2;
   */
  code = 0;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<TunnelClose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.tunnel.TunnelClose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tunnel_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TunnelClose {
    return new TunnelClose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TunnelClose {
    return new TunnelClose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TunnelClose {
    return new TunnelClose().fromJsonString(jsonString, options);
  }

  static equals(a: TunnelClose | PlainMessage<TunnelClose> | undefined, b: TunnelClose | PlainMessage<TunnelClose> | undefined): boolean {
    return proto3.util.equals(TunnelClose, a, b);
  }
}

