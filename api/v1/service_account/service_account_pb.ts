// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/service_account/service_account.proto (package api.v1.service_account, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Author } from "../../../model/author_pb.js";

/**
 * Service account model.
 *
 * @generated from message api.v1.service_account.ServiceAccount
 */
export class ServiceAccount extends Message<ServiceAccount> {
  /**
   * Unique name of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Creation date.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * Author of the service account.
   *
   * @generated from field: model.Author created_by = 3;
   */
  createdBy?: Author;

  /**
   * Whether the service account is managed by the system.
   *
   * @generated from field: bool managed = 4;
   */
  managed = false;

  /**
   * List of group IDs the service account belongs to.
   *
   * @generated from field: repeated string group_ids = 5;
   */
  groupIds: string[] = [];

  constructor(data?: PartialMessage<ServiceAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.service_account.ServiceAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "created_by", kind: "message", T: Author },
    { no: 4, name: "managed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceAccount {
    return new ServiceAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceAccount {
    return new ServiceAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceAccount {
    return new ServiceAccount().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceAccount | PlainMessage<ServiceAccount> | undefined, b: ServiceAccount | PlainMessage<ServiceAccount> | undefined): boolean {
    return proto3.util.equals(ServiceAccount, a, b);
  }
}

