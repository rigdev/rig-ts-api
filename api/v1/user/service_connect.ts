// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/user/service.proto (package api.v1.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateRequest, CreateResponse, DeleteRequest, DeleteResponse, GetByIdentifierRequest, GetByIdentifierResponse, GetRequest, GetResponse, ListRequest, ListResponse, ListSessionsRequest, ListSessionsResponse, UpdateRequest, UpdateResponse } from "./service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * The service to manage users in Users
 *
 * @generated from service api.v1.user.Service
 */
export const Service = {
  typeName: "api.v1.user.Service",
  methods: {
    /**
     * Create a new user
     *
     * @generated from rpc api.v1.user.Service.Create
     */
    create: {
      name: "Create",
      I: CreateRequest,
      O: CreateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update a users profile and info
     *
     * @generated from rpc api.v1.user.Service.Update
     */
    update: {
      name: "Update",
      I: UpdateRequest,
      O: UpdateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the list of active sessions for the given user.
     *
     * @generated from rpc api.v1.user.Service.ListSessions
     */
    listSessions: {
      name: "ListSessions",
      I: ListSessionsRequest,
      O: ListSessionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get a user by user-id.
     *
     * @generated from rpc api.v1.user.Service.Get
     */
    get: {
      name: "Get",
      I: GetRequest,
      O: GetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lookup a user by a unique identifier - email, username, phone number etc.
     *
     * @generated from rpc api.v1.user.Service.GetByIdentifier
     */
    getByIdentifier: {
      name: "GetByIdentifier",
      I: GetByIdentifierRequest,
      O: GetByIdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List users
     *
     * @generated from rpc api.v1.user.Service.List
     */
    list: {
      name: "List",
      I: ListRequest,
      O: ListResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a specific user
     *
     * @generated from rpc api.v1.user.Service.Delete
     */
    delete: {
      name: "Delete",
      I: DeleteRequest,
      O: DeleteResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

