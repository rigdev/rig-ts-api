// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/user/settings/settings.proto (package api.v1.user.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { HashingConfig } from "../../../../model/common_pb.js";
import { LoginType } from "../../../../model/auth_pb.js";
import { ProviderCredentials } from "../../../../model/credentials_pb.js";

/**
 * The different template types.
 *
 * @generated from enum api.v1.user.settings.TemplateType
 */
export enum TemplateType {
  /**
   * Unspecified template type.
   *
   * @generated from enum value: TEMPLATE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The welcome email template.
   *
   * @generated from enum value: TEMPLATE_TYPE_WELCOME_EMAIL = 1;
   */
  WELCOME_EMAIL = 1,

  /**
   * The email verification template.
   *
   * @generated from enum value: TEMPLATE_TYPE_EMAIL_VERIFICATION = 2;
   */
  EMAIL_VERIFICATION = 2,

  /**
   * The reset password email template.
   *
   * @generated from enum value: TEMPLATE_TYPE_EMAIL_RESET_PASSWORD = 3;
   */
  EMAIL_RESET_PASSWORD = 3,

  /**
   * Deprecated: Text is not supported - The welcome text template.
   *
   * @generated from enum value: TEMPLATE_TYPE_WELCOME_TEXT = 4;
   */
  WELCOME_TEXT = 4,

  /**
   * Deprecated: Text is not supported - The text verification template.
   *
   * @generated from enum value: TEMPLATE_TYPE_TEXT_VERIFICATION = 5;
   */
  TEXT_VERIFICATION = 5,

  /**
   * Deprecated: Text is not supported - The reset password text template.
   *
   * @generated from enum value: TEMPLATE_TYPE_TEXT_RESET_PASSWORD = 6;
   */
  TEXT_RESET_PASSWORD = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(TemplateType)
proto3.util.setEnumType(TemplateType, "api.v1.user.settings.TemplateType", [
  { no: 0, name: "TEMPLATE_TYPE_UNSPECIFIED" },
  { no: 1, name: "TEMPLATE_TYPE_WELCOME_EMAIL" },
  { no: 2, name: "TEMPLATE_TYPE_EMAIL_VERIFICATION" },
  { no: 3, name: "TEMPLATE_TYPE_EMAIL_RESET_PASSWORD" },
  { no: 4, name: "TEMPLATE_TYPE_WELCOME_TEXT" },
  { no: 5, name: "TEMPLATE_TYPE_TEXT_VERIFICATION" },
  { no: 6, name: "TEMPLATE_TYPE_TEXT_RESET_PASSWORD" },
]);

/**
 * Update message for updating users settings.
 *
 * @generated from message api.v1.user.settings.Update
 */
export class Update extends Message<Update> {
  /**
   * A oneof field for the different settings fields.
   *
   * @generated from oneof api.v1.user.settings.Update.field
   */
  field: {
    /**
     * If true, users can self register.
     *
     * @generated from field: bool allow_register = 1;
     */
    value: boolean;
    case: "allowRegister";
  } | {
    /**
     * If true, users must be verified via email to login.
     *
     * @generated from field: bool is_verified_email_required = 2;
     */
    value: boolean;
    case: "isVerifiedEmailRequired";
  } | {
    /**
     * If true, users must be verified via phone to login.
     *
     * @generated from field: bool is_verified_phone_required = 3;
     */
    value: boolean;
    case: "isVerifiedPhoneRequired";
  } | {
    /**
     * Access token Time to Live.
     *
     * @generated from field: google.protobuf.Duration access_token_ttl = 4;
     */
    value: Duration;
    case: "accessTokenTtl";
  } | {
    /**
     * Refresh token Time to Live.
     *
     * @generated from field: google.protobuf.Duration refresh_token_ttl = 5;
     */
    value: Duration;
    case: "refreshTokenTtl";
  } | {
    /**
     * Verification code Time to Live.
     *
     * @generated from field: google.protobuf.Duration verification_code_ttl = 6;
     */
    value: Duration;
    case: "verificationCodeTtl";
  } | {
    /**
     * The hashing config used to hash passwords.
     *
     * @generated from field: model.HashingConfig password_hashing = 7;
     */
    value: HashingConfig;
    case: "passwordHashing";
  } | {
    /**
     * The allowed login mechanisms.
     *
     * @generated from field: api.v1.user.settings.Update.LoginMechanisms login_mechanisms = 8;
     */
    value: Update_LoginMechanisms;
    case: "loginMechanisms";
  } | {
    /**
     * The email provider.
     *
     * @generated from field: api.v1.user.settings.EmailProvider email_provider = 9;
     */
    value: EmailProvider;
    case: "emailProvider";
  } | {
    /**
     * The text provider.
     *
     * @generated from field: api.v1.user.settings.TextProvider text_provider = 10;
     */
    value: TextProvider;
    case: "textProvider";
  } | {
    /**
     * The templates used for sending emails and texts.
     *
     * @generated from field: api.v1.user.settings.Template template = 11;
     */
    value: Template;
    case: "template";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Update>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.Update";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 2, name: "is_verified_email_required", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 3, name: "is_verified_phone_required", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 4, name: "access_token_ttl", kind: "message", T: Duration, oneof: "field" },
    { no: 5, name: "refresh_token_ttl", kind: "message", T: Duration, oneof: "field" },
    { no: 6, name: "verification_code_ttl", kind: "message", T: Duration, oneof: "field" },
    { no: 7, name: "password_hashing", kind: "message", T: HashingConfig, oneof: "field" },
    { no: 8, name: "login_mechanisms", kind: "message", T: Update_LoginMechanisms, oneof: "field" },
    { no: 9, name: "email_provider", kind: "message", T: EmailProvider, oneof: "field" },
    { no: 10, name: "text_provider", kind: "message", T: TextProvider, oneof: "field" },
    { no: 11, name: "template", kind: "message", T: Template, oneof: "field" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update {
    return new Update().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJsonString(jsonString, options);
  }

  static equals(a: Update | PlainMessage<Update> | undefined, b: Update | PlainMessage<Update> | undefined): boolean {
    return proto3.util.equals(Update, a, b);
  }
}

/**
 * The allowed login mechanisms
 *
 * @generated from message api.v1.user.settings.Update.LoginMechanisms
 */
export class Update_LoginMechanisms extends Message<Update_LoginMechanisms> {
  /**
   * @generated from field: repeated model.LoginType login_mechanisms = 1;
   */
  loginMechanisms: LoginType[] = [];

  constructor(data?: PartialMessage<Update_LoginMechanisms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.Update.LoginMechanisms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_mechanisms", kind: "enum", T: proto3.getEnumType(LoginType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update_LoginMechanisms {
    return new Update_LoginMechanisms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update_LoginMechanisms {
    return new Update_LoginMechanisms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update_LoginMechanisms {
    return new Update_LoginMechanisms().fromJsonString(jsonString, options);
  }

  static equals(a: Update_LoginMechanisms | PlainMessage<Update_LoginMechanisms> | undefined, b: Update_LoginMechanisms | PlainMessage<Update_LoginMechanisms> | undefined): boolean {
    return proto3.util.equals(Update_LoginMechanisms, a, b);
  }
}

/**
 * Message that tells how the user was registered / created.
 *
 * @generated from message api.v1.user.settings.RegisterMethod
 */
export class RegisterMethod extends Message<RegisterMethod> {
  /**
   * The method used to register a user.
   *
   * @generated from oneof api.v1.user.settings.RegisterMethod.method
   */
  method: {
    /**
     * The user was created by the system.
     *
     * @generated from field: api.v1.user.settings.RegisterMethod.System system = 1;
     */
    value: RegisterMethod_System;
    case: "system";
  } | {
    /**
     * The user was self-registered with a login-type.
     *
     * @generated from field: api.v1.user.settings.RegisterMethod.Signup signup = 2;
     */
    value: RegisterMethod_Signup;
    case: "signup";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RegisterMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.RegisterMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "message", T: RegisterMethod_System, oneof: "method" },
    { no: 2, name: "signup", kind: "message", T: RegisterMethod_Signup, oneof: "method" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMethod {
    return new RegisterMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMethod {
    return new RegisterMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMethod {
    return new RegisterMethod().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterMethod | PlainMessage<RegisterMethod> | undefined, b: RegisterMethod | PlainMessage<RegisterMethod> | undefined): boolean {
    return proto3.util.equals(RegisterMethod, a, b);
  }
}

/**
 * The user was created by the system.
 *
 * @generated from message api.v1.user.settings.RegisterMethod.System
 */
export class RegisterMethod_System extends Message<RegisterMethod_System> {
  constructor(data?: PartialMessage<RegisterMethod_System>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.RegisterMethod.System";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMethod_System {
    return new RegisterMethod_System().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMethod_System {
    return new RegisterMethod_System().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMethod_System {
    return new RegisterMethod_System().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterMethod_System | PlainMessage<RegisterMethod_System> | undefined, b: RegisterMethod_System | PlainMessage<RegisterMethod_System> | undefined): boolean {
    return proto3.util.equals(RegisterMethod_System, a, b);
  }
}

/**
 * The user was self-registered with a login-type.
 *
 * @generated from message api.v1.user.settings.RegisterMethod.Signup
 */
export class RegisterMethod_Signup extends Message<RegisterMethod_Signup> {
  /**
   * The login type used to register.
   *
   * @generated from field: model.LoginType login_type = 1;
   */
  loginType = LoginType.UNSPECIFIED;

  constructor(data?: PartialMessage<RegisterMethod_Signup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.RegisterMethod.Signup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: proto3.getEnumType(LoginType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMethod_Signup {
    return new RegisterMethod_Signup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMethod_Signup {
    return new RegisterMethod_Signup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMethod_Signup {
    return new RegisterMethod_Signup().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterMethod_Signup | PlainMessage<RegisterMethod_Signup> | undefined, b: RegisterMethod_Signup | PlainMessage<RegisterMethod_Signup> | undefined): boolean {
    return proto3.util.equals(RegisterMethod_Signup, a, b);
  }
}

/**
 * Message that tells how the user was authenticated.
 *
 * @generated from message api.v1.user.settings.AuthMethod
 */
export class AuthMethod extends Message<AuthMethod> {
  /**
   * @generated from oneof api.v1.user.settings.AuthMethod.method
   */
  method: {
    /**
     * @generated from field: model.LoginType login_type = 1;
     */
    value: LoginType;
    case: "loginType";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AuthMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.AuthMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: proto3.getEnumType(LoginType), oneof: "method" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthMethod {
    return new AuthMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthMethod {
    return new AuthMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthMethod {
    return new AuthMethod().fromJsonString(jsonString, options);
  }

  static equals(a: AuthMethod | PlainMessage<AuthMethod> | undefined, b: AuthMethod | PlainMessage<AuthMethod> | undefined): boolean {
    return proto3.util.equals(AuthMethod, a, b);
  }
}

/**
 * The users settings configuration. Settings of everything that has to do with
 * users.
 *
 * @generated from message api.v1.user.settings.Settings
 */
export class Settings extends Message<Settings> {
  /**
   * If true, users can self register.
   *
   * @generated from field: bool allow_register = 1;
   */
  allowRegister = false;

  /**
   * If true, users must be verified via email to login.
   *
   * @generated from field: bool is_verified_email_required = 2;
   */
  isVerifiedEmailRequired = false;

  /**
   * Deprecated: Text is not supported - If true, users must be verified via
   * phone to login.
   *
   * @generated from field: bool is_verified_phone_required = 3;
   */
  isVerifiedPhoneRequired = false;

  /**
   * Access token Time to Live.
   *
   * @generated from field: google.protobuf.Duration access_token_ttl = 4;
   */
  accessTokenTtl?: Duration;

  /**
   * Refresh token Time to Live.
   *
   * @generated from field: google.protobuf.Duration refresh_token_ttl = 5;
   */
  refreshTokenTtl?: Duration;

  /**
   * Verification code Time to Live.
   *
   * @generated from field: google.protobuf.Duration verification_code_ttl = 6;
   */
  verificationCodeTtl?: Duration;

  /**
   * The hashing config used to hash passwords.
   *
   * @generated from field: model.HashingConfig password_hashing = 7;
   */
  passwordHashing?: HashingConfig;

  /**
   * The allowed login mechanisms.
   *
   * @generated from field: repeated model.LoginType login_mechanisms = 8;
   */
  loginMechanisms: LoginType[] = [];

  /**
   * If true, send a welcome email to new users.
   *
   * @generated from field: bool send_welcome_mail = 10;
   */
  sendWelcomeMail = false;

  /**
   * The email provider.
   *
   * @generated from field: api.v1.user.settings.EmailProviderEntry email_provider = 11;
   */
  emailProvider?: EmailProviderEntry;

  /**
   * Deprecated: Text is not supported - The text provider.
   *
   * @generated from field: api.v1.user.settings.TextProviderEntry text_provider = 12;
   */
  textProvider?: TextProviderEntry;

  /**
   * The templates used for sending emails and texts.
   *
   * @generated from field: api.v1.user.settings.Templates templates = 13;
   */
  templates?: Templates;

  constructor(data?: PartialMessage<Settings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.Settings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_verified_email_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_verified_phone_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "access_token_ttl", kind: "message", T: Duration },
    { no: 5, name: "refresh_token_ttl", kind: "message", T: Duration },
    { no: 6, name: "verification_code_ttl", kind: "message", T: Duration },
    { no: 7, name: "password_hashing", kind: "message", T: HashingConfig },
    { no: 8, name: "login_mechanisms", kind: "enum", T: proto3.getEnumType(LoginType), repeated: true },
    { no: 10, name: "send_welcome_mail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "email_provider", kind: "message", T: EmailProviderEntry },
    { no: 12, name: "text_provider", kind: "message", T: TextProviderEntry },
    { no: 13, name: "templates", kind: "message", T: Templates },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Settings {
    return new Settings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJsonString(jsonString, options);
  }

  static equals(a: Settings | PlainMessage<Settings> | undefined, b: Settings | PlainMessage<Settings> | undefined): boolean {
    return proto3.util.equals(Settings, a, b);
  }
}

/**
 * Default email provider instance.
 *
 * @generated from message api.v1.user.settings.DefaultInstance
 */
export class DefaultInstance extends Message<DefaultInstance> {
  constructor(data?: PartialMessage<DefaultInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.DefaultInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DefaultInstance {
    return new DefaultInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DefaultInstance {
    return new DefaultInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DefaultInstance {
    return new DefaultInstance().fromJsonString(jsonString, options);
  }

  static equals(a: DefaultInstance | PlainMessage<DefaultInstance> | undefined, b: DefaultInstance | PlainMessage<DefaultInstance> | undefined): boolean {
    return proto3.util.equals(DefaultInstance, a, b);
  }
}

/**
 * Mailjet email rpvoider instance.
 *
 * @generated from message api.v1.user.settings.MailjetInstance
 */
export class MailjetInstance extends Message<MailjetInstance> {
  constructor(data?: PartialMessage<MailjetInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.MailjetInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MailjetInstance {
    return new MailjetInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MailjetInstance {
    return new MailjetInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MailjetInstance {
    return new MailjetInstance().fromJsonString(jsonString, options);
  }

  static equals(a: MailjetInstance | PlainMessage<MailjetInstance> | undefined, b: MailjetInstance | PlainMessage<MailjetInstance> | undefined): boolean {
    return proto3.util.equals(MailjetInstance, a, b);
  }
}

/**
 * Deprecated: Text is not supported - Default text provider instance.
 *
 * @generated from message api.v1.user.settings.TwilioInstance
 */
export class TwilioInstance extends Message<TwilioInstance> {
  constructor(data?: PartialMessage<TwilioInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.TwilioInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TwilioInstance {
    return new TwilioInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TwilioInstance {
    return new TwilioInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TwilioInstance {
    return new TwilioInstance().fromJsonString(jsonString, options);
  }

  static equals(a: TwilioInstance | PlainMessage<TwilioInstance> | undefined, b: TwilioInstance | PlainMessage<TwilioInstance> | undefined): boolean {
    return proto3.util.equals(TwilioInstance, a, b);
  }
}

/**
 * SMTP email provider instance.
 *
 * @generated from message api.v1.user.settings.SmtpInstance
 */
export class SmtpInstance extends Message<SmtpInstance> {
  /**
   * Host of the smtp server.
   *
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * Port of the smtp server.
   *
   * @generated from field: int64 port = 2;
   */
  port = protoInt64.zero;

  constructor(data?: PartialMessage<SmtpInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.SmtpInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SmtpInstance {
    return new SmtpInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SmtpInstance {
    return new SmtpInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SmtpInstance {
    return new SmtpInstance().fromJsonString(jsonString, options);
  }

  static equals(a: SmtpInstance | PlainMessage<SmtpInstance> | undefined, b: SmtpInstance | PlainMessage<SmtpInstance> | undefined): boolean {
    return proto3.util.equals(SmtpInstance, a, b);
  }
}

/**
 * Type of email instance in a provider.
 *
 * @generated from message api.v1.user.settings.EmailInstance
 */
export class EmailInstance extends Message<EmailInstance> {
  /**
   * @generated from oneof api.v1.user.settings.EmailInstance.instance
   */
  instance: {
    /**
     * default from platform config.
     *
     * @generated from field: api.v1.user.settings.DefaultInstance default = 1;
     */
    value: DefaultInstance;
    case: "default";
  } | {
    /**
     * Mailjet instance.
     *
     * @generated from field: api.v1.user.settings.MailjetInstance mailjet = 2;
     */
    value: MailjetInstance;
    case: "mailjet";
  } | {
    /**
     * SMTP instance.
     *
     * @generated from field: api.v1.user.settings.SmtpInstance smtp = 3;
     */
    value: SmtpInstance;
    case: "smtp";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<EmailInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.EmailInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "message", T: DefaultInstance, oneof: "instance" },
    { no: 2, name: "mailjet", kind: "message", T: MailjetInstance, oneof: "instance" },
    { no: 3, name: "smtp", kind: "message", T: SmtpInstance, oneof: "instance" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailInstance {
    return new EmailInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailInstance {
    return new EmailInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailInstance {
    return new EmailInstance().fromJsonString(jsonString, options);
  }

  static equals(a: EmailInstance | PlainMessage<EmailInstance> | undefined, b: EmailInstance | PlainMessage<EmailInstance> | undefined): boolean {
    return proto3.util.equals(EmailInstance, a, b);
  }
}

/**
 * Deprecated: Text is not supported - Type of text instance in a provider.
 *
 * @generated from message api.v1.user.settings.TextInstance
 */
export class TextInstance extends Message<TextInstance> {
  /**
   * @generated from oneof api.v1.user.settings.TextInstance.instance
   */
  instance: {
    /**
     * default from platform config.
     *
     * @generated from field: api.v1.user.settings.DefaultInstance default = 1;
     */
    value: DefaultInstance;
    case: "default";
  } | {
    /**
     * Twilio instance.
     *
     * @generated from field: api.v1.user.settings.TwilioInstance twilio = 2;
     */
    value: TwilioInstance;
    case: "twilio";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TextInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.TextInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "message", T: DefaultInstance, oneof: "instance" },
    { no: 2, name: "twilio", kind: "message", T: TwilioInstance, oneof: "instance" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextInstance {
    return new TextInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextInstance {
    return new TextInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextInstance {
    return new TextInstance().fromJsonString(jsonString, options);
  }

  static equals(a: TextInstance | PlainMessage<TextInstance> | undefined, b: TextInstance | PlainMessage<TextInstance> | undefined): boolean {
    return proto3.util.equals(TextInstance, a, b);
  }
}

/**
 * The email provider.
 *
 * @generated from message api.v1.user.settings.EmailProvider
 */
export class EmailProvider extends Message<EmailProvider> {
  /**
   * The email-address that the provider sends emails from.
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * The credentials for the provider.
   *
   * @generated from field: model.ProviderCredentials credentials = 2;
   */
  credentials?: ProviderCredentials;

  /**
   * The instance of the provider.
   *
   * @generated from field: api.v1.user.settings.EmailInstance instance = 3;
   */
  instance?: EmailInstance;

  constructor(data?: PartialMessage<EmailProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.EmailProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: ProviderCredentials },
    { no: 3, name: "instance", kind: "message", T: EmailInstance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailProvider {
    return new EmailProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailProvider {
    return new EmailProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailProvider {
    return new EmailProvider().fromJsonString(jsonString, options);
  }

  static equals(a: EmailProvider | PlainMessage<EmailProvider> | undefined, b: EmailProvider | PlainMessage<EmailProvider> | undefined): boolean {
    return proto3.util.equals(EmailProvider, a, b);
  }
}

/**
 * an entry model for the email provider.
 *
 * @generated from message api.v1.user.settings.EmailProviderEntry
 */
export class EmailProviderEntry extends Message<EmailProviderEntry> {
  /**
   * The email-address that the provider sends emails from.
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * The client id for the provider.
   *
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * The secret id for the provider.
   *
   * @generated from field: string secret_id = 3;
   */
  secretId = "";

  /**
   * The instance of the provider.
   *
   * @generated from field: api.v1.user.settings.EmailInstance instance = 4;
   */
  instance?: EmailInstance;

  constructor(data?: PartialMessage<EmailProviderEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.EmailProviderEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance", kind: "message", T: EmailInstance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailProviderEntry {
    return new EmailProviderEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailProviderEntry {
    return new EmailProviderEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailProviderEntry {
    return new EmailProviderEntry().fromJsonString(jsonString, options);
  }

  static equals(a: EmailProviderEntry | PlainMessage<EmailProviderEntry> | undefined, b: EmailProviderEntry | PlainMessage<EmailProviderEntry> | undefined): boolean {
    return proto3.util.equals(EmailProviderEntry, a, b);
  }
}

/**
 * Deprecated: Text is not supported - The text provider.
 *
 * @generated from message api.v1.user.settings.TextProvider
 */
export class TextProvider extends Message<TextProvider> {
  /**
   * The phone number that the provider sends texts from.
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * The credentials for the provider.
   *
   * @generated from field: model.ProviderCredentials credentials = 2;
   */
  credentials?: ProviderCredentials;

  /**
   * The instance of the provider.
   *
   * @generated from field: api.v1.user.settings.TextInstance instance = 3;
   */
  instance?: TextInstance;

  constructor(data?: PartialMessage<TextProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.TextProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: ProviderCredentials },
    { no: 3, name: "instance", kind: "message", T: TextInstance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextProvider {
    return new TextProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextProvider {
    return new TextProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextProvider {
    return new TextProvider().fromJsonString(jsonString, options);
  }

  static equals(a: TextProvider | PlainMessage<TextProvider> | undefined, b: TextProvider | PlainMessage<TextProvider> | undefined): boolean {
    return proto3.util.equals(TextProvider, a, b);
  }
}

/**
 * Deprecated: Text is not supported - An entry model for the text provider.
 *
 * @generated from message api.v1.user.settings.TextProviderEntry
 */
export class TextProviderEntry extends Message<TextProviderEntry> {
  /**
   * The phone number that the provider sends texts from.
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * The client id for the provider.
   *
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * The secret id for the provider.
   *
   * @generated from field: string secret_id = 3;
   */
  secretId = "";

  /**
   * The instance of the provider.
   *
   * @generated from field: api.v1.user.settings.TextInstance instance = 4;
   */
  instance?: TextInstance;

  constructor(data?: PartialMessage<TextProviderEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.TextProviderEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance", kind: "message", T: TextInstance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextProviderEntry {
    return new TextProviderEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextProviderEntry {
    return new TextProviderEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextProviderEntry {
    return new TextProviderEntry().fromJsonString(jsonString, options);
  }

  static equals(a: TextProviderEntry | PlainMessage<TextProviderEntry> | undefined, b: TextProviderEntry | PlainMessage<TextProviderEntry> | undefined): boolean {
    return proto3.util.equals(TextProviderEntry, a, b);
  }
}

/**
 * A generic template model for sending emails and texts.
 *
 * @generated from message api.v1.user.settings.Template
 */
export class Template extends Message<Template> {
  /**
   * The body of the template.
   *
   * @generated from field: string body = 1;
   */
  body = "";

  /**
   * The subject of the template.
   *
   * @generated from field: string subject = 2;
   */
  subject = "";

  /**
   * The type of the template.
   *
   * @generated from field: api.v1.user.settings.TemplateType type = 3;
   */
  type = TemplateType.UNSPECIFIED;

  /**
   * The format of the template.
   *
   * @generated from field: repeated string format = 4;
   */
  format: string[] = [];

  constructor(data?: PartialMessage<Template>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.Template";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(TemplateType) },
    { no: 4, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Template {
    return new Template().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJsonString(jsonString, options);
  }

  static equals(a: Template | PlainMessage<Template> | undefined, b: Template | PlainMessage<Template> | undefined): boolean {
    return proto3.util.equals(Template, a, b);
  }
}

/**
 * @generated from message api.v1.user.settings.Templates
 */
export class Templates extends Message<Templates> {
  /**
   * The welcome email template.
   *
   * @generated from field: api.v1.user.settings.Template welcome_email = 1;
   */
  welcomeEmail?: Template;

  /**
   * Deprecated: Text is not supported - The welcome text template.
   *
   * @generated from field: api.v1.user.settings.Template welcome_text = 2;
   */
  welcomeText?: Template;

  /**
   * The reset password email template.
   *
   * @generated from field: api.v1.user.settings.Template reset_password_email = 3;
   */
  resetPasswordEmail?: Template;

  /**
   * Deprecated: Text is not supported - The reset password text template.
   *
   * @generated from field: api.v1.user.settings.Template reset_password_text = 4;
   */
  resetPasswordText?: Template;

  /**
   * The email verification template.
   *
   * @generated from field: api.v1.user.settings.Template verify_email = 5;
   */
  verifyEmail?: Template;

  /**
   * Deprecated: Text is not supported - The text verification template.
   *
   * @generated from field: api.v1.user.settings.Template verify_phone_number = 6;
   */
  verifyPhoneNumber?: Template;

  constructor(data?: PartialMessage<Templates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.user.settings.Templates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "welcome_email", kind: "message", T: Template },
    { no: 2, name: "welcome_text", kind: "message", T: Template },
    { no: 3, name: "reset_password_email", kind: "message", T: Template },
    { no: 4, name: "reset_password_text", kind: "message", T: Template },
    { no: 5, name: "verify_email", kind: "message", T: Template },
    { no: 6, name: "verify_phone_number", kind: "message", T: Template },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Templates {
    return new Templates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Templates {
    return new Templates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Templates {
    return new Templates().fromJsonString(jsonString, options);
  }

  static equals(a: Templates | PlainMessage<Templates> | undefined, b: Templates | PlainMessage<Templates> | undefined): boolean {
    return proto3.util.equals(Templates, a, b);
  }
}

