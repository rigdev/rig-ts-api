// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/environment/environment.proto (package api.v1.environment, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.environment.Update
 */
export class Update extends Message<Update> {
  /**
   * @generated from oneof api.v1.environment.Update.field
   */
  field: {
    /**
     * @generated from field: string add_project = 2;
     */
    value: string;
    case: "addProject";
  } | {
    /**
     * @generated from field: string remove_project = 3;
     */
    value: string;
    case: "removeProject";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Update>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.Update";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "add_project", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "remove_project", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update {
    return new Update().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update {
    return new Update().fromJsonString(jsonString, options);
  }

  static equals(a: Update | PlainMessage<Update> | undefined, b: Update | PlainMessage<Update> | undefined): boolean {
    return proto3.util.equals(Update, a, b);
  }
}

/**
 * Environment model.
 *
 * @generated from message api.v1.environment.Environment
 */
export class Environment extends Message<Environment> {
  /**
   * ID of the environment.
   *
   * @generated from field: string environment_id = 1;
   */
  environmentId = "";

  /**
   * The version of the Rig-operator CRD for this environment.
   *
   * @generated from field: string operator_version = 3;
   */
  operatorVersion = "";

  /**
   * ID of the backing cluster.
   *
   * @generated from field: string cluster_id = 4;
   */
  clusterId = "";

  /**
   * Namespace template is used to generate the namespace name when configuring
   * resources. Default is to set the namespace equal to the project name.
   *
   * @generated from field: string namespace_template = 5;
   */
  namespaceTemplate = "";

  /**
   * If true, the environment is deletable by developer users, and can be
   * deleted with capsules running.
   *
   * @generated from field: bool ephemeral = 6;
   */
  ephemeral = false;

  /**
   * Active Projects. If this is set, only capsules in these projects can be
   * deployed to this environment.
   *
   * @generated from field: repeated string active_projects = 7;
   */
  activeProjects: string[] = [];

  constructor(data?: PartialMessage<Environment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.Environment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operator_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "namespace_template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ephemeral", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "active_projects", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Environment {
    return new Environment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Environment {
    return new Environment().fromJsonString(jsonString, options);
  }

  static equals(a: Environment | PlainMessage<Environment> | undefined, b: Environment | PlainMessage<Environment> | undefined): boolean {
    return proto3.util.equals(Environment, a, b);
  }
}

