// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file api/v1/environment/service.proto (package api.v1.environment, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Pagination } from "../../../model/common_pb.js";
import { Environment } from "./environment_pb.js";

/**
 * Request for listing available environments.
 *
 * @generated from message api.v1.environment.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * Pagination options.
   *
   * @generated from field: model.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * Response for listing available environments.
 *
 * @generated from message api.v1.environment.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * List of environments.
   *
   * @generated from field: repeated api.v1.environment.Environment environments = 1;
   */
  environments: Environment[] = [];

  /**
   * The version of the Rig-platform.
   *
   * @generated from field: string platform_version = 2;
   */
  platformVersion = "";

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environments", kind: "message", T: Environment, repeated: true },
    { no: 2, name: "platform_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message api.v1.environment.ProjectEnvironment
 */
export class ProjectEnvironment extends Message<ProjectEnvironment> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  constructor(data?: PartialMessage<ProjectEnvironment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.ProjectEnvironment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectEnvironment {
    return new ProjectEnvironment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectEnvironment {
    return new ProjectEnvironment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectEnvironment {
    return new ProjectEnvironment().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectEnvironment | PlainMessage<ProjectEnvironment> | undefined, b: ProjectEnvironment | PlainMessage<ProjectEnvironment> | undefined): boolean {
    return proto3.util.equals(ProjectEnvironment, a, b);
  }
}

/**
 * @generated from message api.v1.environment.ProjectEnvironmentNamespace
 */
export class ProjectEnvironmentNamespace extends Message<ProjectEnvironmentNamespace> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 2;
   */
  environmentId = "";

  /**
   * @generated from field: string namespace = 3;
   */
  namespace = "";

  constructor(data?: PartialMessage<ProjectEnvironmentNamespace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.ProjectEnvironmentNamespace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectEnvironmentNamespace {
    return new ProjectEnvironmentNamespace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectEnvironmentNamespace {
    return new ProjectEnvironmentNamespace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectEnvironmentNamespace {
    return new ProjectEnvironmentNamespace().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectEnvironmentNamespace | PlainMessage<ProjectEnvironmentNamespace> | undefined, b: ProjectEnvironmentNamespace | PlainMessage<ProjectEnvironmentNamespace> | undefined): boolean {
    return proto3.util.equals(ProjectEnvironmentNamespace, a, b);
  }
}

/**
 * @generated from message api.v1.environment.GetNamespacesRequest
 */
export class GetNamespacesRequest extends Message<GetNamespacesRequest> {
  /**
   * @generated from field: repeated api.v1.environment.ProjectEnvironment project_envs = 1;
   */
  projectEnvs: ProjectEnvironment[] = [];

  constructor(data?: PartialMessage<GetNamespacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.GetNamespacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_envs", kind: "message", T: ProjectEnvironment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespacesRequest {
    return new GetNamespacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespacesRequest {
    return new GetNamespacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespacesRequest {
    return new GetNamespacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespacesRequest | PlainMessage<GetNamespacesRequest> | undefined, b: GetNamespacesRequest | PlainMessage<GetNamespacesRequest> | undefined): boolean {
    return proto3.util.equals(GetNamespacesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.environment.GetNamespacesResponse
 */
export class GetNamespacesResponse extends Message<GetNamespacesResponse> {
  /**
   * @generated from field: repeated api.v1.environment.ProjectEnvironmentNamespace namespaces = 2;
   */
  namespaces: ProjectEnvironmentNamespace[] = [];

  constructor(data?: PartialMessage<GetNamespacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.environment.GetNamespacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "namespaces", kind: "message", T: ProjectEnvironmentNamespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespacesResponse {
    return new GetNamespacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespacesResponse {
    return new GetNamespacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespacesResponse {
    return new GetNamespacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespacesResponse | PlainMessage<GetNamespacesResponse> | undefined, b: GetNamespacesResponse | PlainMessage<GetNamespacesResponse> | undefined): boolean {
    return proto3.util.equals(GetNamespacesResponse, a, b);
  }
}

